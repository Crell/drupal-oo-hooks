<?php

class Theme_xtemplate extends BaseTheme {

  function system($field) {
    $system["name"] = "xtemplate";
    $system["description"] = "a template driven theme";

    return $system[$field];
  }

  function Theme_xtemplate() {
    include_once("themes/xtemplate/xtemplate.inc");

    $this->template = new XTemplate("themes/xtemplate/xtemplate.xtmpl");
    $this->template->SetNullBlock(" ");  // "" doesnt work!
  }

  function node($node, $main) {

    $this->template->assign(array (
       "title"     => ucfirst($node->title),
       "author"    => format_name($node),
       "date"      => format_date($node->created),
       "content"   => ($main && $node->teaser) ?
                      check_output($node->teaser) :
                      check_output($node->body)));

    if ($taxonomy = taxonomy_link("taxonomy terms", $node)) {
      $this->template->assign("taxonomy", $this->links($taxonomy));
    }

    if ($links = link_node($node, $main)) {
      $this->template->assign("links", $this->links($links));
    }

    $this->template->parse("node");
    print $this->template->text("node");
    $this->template->reset("node");
  }

  function comment($comment, $link = 0) {
    $this->template->assign(array (
        "title"     => ucfirst($comment->subject),
        "author"    => format_name($comment),
        "date"      => format_date($comment->timestamp),
        "content"   => check_output($comment->comment),
        "links"     => $link));

    if ($comment->new) {
      $this->template->parse("comment_new");
      print $this->template->text("comment_new");
      $this->template->reset("comment_new");
    }
    else {
      $this->template->parse("comment_old");
      print $this->template->text("comment_old");
      $this->template->reset("comment_old");
    }
  }

  function header($title = "") {
    global $base_url;

    $this->template->assign(array(
      "title" => ($title ? $title." | ". variable_get("site_name", "drupal") : variable_get("site_name", "drupal") ." | ". variable_get("site_slogan", "")),
      "head" => theme_head(),
      "base" => "$base_url/",
      "links" => $this->links(link_page())
    ));

    if (!arg(0)) {
      $this->template->parse("header.message");
    }

    $this->template->parse("header");
    print $this->template->text("header");
  }

  function block($title, $content, $region = "main") {
    $this->template->assign(array(
      "subject" => $title,
      "content" => $content
    ));

    $this->template->parse("block");
    print $this->template->text("block");
    $this->template->reset("block");
  }

  function box($title, $content, $region = "main") {
    if ($title && $content) {
      $this->template->assign(array(
        "subject" => $title,
        "content" => $content));

      $this->template->parse("box");
      print $this->template->text("box");
      $this->template->reset("box");
    }
  }

  function footer() {
    // unfortunately, theme_blocks PRINTS the blocks instead of RETURNING them.
    // so we need some output buffering
    ob_start();
    theme_blocks("all");
    $this->template->assign("blocks", ob_get_contents());
    ob_end_clean();

    $this->template->parse("footer");
    print $this->template->text("footer");
  }
}
?>
