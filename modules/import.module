<?php
// $Id$

function import_help() {
 ?>
  <p>In Drupal you have <i>feeds</i> and <i>bundles</i>.   Feeds define news sources and bundles categoriz syndicated content by source, topic or any other heuristic.   Bundles provide a generalized way of creating composite feeds.  They allow you, for example, to combine various sport-related feeds into one bundle called "Sport".</p>
  <p>You can have several providers of news feeds.  You can add a feed by clicking the "add feed" link on the import administration pages.  Give the feed a name, supply the URI and a comma-separated list of attributes that you want to associate the feed with.  The update interval defines how often Drupal should go out to try and grab fresh content.  The expiration time defines how long syndicated content is kept in the database.  So set the update and expiration time and save your settings.  You have just defined your first feed.  If you have more feeds repeat as necessary.</p>
  <p>To verify whether your feed works, press "update items" at the overview page.  The number of news items that have been sucessfully fetched, should then become visible in the third column of the feed overview.</p>
  <p>Now you have to define some bundles.  Bundles look for feeds that contain one of the keywords associated with the bundle and display those feeds together.  To define a bundle you have to give it a name and a comma-separated list of keywords just like this is the case for feeds.</p>
  <p>Your newly created bundle will now show up in the list of blocks that you can see at the block related administration pages.  There you can customize where and when your bundles will be displayed.</p>
 <?php
}

function import_system($field){
  $system["description"] = t("Used to aggregate syndicated content (RSS and RDF).");
  return $system[$field];
}

function import_settings() {
  $number = array(5 => 5, 10 => 10, 15 => 15, 20 => 20, 25 => 25, 30 => 30, 35 => 35, 40 => 40, 45 => 45, 50 => 50, 55 => 55, 60 => 60, 65 => 65, 70 => 70, 75 => 75, 80 => 80, 85 => 85, 90 => 90, 95 => 95, 100 => 100);
  $output .= form_select("Items per block", "import_block_limit", variable_get("import_block_limit", 15), $number, "The maximum number of news items displayed in one block.");
  $output .= form_select("Items per page", "import_page_limit", variable_get("import_page_limit", 75), $number, "The maximum number of news items displayed on one page.");

  return $output;
}

function import_perm() {
  return array("administer news feeds", "access news feeds");
}

function import_link($type) {

  if ($type == "page" && user_access("access news feeds")) {
    $links[] = l(t("news feeds"), "import", array("title" => t("Read the latest news from syndicated websites.")));
  }

  if ($type == "admin" && user_access("administer news feeds")) {
    menu_add("news aggregation", url("admin/import"), "Content syndication through RDF/RSS feeds.", NULL, NULL, 3);
     menu_add("add new feed", url("admin/import/add/feed"), "Add new news feed.", NULL, "news aggregation", 2);
     menu_add("add new bundle", url("admin/import/add/bundle"), "Create a new bundle.", NULL, "news aggregation", 3);
     menu_add("tag news items", url("admin/import/tag"), "Assign bundle attributes to a news item.", NULL, "news aggregation", 4);
     menu_add("help", url("admin/import/help"), "More information about news aggregation.", NULL, "news aggregation", 5);
  }

  return $links ? $links : array();
}

function import_cron() {
  $result = db_query("SELECT * FROM feed WHERE timestamp + refresh < ". time());
  while ($feed = db_fetch_array($result)) {
    import_refresh($feed);
  }
}

function import_update() {
  $result = db_query("SELECT * FROM feed");
  while ($feed = db_fetch_array($result)) {
    import_refresh($feed);
  }
}

function import_format_item($item, $feed = 0) {
  global $theme, $user;

  if ($user->uid && user_access("maintain personal blog")) {
    $output .= l("<img src=\"". $theme->image("blog.gif") ."\" border=\"0\" width=\"12\" height=\"16\" alt=\"". t("Blog this item") ."\" />", "node/add/blog&amp;iid=$item->iid", array("title" => t("Comment on this news item in your personal blog.")));
  }

  // external link
  $output .= "<a href=\"$item->link\" target=\"_new\">$item->title</a>";

  return $output ."<br />";
}

function import_bundle_block($attributes) {

  if ($attributes) {
    $keys = explode(",", $attributes);
    foreach ($keys as $key) $where[] = "attributes LIKE '%". trim($key) ."%'";

    $result = db_query("SELECT * FROM item WHERE ". implode(" OR ", $where) ." ORDER BY iid DESC LIMIT ". variable_get("import_block_limit", 15));
  }

  while ($item = db_fetch_object($result)) {
    $output .= import_format_item($item);
  }

  return $output;
}

function import_feed_block($feed) {
  $result = db_query("SELECT * FROM item WHERE fid = '%s' ORDER BY iid DESC LIMIT ". variable_get("import_block_limit", 15), $feed->fid);

  while ($item = db_fetch_object($result)) {
    $output .= import_format_item($item);
  }

  return $output;
}

function import_block($op, $delta) {
  if ($op == "list") {
    $result = db_query("SELECT * FROM bundle ORDER BY title");
    while ($bundle = db_fetch_object($result)) {
      $block[$bundle->bid]["info"] = "$bundle->title bundle";
    }

    $result = db_query("SELECT * FROM feed ORDER BY fid");
    while ($feed = db_fetch_object($result)) {
      $block[$feed->fid]["info"] = "$feed->title feed";
    }

    return $block;
  }
  else {
    $feed = db_fetch_object(db_query("SELECT * FROM feed WHERE fid = '%d'", $delta));
    if ($feed) {
      $block["subject"] = $feed->title;
      $block["content"] = import_feed_block($feed) ."<div align=\"right\">". l(t("more"), "import/feed/$feed->fid", array("title" => t("View this feed's recent news."))) ."</div>";
    }
    else {
      // it was a bundle. this is NOT elegant
      $bundle = db_fetch_object(db_query("SELECT * FROM bundle WHERE bid = '%d'", $delta));
      $block["subject"] = $bundle->title;
      $block["content"] = import_bundle_block($bundle->attributes) ."<div align=\"right\">". l(t("more"), "import/bundle/$bundle->bid", array("title" => t("View this bundle's recent news."))) ."</div>";
    }

    return $block;
  }
}

function import_get_bundles($attributes = 0) {

  $block = array();

  $result = db_query("SELECT * FROM bundle ORDER BY title");
  while ($bundle = db_fetch_object($result)) {
    $block[$bundle->bid]["subject"] = $bundle->title;
    $block[$bundle->bid]["content"] = import_bundle_block($bundle->attributes) ."<div align=\"right\">". l(t("more"), "import/bundle/$bundle->bid", array("title" => t("View this bundle's recent news."))) ."</div>";
    $block[$bundle->bid]["info"] = "$bundle->title bundle";
  }

  return $block;
}

function import_get_feeds($attributes = 0) {

  $block = array();

  $result = db_query("SELECT * FROM feed ORDER BY fid");
  while ($feed = db_fetch_object($result)) {
    $block[$feed->fid]["subject"] = $feed->title;
    $block[$feed->fid]["content"] = import_feed_block($feed) ."<div align=\"right\">". l(t("more"), "import/feed/$feed->fid", array("title" => t("View this feed's recent news."))) ."</div>";
    $block[$feed->fid]["info"] = "$feed->title feed";
  }

  return $block;
}

function import_remove($feed) {
  db_query("DELETE FROM item WHERE fid = '%s'", $feed["fid"]);
  return "feed '". $feed["title"] ."' reset.";
}

function import_refresh($feed) {

  /*
  ** Check whether the feed is properly configured:
  */

  if (!ereg("^http://|ftp://", $feed["url"])) {
    watchdog("warning", "import: invalid or missing URL for '". $feed["title"] ."'");
  }

  /*
  ** Grab the news items:
  */

  if ($fp = @fopen($feed["url"], "r")) {
    // fetch data:
    while (!feof($fp)) {
      $data .= fgets($fp, 128);
    }
    fclose($fp);

    // initialize the translation table:
    $tt = array_flip(get_html_translation_table(HTML_ENTITIES));
    $tt["&apos;"] = "'";

    /*
    ** Remove unsupported tags or sub-elements:
    */

    $data = ereg_replace("<textinput([^s].*)</textinput>", "", $data);
    $data = ereg_replace("<image([^s].*)</image>", "", $data);

    /*
    ** Extract and process channel information:
    */

    $channel = ereg_replace("<item([^s].*)</item>", "", $data);

    eregi("<title>([^<]*)</title>", $channel, $title);
    eregi("<link>([^<]*)</link>", $channel, $link);
    eregi("<description>([^<]*)</description>", $channel, $description);

    /*
    ** Strip invalid tags and provide default values (if required):
    */

    $feed["link"] = strip_tags($link[1]);
    $feed["description"] = filter(strtr($description[1], $tt));

    db_query("UPDATE feed SET timestamp = '%s', link = '%s', description = '%s' WHERE fid = '%s'", time(), $feed["link"], $feed["description"], $feed["fid"]);

    /*
    ** Extract and process individual items:
    */

    eregi("<item([^s].*)</item>", $data, $data);
    // print "<pre>". htmlentities($data[0]) ."</pre>";

    $items = array_reverse(explode("</item>", $data[0]));

    foreach ($items as $item) {
      unset($title, $link, $author, $description);

      $t = eregi("<title>(.*)</title>", $item, $title);
      $l = eregi("<link>(.*)</link>", $item, $link);
      $g = eregi("<guid.*>(.*)</guid>", $item, $guid);
      $a = eregi("<author>(.*)</author>", $item, $author);
      $d = eregi("<description>(.*)</description>", $item, $description);

      if ($t || $l || $g || $a || $d) {

        /*
        ** Strip invalid tags and provide default values (if required):
        */

        $description = filter(strtr($description[1], $tt));
  if ($title[1]) {
    $title = strip_tags(strtr($title[1], $tt));
  }
  else {
    /*
          ** Use up to 40 characters of the $description, ending at
          ** word boundary, but don't split potential entities.
          */
    $title = preg_replace('/^(.*)[^\w;&].*?$/', "\\1", substr(strip_tags($description), 0, 40));
  }
  if ($link[1]) {
    $link = strip_tags($link[1]);
  }
  elseif ($guid[1] && (strncmp($guid[1], "http://", 7) == 0)) {
    $link = strip_tags($guid[1]);
  }
  else {
    $link = $feed["link"];
  }
        $author = strip_tags($author[1]);

        // print "<pre>title = ". htmlentities($title) ."\n\ndescription = ". htmlentities($description) ."\n\nlink = ". htmlentities($link) ."</pre><hr />";

        /*
        ** Save this item.  Try to avoid duplicate entries as much as
        ** possible.  If we find a duplicate entry, we resolve it and
        ** pass along its ID such that we can update it (when needed).
        */

        if ($link && $link != $feed["link"] && $link != $feed["url"]) {
          $entry = db_fetch_object(db_query("SELECT iid FROM item WHERE fid = '%s' AND link = '%s'", $feed["fid"], $link));
        }
        else {
          $entry = db_fetch_object(db_query("SELECT iid FROM item WHERE fid = '%s' AND title = '%s'", $feed["fid"], $title));
        }

        import_save_item(array(iid => $entry->iid, fid => $feed["fid"], title => $title, link => $link, author => $author, description => $description, attributes => $feed["attributes"]));
      }
    }

    /*
    ** Remove all the old, expired items:
    */

    unset($items);

    $result = db_query("SELECT iid FROM item WHERE fid = '%s' ORDER BY timestamp", $feed["fid"]);

    while ($item = db_fetch_object($result)) {
      $items[] = "iid = '$item->iid'";
    }

    if (sizeof($items) > 50) {
      db_query("DELETE FROM item WHERE ". implode(" OR ", array_slice($items, 0, - 50)));
    }

  }
  else {
    watchdog("warning", "import: failed to syndicate from '". $feed["title"] ."'". ($errstr ? ": $errstr" : ""));
  }

  return "feed '". $feed["title"] ."' updated.";
}

function import_save_item($edit) {
  if ($edit["iid"] && $edit["title"]) {
    db_query("UPDATE item SET title = '%s', link = '%s', author = '%s', description = '%s', attributes = '%s' WHERE iid = '%s'", $edit["title"], $edit["link"], $edit["author"], $edit["description"], $edit["attributes"], $edit["iid"]);
  }
  else if ($edit["iid"]) {
    db_query("DELETE FROM item WHERE iid = '%s'", $edit["iid"]);
  }
  else if ($edit["title"] && $edit["link"]) {
    db_query("INSERT INTO item (fid, title, link, author, description, attributes, timestamp) VALUES ('%s', '%s', '%s', '%s', '%s', '%s', '%s')", $edit["fid"], $edit["title"], $edit["link"], $edit["author"], $edit["description"], $edit["attributes"], time());
  }
}

function import_form_bundle($edit = array()) {

  $form .= form_textfield("Title", "title", $edit["title"], 50, 64, "The name of the bundle.");
  $form .= form_textfield("Attributes", "attributes", $edit["attributes"], 50, 128, "A comma-separated list of keywords describing the bundle.");

  $form .= form_submit("Submit");

  if ($edit["bid"]) {
    $form .= form_submit("Delete");
    $form .= form_hidden("bid", $edit["bid"]);
  }

  return form($form);
}

function import_save_bundle($edit) {
  if ($edit["bid"] && $edit["title"]) {
    db_query("UPDATE bundle SET title = '%s', attributes = '%s' WHERE bid = '%s'", $edit["title"], $edit["attributes"], $edit["bid"]);
  }
  else if ($edit["bid"]) {
    db_query("DELETE FROM bundle WHERE bid = '%s'", $edit["bid"]);
  }
  else if ($edit["title"]) {
    // a single unique id for bundles and feeds, to use in blocks
    $next_id = db_next_id("import");
    db_query("INSERT INTO bundle (bid, title, attributes) VALUES ('%d', '%s', '%s')", $next_id, $edit["title"], $edit["attributes"]);
  }
}

function import_form_feed($edit = array()) {

  $period = array(900 => format_interval(900), 1800 => format_interval(1800), 3600 => format_interval(3600), 7200 => format_interval(7200), 10800 => format_interval(10800), 21600 => format_interval(21600), 32400 => format_interval(32400), 43200 => format_interval(43200), 64800 => format_interval(64800), 86400 => format_interval(86400), 172800 => format_interval(172800), 259200 => format_interval(259200), 604800 => format_interval(604800), 1209600 => format_interval(1209600), 2419200 => format_interval(2419200));

  if ($edit["refresh"] == "") {
    $edit["refresh"] = 3600;
  }

  $form .= form_textfield("Title", "title", $edit["title"], 50, 64, "The name of the feed; typically the name of the website you syndicate content from.");
  $form .= form_textfield("Url", "url", $edit["url"], 50, 128, "The fully-qualified URL of the feed.");
  $form .= form_textfield("Attributes", "attributes", $edit["attributes"], 50, 128, "A comma-separated list of keywords describing the feed.");
  $form .= form_select("Update interval", "refresh", $edit["refresh"], $period, "The refresh interval indicating how often you want to update this feed.  Requires crontab.");

  $form .= form_submit("Submit");

  if ($edit["fid"]) {
    $form .= form_submit("Delete");
    $form .= form_hidden("fid", $edit["fid"]);
  }

  return form($form);
}

function import_save_feed($edit) {
  if ($edit["fid"] && $edit["title"]) {
    db_query("UPDATE feed SET title = '%s', url = '%s', attributes = '%s', refresh = '%s' WHERE fid = '%s'", $edit["title"], $edit["url"], $edit["attributes"], $edit["refresh"], $edit["fid"]);
    db_query("DELETE FROM item WHERE fid = '%s'", $edit["fid"]);
  }
  else if ($edit["fid"]) {
    db_query("DELETE FROM feed WHERE fid = '%s'", $edit["fid"]);
    db_query("DELETE FROM item WHERE fid = '%s'", $edit["fid"]);
  }
  else if ($edit["title"]) {
    // a single unique id for bundles and feeds, to use in blocks
    $next_id = db_next_id("import");
    db_query("INSERT INTO feed (fid, title, url, attributes, refresh) VALUES ('%d', '%s', '%s', '%s', '%s')", $next_id, $edit["title"], $edit["url"], $edit["attributes"], $edit["refresh"]);
  }
}

function import_save_attributes($edit) {
  foreach ($edit as $iid => $value) {
    db_query("UPDATE item SET attributes = '%s' WHERE iid = '%s'", $value, $iid);
  }
  return "attributes has been saved";
}

function import_get_feed($fid) {
  return db_fetch_array(db_query("SELECT * FROM feed WHERE fid = '%s'", $fid));
}

function import_get_bundle($bid) {
  return db_fetch_array(db_query("SELECT * FROM bundle WHERE bid = '%s'", $bid));
}

function import_view() {
  $result = db_query("SELECT f.*, COUNT(i.iid) AS items FROM feed f LEFT JOIN item i ON f.fid = i.fid GROUP BY f.fid, f.title, f.url, f.refresh, f.timestamp, f.attributes, f.link, f.description ORDER BY f.title");

  $output .= "<h3>Feed overview</h3>";

  $header = array(t("title"), t("attributes"), t("items"), t("last update"), t("next update"), array("data" => t("operations"), "colspan" => 3));
  unset($rows);
  while ($feed = db_fetch_object($result)) {
    $rows[] = array($feed->title, $feed->attributes, format_plural($feed->items, "1 item", "%count items"), ($feed->timestamp ? format_interval(time() - $feed->timestamp) ." ago" : "never"), ($feed->timestamp ? format_interval($feed->timestamp + $feed->refresh - time()) ." left" : "never"), l(t("edit feed"), "admin/import/edit/feed/$feed->fid"), l(t("remove items"), "admin/import/remove/$feed->fid"), l(t("update items"), "admin/import/update/$feed->fid"));
  }
  $output .= table($header, $rows);

  $result = db_query("SELECT * FROM bundle ORDER BY title");

  $output .= "<h3>Bundle overview</h3>";

  $header = array(t("title"), t("attributes"), t("operations"));
  unset($rows);
  while ($bundle = db_fetch_object($result)) {
    $rows[] = array($bundle->title, $bundle->attributes, l(t("edit bundle"), "admin/import/edit/bundle/$bundle->bid"));
  }
  $output .= table($header, $rows);

  return $output;
}

function import_tag() {

  $result = db_query("SELECT i.*, f.title AS feed FROM item i LEFT JOIN feed f ON i.fid = f.fid ORDER BY i.iid DESC LIMIT 50");

  $header = array(t("date"), t("feed"), t("news item"));
  while ($item = db_fetch_object($result)) {
    $rows[] = array(array("data" => format_date($item->timestamp, "small"), "nowrap" => "nowrap", "valign" => "top"), array("data" => l($item->feed, "admin/import/edit/feed/$item->fid"), "valign" => "top"), "<a href=\"$item->link\">$item->title</a>". ($item->description ? "<br /><small><i>$item->description</i></small>" : "") ."<br /><input type=\"text\" name=\"edit[$item->iid]\" value=\"". check_form($item->attributes) ."\" size=\"50\" />");
  }

  $output .= table($header, $rows);
  $output .= "<input type=\"submit\" name=\"op\" value=\"Save attributes\" />\n";

  return form($output);
}

function import_admin() {
  global $op, $edit;

  if (user_access("administer news feeds")) {

    if (empty($op)) {
      $op = arg(2);
    }

    switch ($op) {
      case "help":
        print import_help();
        break;
      case "add":
        if (arg(3) == "bundle") {
          print import_form_bundle();
        }
        else {
          print import_form_feed();
        }
        break;
      case "edit":
        if (arg(3) == "bundle") {
          print import_form_bundle(import_get_bundle(arg(4)));
        }
        else {
          print import_form_feed(import_get_feed(arg(4)));
        }
        break;
      case "remove":
        print status(import_remove(import_get_feed(arg(3))));
        print import_view();
        break;
      case "update":
        print status(import_refresh(import_get_feed(arg(3))));
        print import_view();
        break;
      case "tag":
        print import_tag();
        break;
      case "Save attributes":
        print status(import_save_attributes($edit));
        print import_tag();
        break;
      case "Delete":
        $edit["title"] = 0;
        // fall through:
      case "Submit":
        if (arg(3) == "bundle") {
          print status(import_save_bundle($edit));
        }
        else {
          print status(import_save_feed($edit));
        }
        // fall through:
      default:
        print import_view();
    }
  }
  else {
    print message_access();
  }
}

function import_page_info() {
  global $theme;

  $links[] = l(t("latest news"), "import", array("title" => t("Read the latest news from syndicated websites.")));
  $links[] = l(t("news by source"), "import/feeds", array("title" => t("View the latest headlines sorted by source.")));
  $links[] = l(t("news by topic"), "import/bundles", array("title" => t("View the latest headlines sorted by topic.")));
  $links[] = l(t("news sources"), "import/sources", array("title" => t("View a list of all the websites we syndicate from.")));

  if (user_access("administer news feeds")) {
    $links[] = l(t("administer news feeds"), "admin/import", array("title" => t("View the news feed administrative pages.")));
  }

  return "<div align=\"center\">". $theme->links($links) ."</div>";
}

function import_page_last() {
  global $theme;

  $result = db_query("SELECT i.*, f.title AS ftitle, f.link AS flink FROM item i LEFT JOIN feed f ON i.fid = f.fid ORDER BY i.iid DESC LIMIT ". variable_get("import_page_limit", 75));

  $output .= "<table border=\"0\" cellpadding=\"4\" cellspacing=\"2\">";
  while ($item = db_fetch_object($result)) {
    if (module_exist("blog") && user_access("maintain personal blog")) {
      $links[] = l(t("blog it"), "node/add/blog&amp;iid=$item->iid", array("title" => t("Comment on this news item in your personal blog.")));
    }
    $links[] = l(t("feed"), "import/feed/$item->fid", array("title" => t("Read more syndicated news from this feed.")));

    if ($item->link) {
      $output .= "<tr><td><a href=\"$item->link\">$item->title</a> &middot; ". l($item->ftitle, "import/feed/$item->fid", array("title" => t("View more information about this feed."))) ."</td><td align=\"right\" nowrap=\"nowrap\" valign=\"top\">". $theme->links($links) ."</td></tr>\n";
    }

    if ($item->description) {
      $output .= "<tr><td colspan=\"2\"><div style=\"margin-left: 20px;\">$item->description</div><br /></td></tr>";
    }

    unset($links);
  }
  $output .= "</table>\n";

  $theme->header();
  $theme->box(t("News feeds"), import_page_info());
  $theme->box(t("Latest news"), $output);
  $theme->footer();
}

function import_page_feed($fid) {
  global $theme;

  $feed = db_fetch_object(db_query("SELECT * FROM feed WHERE fid = '%s'", $fid));

  $header .= "<p><b>". t("Website") .":</b><div style=\"margin-left: 20px;\"><a href=\"$feed->link\">$feed->link</a></div></p>";
  $header .= "<p><b>". t("Description") .":</b><div style=\"margin-left: 20px;\">$feed->description</div></p>";
  $header .= "<p><b>". t("Last update") .":</b><div style=\"margin-left: 20px;\">". format_interval(time() - $feed->timestamp) ." ". t("ago") ." <a href=\"$feed->url\"><img src=\"". $theme->image("xml.gif") ."\" width=\"36\" height=\"14\" align=\"right\" border=\"0\" alt=\"\" /></a><br /><br /></div></p>\n";

  $result = db_query("SELECT * FROM item WHERE fid = '%s' ORDER BY iid DESC LIMIT ". variable_get("import_page_limit", 75), $fid);

  $output .= "<table border=\"0\" cellpadding=\"4\" cellspacing=\"2\">";
  while ($item = db_fetch_object($result)) {
    if (module_exist("blog") && user_access("maintain personal blog")) {
      $links[] = l(t("blog it"), "node/add/blog&amp;iid=$item->iid", array("title" => t("Comment on this news item in your personal blog.")));
    }
    $links[] = "<a href=\"$item->link\">". t("visit") ."</a>";

    if ($item->link) {
      $output .= "<tr><td><a href=\"$item->link\">$item->title</a></td><td align=\"right\" nowrap=\"nowrap\" valign=\"top\">". $theme->links($links) ."</td></tr>\n";
    }
    if ($item->description) {
      $output .= "<tr><td colspan=\"2\"><div style=\"margin-left: 20px;\">$item->description</div><br /></td></tr>";
    }

    unset($links);
  }
  $output .= "</table>\n";

  $theme->header();
  $theme->box(t("News feeds"), import_page_info());
  $theme->box($feed->title, $header);
  $theme->box(t("Latest news"), $output);
  $theme->footer();
}

function import_page_bundle($bid) {
  global $theme;

  $bundle = db_fetch_object(db_query("SELECT * FROM bundle WHERE bid = '%s'", $bid));

  $header .= "<p><b>". t("Website") .":</b><div style=\"margin-left: 20px;\">". l($bundle->title, "import/bundle/$bundle->bid") ."</div></p>";
  $header .= "<p><b>". t("Description") .":</b><div style=\"margin-left: 20px;\">". t("A composite news feed about") ." $bundle->attributes.</div></p>";

  $keys = explode(",", $bundle->attributes);
  foreach ($keys as $key) $where[] = "i.attributes LIKE '%". trim($key) ."%'";
  $result = db_query("SELECT i.*, f.title AS ftitle, f.link AS flink FROM item i, feed f WHERE (". implode(" OR ", $where) .") AND i.fid = f.fid ORDER BY iid DESC LIMIT ". variable_get("import_page_limit", 75));

  $output .= "<table border=\"0\" cellpadding=\"4\" cellspacing=\"2\">";
  while ($item = db_fetch_object($result)) {
    if (module_exist("blog") && user_access("maintain personal blog")) {
      $links[] = l(t("blog it"), "node/add/blog&amp;iid=$item->iid", array("title" => t("Comment on this news item in your personal blog.")));
    }
    $links[] = l(t("feed"), "import/feed/$item->fid", array("title" => t("Read more syndicated news from this feed.")));
    $links[] = "<a href=\"$item->link\">". t("visit") ."</a>";

    if ($item->link) {
      $output .= "<tr><td><a href=\"$item->link\">$item->title</a> &middot; ". l($item->ftitle, "import/feed/$item->fid", array("title" => t("View more information about this feed."))) ."</td><td align=\"right\" nowrap=\"nowrap\" valign=\"top\">". $theme->links($links) ."</td></tr>\n";
    }

    if ($item->description) {
      $output .= "<tr><td colspan=\"2\"><div style=\"margin-left: 20px;\">$item->description</div><br /></td></tr>";
    }

    unset($links);
  }
  $output .= "</table>\n";

  $theme->header();
  $theme->box(t("News feeds"), import_page_info());
  $theme->box($bundle->title, $header);
  $theme->box(t("Latest news"), $output);
  $theme->footer();

}

function import_page_sources() {
  global $theme;

  $result = db_query("SELECT * FROM feed ORDER BY title");

  while ($feed = db_fetch_object($result)) {
    $output .= l($feed->title, "import/feed/$feed->fid");
    $output .= "<div style=\"margin-left: 20px;\">$feed->description</div><br />";
  }

  $output .= l("<img src=\"". $theme->image("xml.gif") ."\" width=\"36\" height=\"14\" align=\"right\" border=\"0\" />", "import/fd", array("title" => t("View the list of syndicated websites in XML format."))) ."<br />";

  $theme->header();
  $theme->box(t("News feeds"), import_page_info());
  $theme->box(t("News sources"), $output);
  $theme->footer();
}

function import_page_fd() {

  $result = db_query("SELECT * FROM feed ORDER BY title");

  $output .= "<?xml version=\"1.0\"?>\n\n";
  $output .= "<rssfeeds version=\"0.1\">\n\n";

  while ($feed = db_fetch_object($result)) {
    $output .= "<channel>\n";
    $output .= " <title>". htmlentities($feed->title) ."</title>\n";
    $output .= " <link>". htmlentities($feed->url) ."</link>\n";
    $output .= "</channel>\n\n";
  }

  $output .= "</rssfeeds>\n";

  header("Content-Type: text/xml");

  print $output;
}

function import_page_bundles() {
  import_page_blocks(import_get_bundles());
}

function import_page_feeds() {
  import_page_blocks(import_get_feeds());
}

function import_page_blocks($blocks) {
  global $theme;

  $theme->header();
  $theme->box(t("News feeds"), import_page_info());
  print "<table cellpadding=\"0\" cellspacing=\"5\" border=\"0\" width=\"100%\">\n";
  print " <tr>\n";

  for ($t = 0; $t < 3; $t++) {
    $i = 1;
    print "  <td width=\"33%\" valign=\"top\">\n";
    while ($block = each($blocks)) {
      $theme->box($block["value"]["subject"], $block["value"]["content"]);
      if ($i == ceil(count($blocks) / 3)) {
        break;
      }
      $i++;
    }
    print "  </td>\n";
  }

  print " </tr>\n";
  print "</table>\n";
  $theme->footer();
}

function import_page() {
  if (user_access("access news feeds")) {
    switch (arg(1)) {
      case "feed":
        import_page_feed(arg(2));
        break;
      case "bundle":
        import_page_bundle(arg(2));
        break;
      case "feeds":
        import_page_feeds();
        break;
      case "bundles":
        import_page_bundles();
        break;
      case "sources":
        import_page_sources();
        break;
      case "fd":
        import_page_fd();
        break;
      default:
        import_page_last();
    }
  }
}

?>
