<?php
// $Id$

/**
 * @file
 * Allows administrators to customize the site navigation menu.
 */

/**
 * Maximum length of menu name as entered by the user. Database length is 32
 * and we add a menu- prefix.
 */
define('MENU_MAX_MENU_NAME_LENGTH_UI', 27);

/**
 * Implementation of hook_help().
 */
function menu_help($path, $arg) {
  switch ($path) {
    case 'admin/help#menu':
      $output = t('<p>Menus are a collection of links (menu items) used to navigate a website. The menu module provides an interface to control and customize the powerful menu system that comes with Drupal. Menus are primarily displayed as a hierarchical list of links using Drupal\'s highly flexible <a href="@admin-block">blocks</a> feature. Each menu automatically creates a block of the same name. By default, new menu items are placed inside a built-in menu labelled %navigation, but administrators can also create custom menus.</p>
<p>Drupal themes generally provide out-of-the-box support for two menus commonly labelled %primary-links and %secondary-links. These are sets of links which are usually displayed in the header or footer of each page (depending on the currently active theme).</p>
Menu administration tabs:
<ul>
  <li>On the administer menu page, administrators can "edit" to change the title, description, parent or weight of a menu item. Under the "operations" column, click on "enable/disable" to toggle a menu item on or off. Only menu items which are enabled are displayed in the corresponding menu block. Note that the default menu items generated by the menu module cannot be deleted, only disabled.</li>
  <li>Use the "add menu" tab to submit a title for a new custom menu. Once submitted, the menu will appear in a list toward the bottom of the administer menu page underneath the main navigation menu. Under the menu name there will be links to edit or delete the menu, and a link to add new items to the menu.</li>
  <li>Use the "add menu item" tab to create new links in either the navigation or a custom menu (such as a primary/secondary links menu). Select the parent item to place the new link within an existing menu structure. For top level menu items, choose the name of the menu in which the link is to be added.</li>
</ul>', array('%navigation' => 'Navigation', '%primary-links' => 'Primary links', '%secondary-links' => 'Secondary links', '@admin-block' => url('admin/build/block'), '@menu-settings' => url('admin/build/menu/settings')));
      $output .= '<p>'. t('For more information please read the configuration and customization handbook <a href="@menu">Menu page</a>.', array('@menu' => 'http://drupal.org/handbook/modules/menu/')) .'</p>';
      return $output;
    case 'admin/build/menu':
      return '<p>'. t('Menus are a collection of links (menu items) used to navigate a website. The list(s) below display the currently available menus along with their menu items. Select an operation from the list to manage each menu or menu item.', array('@admin-settings-menus' => url('admin/build/menu/settings'), '@admin-block' => url('admin/build/block'))) .'</p>';
    case 'admin/build/menu/add':
      return '<p>'. t('Enter the name for your new menu. Remember to enable the newly created block in the <a href="@blocks">blocks administration page</a>.', array('@blocks' => url('admin/build/block'))) .'</p>';
    case 'admin/build/menu/item/add':
      return '<p>'. t('Enter the title, path, position and the weight for your new menu item.') .'</p>';
  }
}

/**
 * Implementation of hook_perm().
 */
function menu_perm() {
  return array('administer menu');
}

/**
 * Implementation of hook_menu().
 */
function menu_menu() {
  $items['admin/build/menu'] = array(
    'title' => 'Menus',
    'description' => "Control your site's navigation menu, primary links and secondary links. as well as rename and reorganize menu items.",
    'page callback' => 'menu_overview_page',
    'access callback' => 'user_access',
    'access arguments' => array('administer menu'),
    'file' => 'menu.admin.inc',
  );

  $items['admin/build/menu/list'] = array(
    'title' => 'List menus',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'file' => 'menu.admin.inc',
  );
  $items['admin/build/menu/add'] = array(
    'title' => 'Add menu',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('menu_edit_menu', 'add'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'menu.admin.inc',
  );
  $items['admin/build/menu/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('menu_configure'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
    'file' => 'menu.admin.inc',
  );
  $items['admin/build/menu-customize/%menu'] = array(
    'title' => 'Customize menu',
    'page callback' => 'menu_overview',
    'page arguments' => array(3),
    'title callback' => 'menu_overview_title',
    'title arguments' => array(3),
    'access arguments' => array('administer menu'),
    'type' => MENU_CALLBACK,
    'file' => 'menu.admin.inc',
  );
  $items['admin/build/menu-customize/%menu/list'] = array(
    'title' => 'List items',
    'weight' => -10,
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'menu.admin.inc',
  );
  $items['admin/build/menu-customize/%menu/add'] = array(
    'title' => 'Add item',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('menu_edit_item', 'add', NULL, 3),
    'type' => MENU_LOCAL_TASK,
    'file' => 'menu.admin.inc',
  );
  $items['admin/build/menu-customize/%menu/edit'] = array(
    'title' => 'Edit menu',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('menu_edit_menu', 'edit', 3),
    'type' => MENU_LOCAL_TASK,
    'file' => 'menu.admin.inc',
  );
  $items['admin/build/menu-customize/%menu/delete'] = array(
    'title' => 'Delete menu',
    'page callback' => 'menu_delete_menu_page',
    'page arguments' => array(3),
    'type' => MENU_CALLBACK,
    'file' => 'menu.admin.inc',
  );
  $items['admin/build/menu/item/%menu_link/disable'] = array(
    'title' => 'Disable menu item',
    'page callback' => 'menu_flip_item',
    'page arguments' => array(TRUE, 4),
    'type' => MENU_CALLBACK,
    'file' => 'menu.admin.inc',
  );
  $items['admin/build/menu/item/%menu_link/enable'] = array(
    'title' => 'Enable menu item',
    'page callback' => 'menu_flip_item',
    'page arguments' => array(FALSE, 4),
    'type' => MENU_CALLBACK,
    'file' => 'menu.admin.inc',
  );
  $items['admin/build/menu/item/%menu_link/edit'] = array(
    'title' => 'Edit menu item',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('menu_edit_item', 'edit', 4, NULL),
    'type' => MENU_CALLBACK,
    'file' => 'menu.admin.inc',
  );
  $items['admin/build/menu/item/%menu_link/reset'] = array(
    'title' => 'Reset menu item',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('menu_reset_item_confirm', 4),
    'type' => MENU_CALLBACK,
    'file' => 'menu.admin.inc',
  );
  $items['admin/build/menu/item/%menu_link/delete'] = array(
    'title' => 'Delete menu item',
    'page callback' => 'menu_item_delete_page',
    'page arguments' => array(4),
    'type' => MENU_CALLBACK,
    'file' => 'menu.admin.inc',
  );

  return $items;
}

/**
 * Implementation of hook_enable()
 *
 *  Add a link for each custom menu.
 */
function menu_enable() {
  menu_rebuild();
  $result = db_query("SELECT * FROM {menu_custom}");
  $link = db_fetch_array(db_query("SELECT mlid AS plid, menu_name from {menu_links} WHERE link_path = 'admin/build/menu' AND module = 'system'"));
  $link['router_path'] = 'admin/build/menu-customize/%';
  $link['module'] = 'menu';
  $result = db_query("SELECT * FROM {menu_custom}");
  while ($menu = db_fetch_array($result)) {
    $link['mlid'] = 0;
    $link['link_title'] = $menu['title'];
    $link['link_path'] = 'admin/build/menu-customize/'. $menu['menu_name'];
    if (!db_result(db_query("SELECT mlid FROM {menu_links} WHERE link_path = '%s' AND plid = %d", $link['link_path'], $link['plid']))) {
      menu_link_save($link);
    }
  }
  menu_cache_clear_all();
}

/**
 * Title callback for the menu overview page and links.
 */
function menu_overview_title($menu) {
  return t('!menu_title (overview)', array('!menu_title' => $menu['title']));
}

/**
 * Load the data for a single custom menu.
 */
function menu_load($menu_name) {
  return db_fetch_array(db_query("SELECT * FROM {menu_custom} WHERE menu_name = '%s'", $menu_name));
}

/**
 * Return a list of menu items that are valid possible parents for the given menu item.
 *
 * @param $menus
 *   An array of menu names and titles, such as from menu_get_menus().
 * @param $item
 *   The menu item for which to generate a list of parents.
 *   If $item['mlid'] == 0 then the complete tree is returned.
 * @return
 *   An array of menu link titles keyed on the a string containing the menu name
 *   and mlid. The list excludes the given item and its children.
 */
function menu_parent_options($menus, $item) {

  // If the item has children, there is an added limit to the depth of valid parents.
  if (isset($item['parent_depth_limit'])) {
    $limit = $item['parent_depth_limit'];
  }
  else {
    $limit = _menu_parent_depth_limit($item);
  }

  foreach ($menus as $menu_name => $title) {
    $tree = menu_tree_all_data($menu_name, NULL);
    $options[$menu_name .':0'] = '<'. $title .'>';
    _menu_parents_recurse($tree, $menu_name, '--', $options, $item['mlid'], $limit);
  }
  return $options;
}

/**
 * Recursive helper function for menu_parent_options().
 */
function _menu_parents_recurse($tree, $menu_name, $indent, &$options, $exclude, $depth_limit) {
  foreach ($tree as $data) {
    if ($data['link']['depth'] > $depth_limit) {
      // Don't iterate through any links on this level.
      break;
    }
    if ($data['link']['mlid'] != $exclude && $data['link']['hidden'] >= 0) {
      $title = $indent .' '. truncate_utf8($data['link']['title'], 30, TRUE, FALSE);
      if ($data['link']['hidden']) {
        $title .= ' ('. t('disabled') .')';
      }
      $options[$menu_name .':'. $data['link']['mlid']] = $title;
      if ($data['below']) {
        _menu_parents_recurse($data['below'], $menu_name, $indent .'--', $options, $exclude, $depth_limit);
      }
    }
  }
}

/**
 * Reset a system-defined menu item.
 */
function menu_reset_item($item) {
  $router = menu_router_build();
  $new_item = _menu_link_build($router[$item['router_path']]);
  foreach (array('mlid', 'has_children') as $key) {
    $new_item[$key] = $item[$key];
  }
  menu_link_save($new_item);
  return $new_item;
}

/**
 * Implementation of hook_block().
 */
function menu_block($op = 'list', $delta = 0) {
  $menus = menu_get_menus();
  // The Navigation menu is handled by the user module.
  unset($menus['navigation']);
  if ($op == 'list') {
    $blocks = array();
    foreach ($menus as $name => $title) {
      // Default "Navigation" block is handled by user.module.
      $blocks[$name]['info'] = check_plain($title);
      // Menu blocks can't be cached because each menu item can have
      // a custom access callback. menu.inc manages its own caching.
      $blocks[$name]['cache'] = BLOCK_NO_CACHE;
    }
    return $blocks;
  }
  else if ($op == 'view') {
    $data['subject'] = check_plain($menus[$delta]);
    $data['content'] = menu_tree($delta);
    return $data;
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function menu_nodeapi(&$node, $op) {
  switch ($op) {
    case 'insert':
    case 'update':
      if (isset($node->menu)) {
        $item = $node->menu;
        if (!empty($item['delete'])) {
          menu_link_delete($item['mlid']);
        }
        elseif (trim($item['link_title'])) {
          $item['link_title'] = trim($item['link_title']);
          $item['link_path'] = "node/$node->nid";
          if (!$item['customized']) {
            $item['options']['attributes']['title'] = trim($node->title);
          }
          if (!menu_link_save($item)) {
            drupal_set_message(t('There was an error saving the menu link.'), 'error');
          }
        }
      }
      break;
    case 'delete':
      // Delete all menu module links that point to this node.
      $result = db_query("SELECT mlid FROM {menu_links} WHERE link_path = 'node/%d' AND module = 'menu'", $node->nid);
      while ($m = db_fetch_array($result)) {
        menu_link_delete($m['mlid']);
      }
      break;
    case 'prepare':
      if (empty($node->menu)) {
        // Prepare the node for the edit form so that $node->menu always exists.
        $menu_name = variable_get('menu_default_node_menu', 'navigation');
        $item = array();
        if (isset($node->nid)) {
          // Give priority to the default menu
          $mlid = db_result(db_query_range("SELECT mlid FROM {menu_links} WHERE link_path = 'node/%d' AND menu_name = '%s' AND module = 'menu' ORDER BY mlid ASC", $node->nid, $menu_name, 0, 1));
          // Check all menus if a link does not exist in the default menu.
          if (!$mlid) {
            $mlid = db_result(db_query_range("SELECT mlid FROM {menu_links} WHERE link_path = 'node/%d' AND module = 'menu' ORDER BY mlid ASC", $node->nid, 0, 1));
          }
          if ($mlid) {
            $item = menu_link_load($mlid);
          }
        }
        // Set default values.
        $node->menu = $item + array('link_title' => '', 'mlid' => 0, 'plid' => 0, 'menu_name' => $menu_name, 'weight' => 0, 'options' => array(), 'module' => 'menu', 'expanded' => 0, 'hidden' => 0, 'has_children' => 0, 'customized' => 0);
      }
      // Find the depth limit for the parent select.
      if (!isset($node->menu['parent_depth_limit'])) {
        $node->menu['parent_depth_limit'] = _menu_parent_depth_limit($node->menu);
      }
      break;
  }
}

/**
 * Find the depth limit for items in the parent select.
 */
function _menu_parent_depth_limit($item) {
  return MENU_MAX_DEPTH - 1 - (($item['mlid'] && $item['has_children']) ? menu_link_children_relative_depth($item) : 0);
}

/**
 * Implementation of hook_form_alter(). Adds menu item fields to the node form.
 */
function menu_form_alter(&$form, $form_state, $form_id) {
  if (isset($form['#node']) && $form['#node']->type .'_node_form' == $form_id) {
    // Note - doing this to make sure the delete checkbox stays in the form.
    $form['#cache'] = TRUE;

    $form['menu'] = array(
      '#type' => 'fieldset',
      '#title' => t('Menu settings'),
      '#access' => user_access('administer menu'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#tree' => TRUE,
      '#weight' => -2,
      '#attributes' => array('class' => 'menu-item-form'),
    );
    $item = $form['#node']->menu;

    if ($item['mlid']) {
      // There is an existing link.
      $form['menu']['delete'] = array(
        '#type' => 'checkbox',
        '#title' => t('Delete this menu item.'),
      );
    }
    if (!$item['link_title']) {
      $form['menu']['#collapsed'] = TRUE;
    }

    foreach (array('mlid', 'module', 'hidden', 'has_children', 'customized', 'options', 'expanded', 'hidden', 'parent_depth_limit') as $key) {
      $form['menu'][$key] = array('#type' => 'value', '#value' => $item[$key]);
    }

    $form['menu']['link_title'] = array('#type' => 'textfield',
      '#title' => t('Menu link title'),
      '#default_value' => $item['link_title'],
      '#description' => t('The link text corresponding to this item that should appear in the menu. Leave blank if you do not wish to add this post to the menu.'),
      '#required' => FALSE,
    );
    // Generate a list of possible parents (not including this item or descendants).
    $options = menu_parent_options(menu_get_menus(), $item);
    $default = $item['menu_name'] .':'. $item['plid'];
    if (!isset($options[$default])) {
      $default = 'navigation:0';
    }
    $form['menu']['parent'] = array(
      '#type' => 'select',
      '#title' => t('Parent item'),
      '#default_value' => $default,
      '#options' => $options,
      '#description' => t('The maximum depth for an item and all its children is fixed at !maxdepth.  Some menu items may not be available as parents if selecting them would exceed this limit.', array('!maxdepth' => MENU_MAX_DEPTH)),
      '#attributes' => array('class' => 'menu-title-select'),
    );
    $form['#submit'][] = 'menu_node_form_submit';

    $form['menu']['weight'] = array(
      '#type' => 'weight',
      '#title' => t('Weight'),
      '#default_value' => $item['weight'],
      '#description' => t('Optional. In the menu, the heavier items will sink and the lighter items will be positioned nearer the top.'),
    );
  }
}

/**
 * Decompose the selected menu parent option into the menu_name and plid.
 */
function menu_node_form_submit($form, &$form_state) {
  list($form_state['values']['menu']['menu_name'], $form_state['values']['menu']['plid']) = explode(':', $form_state['values']['menu']['parent']);
}

/**
 * Return an associative array of the custom menus names.
 *
 * @param $all
 *   If FALSE return only user-added menus, or if TRUE also include
 *   the menus defined by the system.
 * @return
 *   An array with the machine-readable names as the keys, and human-readable
 *   titles as the values.
 */
function menu_get_menus($all = TRUE) {
  $system_menus = menu_list_system_menus();
  $sql = 'SELECT * FROM {menu_custom}';
  if (!$all) {
    $sql .= ' WHERE menu_name NOT IN ('. implode(',', array_fill(0, count($system_menus), "'%s'")) .')';
  }
  $sql .= ' ORDER BY title';
  $result = db_query($sql, $system_menus);
  $rows = array();
  while ($r = db_fetch_array($result)) {
    $rows[$r['menu_name']] = $r['title'];
  }
  return $rows;
}

/**
 * Validates the path of a menu link being created or edited.
 *
 * @return
 *   TRUE if it is a valid path AND the current user has access permission,
 *   FALSE otherwise.
 */
function menu_valid_path($form_item) {
  $item = array();
  $path = $form_item['link_path'];
  if ($path == '<front>' || menu_path_is_external($path)) {
    $item = array('access' => TRUE);
  }
  elseif (preg_match('/\/\%/', $path)) {
    // Path is dynamic (ie 'user/%'), so check directly against menu_router table.
    if ($item = db_fetch_array(db_query("SELECT * FROM {menu_router} where path = '%s' ", $path))) {
      $item['link_path']  = $form_item['link_path'];
      $item['link_title'] = $form_item['link_title'];
      $item['external']   = FALSE;
      $item['options'] = '';
      _menu_link_translate($item);
    }
  }
  else {
    $item = menu_get_item($path);
  }
  return $item && $item['access'];
}
