<?php
// $Id$

function forum_node($field) {
  $info["name"] = t("forum topic");
  $info["description"] = t("A forum is a threaded discussion, enabling users to communicate about a particular topic.");

  return $info[$field];
}

function forum_access($op, $node) {
  if ($op == "view") {
    return $node->status;
  }
  if ($op == "create") {
    return user_access("create forum topics");
  }
}

function forum_perm() {
  return array("create forum topics");
}

function forum_settings() {

  if (module_exist("taxonomy")) {
    $vocs[0] = "<". t("none") .">";
    foreach (taxonomy_get_vocabularies("forum") as $vid => $voc) {
      $vocs[$vid] = $voc->name;
    }

    if ($voc) {
      $output .= form_textarea(t("Explanation or submission guidelines"), "forum_help", variable_get("forum_help", ""), 70, 5, t("This text will be displayed at the top of the forum submission form.  Useful for helping or instructing your users."));
      $output .= form_select(t("Forum vocabulary"), "forum_nav_vocabulary", variable_get("forum_nav_vocabulary", ""), $vocs, t("The taxonomy vocabulary that will be used as the navigation tree."));
      $output .= _taxonomy_term_select(t("Containers"), "forum_containers", variable_get("forum_containers", array()), variable_get("forum_nav_vocabulary", ""), t("You can choose forums which will not have topics, but will be just containers for other forums."), 1, t("<none>"));
      $output .= form_textfield(t("Forum icon path"), "forum_icon_path", variable_get("forum_icon_path", ""), 30, 255, t("The path to the forum icons.  Leave blank to disable icons.  Don't add a trailing slash.  Default icons are available in the 'misc' directory."));
      $number = array(5 => 5, 10 => 10, 15 => 15, 20 => 20, 25 => 25, 30 => 30, 35 => 35, 40 => 40, 50 => 50, 60 => 60, 80 => 80, 100 => 100, 10000 => 10000);
      $output .= form_select(t("Hot topic threshold"), "forum_hot_topic", variable_get("forum_hot_topic", 15), $number, t("The number of posts a topic must have to be considered <b>hot</b>."));
      $number = array(10 => 10, 25 => 25, 50 => 50, 75 => 75, 100 => 100);
      $output .= form_select(t("Topics per page"), "forum_per_page", variable_get("forum_per_page", 25), $number, t("The default number of topics displayed per page; links to browse older messages are automatically being displayed."));
      $forder = array(1 => t("Date - newest first"), 2 => t("Date - oldest first"), 3 => t("Posts - most active first"), 4=> t("Posts - least active first"));
      $output .= form_radios(t("Default order"), "forum_order", variable_get("forum_order", 1), $forder, t("The default display order for topics."));
      $output .= form_textfield(t("Number of topics in block"), "forum_block_num", variable_get("forum_block_num", "5"), 5, 5, t("The number of topics in the <b>Forum topics</b>-block.  To enable the block, click ". l("here", "admin/block") ."."));
    }
  }

  return $output;
}

function forum_taxonomy($op, $type, $object) {
  if ($type == "vocabulary" && ($op == "insert" || $op == "update")) {
    if (variable_get("forum_nav_vocabulary", "") == "" && in_array("forum", $object["nodes"])) {
      // since none is already set, silently set this vocabulary as the navigation vocabulary
      variable_set("forum_nav_vocabulary", $object["vid"]);
    }
  }
}

function forum_load($node) {
  $forum = db_fetch_object(db_query("SELECT * FROM {forum} WHERE nid = %d", $node->nid));

  return $forum;
}

function forum_block($op = "list", $delta = 0) {
  if ($op == "list") {
    $blocks[0]["info"] = t("Forum topics");
  }
  else {
    if (user_access("access content")) {
      $content = node_title_list(db_query_range("SELECT n.nid, n.title, GREATEST(n.created, MAX(c.timestamp)) AS sort FROM {node} n LEFT JOIN {comments} c ON n.nid = c.nid WHERE n.type = 'forum' AND n.status = 1 GROUP BY n.nid, n.title, n.created ORDER BY sort DESC", 0, variable_get("forum_block_num", "5")), t("Active forum topics:"));

      $content .= node_title_list(db_query_range("SELECT nid, title FROM {node} WHERE type = 'forum' ORDER BY nid DESC", 0, variable_get("forum_block_num", "5")), t("New forum topics:"));

      if ($content) {
        $content .= "<div class=\"more-link\">". l(t("more"), "forum", array("title" => t("Read the latest forum topics."))) ."</div>";
      }

      $blocks["subject"] = t("Forum topics");
      $blocks["content"] = $content;
    }
  }

  return $blocks;
}

function forum_link($type, $node = 0, $main = 0) {
  global $user;

  $links = array();

  if ($type == "page" && user_access("access content")) {
    $links[] = l(t("forums"), "forum");
  }

  if ($type == "system" && user_access("create forum topics")) {
      menu("node/add/forum",t("forum topic"), "page");
  }

  if (!$main && $type == "node" && $node->type == "forum") {
    // get previous and next topic

    $result = db_query("SELECT n.nid, n.title, GREATEST(n.created, MAX(c.timestamp)) AS date_sort, COUNT(c.nid) AS num_comments FROM {node} n INNER JOIN {forum} f ON n.nid = f.nid INNER JOIN {comments} c ON n.nid = c.nid WHERE n.nid = f.nid AND f.tid = %d AND n.status = 1 GROUP BY n.nid, n.title, n.created ORDER BY ". _forum_get_topic_order(isset($user->sortby) ? $user->sortby : variable_get("forum_order", 1)), $node->tid);

    while ($topic = db_fetch_object($result)) {
      if ($stop == 1) {
        $next->nid = $topic->nid;
        $next->title = $topic->title;
        break;
      }
      if ($topic->nid == $node->nid) {
        $stop = 1;
      }
      else {
        $prev->nid = $topic->nid;
        $prev->title = $topic->title;
      }
    }

    if ($prev) {
      $links[] = l(t("previous forum topic"), "node/view/$prev->nid", array("title" => $prev->title));
    }

    if ($next) {
      $links[] = l(t("next forum topic"), "node/view/$next->nid", array("title" => $next->title));
    }
  }

  return $links;
}

function forum_content($node) {
  $node->teaser = check_output($node->teaser);
  $node->body = check_output($node->body);
  return $node;
}

function forum_view($node, $main = 0) {

  if ($main == 0) {
    $term_data = array_shift(taxonomy_node_get_terms($node->nid));
    if (!$term_data) {
      // we are previewing
      $term_data = taxonomy_get_term($node->taxonomy[0]);
    }
    $voc = taxonomy_get_vocabulary($term_data->vid);
    // Breadcrumb navigation
    $breadcrumb[] = l(t("Home"), NULL);
    $breadcrumb[] = l(t("Forums"), "forum");
    $breadcrumb[] = l($term_data->name, "forum/$term_data->tid");
    // print the breadcrumb
    print theme("breadcrumb", $breadcrumb);
  }
  // prepair the node content
  $node = forum_content($node);
  // print the node
  print theme("node", $node, $main);
}

function forum_validate(&$node) {
  // Make sure all fields are set properly:
  $node->icon = $node->icon ? $node->icon : "";
  $node->shadow = $node->shadow ? $node->shadow : 0;
  $node->tid = $node->tid ? $node->tid : 0;
  // We use the validate hook to remember the old taxonomy terms:
  if ($node->tid) {
    $node->taxonomy = array_keys(taxonomy_node_get_terms($node->nid));
    if (!in_array($node->tid[0], $node->taxonomy)) {
      $node->taxonomy[] = $node->tid[0];
    }
  }
}

function forum_form(&$node, &$help, &$error) {
  if ($node->tid) {
    // editing
    $tid = $node->tid;
  }
  else {
    // new topic
    $tid = arg(3);
  }

  // outputs the compose guidelines
  $help = variable_get("forum_help", "");

  $output .= _taxonomy_term_select(t("Forum"), "tid", $tid, variable_get("forum_nav_vocabulary", ""), "", 0, "", variable_get("forum_containers", array()));

  if ($node->nid) {
    // if editing, give option to leave shadows
    $output .= form_checkbox(t("Leave shadow copy"), "shadow", 1, $node->shadow, t("If you move this topic, you can leave a link in the old forum to the new forum."));
  }

  $output .= form_textarea(t("Body"), "body", $node->body, 60, 10);

  return $output;
}

function forum_insert($node) {
  db_query("INSERT INTO {forum} (nid, shadow, tid) VALUES (%d, %d, %d)", $node->nid, $node->shadow, $node->tid[0]);
}

function forum_update($node) {
  db_query("UPDATE {forum} SET shadow = %d, tid = %d WHERE nid = %d", $node->shadow, $node->tid[0], $node->nid);
}

function forum_delete(&$node) {
  db_query("DELETE FROM {forum} WHERE nid = %d", $node->nid);
}

function _forum_num_comments($nid) {
  $value = db_fetch_object(db_query("SELECT COUNT(cid) AS count FROM {comments} WHERE nid = %d AND status = 0", $nid));
  return ($value) ? $value->count : 0;
}

function _forum_last_comment($nid) {
  $value = db_fetch_object(db_query_range("SELECT timestamp FROM {comments} WHERE nid = %d AND status = 0 ORDER BY timestamp DESC", $nid, 0, 1));
  return ($value) ? format_date($value->timestamp, "small") : "&nbsp;";
}

function _forum_last_reply($nid) {
  $value = db_fetch_object(db_query_range("SELECT c.timestamp, u.name, u.uid FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid WHERE c.nid = %d AND c.status = 0 ORDER BY c.timestamp DESC", $nid, 0, 1));
  return $value;
}

function _forum_format($topic) {
  if ($topic) {
    return t("%date<br />by %author", array("%date" => format_date($topic->timestamp, "small"), "%author" => format_name($topic)));
  }
  else {
    return message_na();
  }
}

function forum_get_forums($tid = 0) {
  global $user;

  if (!$tid) {
    $tid = 0;
  }

  $cache = cache_get("forum:$tid");

  if (empty($cache)) {
    $forums = array();
    $_forums = taxonomy_get_tree(variable_get("forum_nav_vocabulary", ""), $tid);
    $n = 0;
    foreach ($_forums as $forum) {
      if (in_array($forum->tid, variable_get("forum_containers", array()))) {
        $forum->container = 1;
      }
      $forum->num_topics = _forum_num_topics($forum->tid);
      $forum->num_posts = _forum_num_replies($forum->tid) + $forum->num_topics;
      $forum->last_post = _forum_last_post($forum->tid);
      $forums[$forum->tid] = $forum;
      $n++;
    }

    cache_set("forum:$tid", serialize($forums), 1);
  }
  else {
    $forums = unserialize($cache->data);
  }

  if ($user->uid && $forums) {
    foreach (_forum_topics_read($user->uid) as $tid => $old) {
      if ($forums[$tid]) {
        $forums[$tid]->old_topics = $old;
      }
    }
  }
  return $forums;
}

function forum_get_parents($tid) {
  if ($tid) {
    $parents[] = taxonomy_get_term($tid);
  }
  $n = 0;
  while ($parent = taxonomy_get_parents($parents[$n]->tid)) {
    $parents = array_merge($parents, $parent);
    $n++;
  }

  return $parents;
}

function _forum_num_topics($term) {
  $value = db_fetch_object(db_query("SELECT COUNT(n.nid) AS count FROM {node} n INNER JOIN {forum} f ON n.nid = f.nid WHERE f.tid = %d AND n.nid = f.nid AND n.status = 1 AND n.type = 'forum'", $term));
  return ($value) ? $value->count : 0;
}

function _forum_num_replies($term) {
  $value = db_fetch_object(db_query("SELECT COUNT(*) AS count FROM {comments} c INNER JOIN {node} n ON n.nid = c.nid INNER JOIN {forum} f ON n.nid = f.nid WHERE f.tid = %d AND n.nid = f.nid AND n.nid = c.nid AND n.status = 1 AND c.status = 0 AND n.type = 'forum'", $term));
  return ($value) ? $value->count : 0;
}

function _forum_topics_read($uid) {
  $result = db_query("SELECT tid, count(*) AS c FROM {history} h INNER JOIN {node} n ON n.nid = h.nid INNER JOIN {forum} f ON n.nid = f.nid WHERE f.nid = n.nid AND n.nid = h.nid AND n.type = 'forum' AND n.status = 1 AND h.uid = %d GROUP BY tid", $uid);

  while ($obj = db_fetch_object($result)) {
    $topics_read[$obj->tid] = $obj->c;
  }

  return $topics_read ? $topics_read : array();
}

function _forum_last_post($term) {
  $topic = db_fetch_object(db_query_range("SELECT n.nid, n.created AS timestamp, u.name AS name, u.uid AS uid FROM {forum} f INNER JOIN {node} n ON n.nid = f.nid INNER JOIN {users} u ON n.uid = u.uid WHERE f.tid = %d AND n.nid = f.nid AND n.type = 'forum' AND n.status = 1 ORDER BY timestamp DESC", $term, 0, 1));

  $reply = db_fetch_object(db_query_range("SELECT n.nid, c.timestamp, u.name AS name, u.uid AS uid FROM {forum} f INNER JOIN {node} n ON n.nid = f.nid INNER JOIN {comments} c ON n.nid = c.nid INNER JOIN {users} u ON c.uid = u.uid WHERE f.tid = %d AND n.nid = f.nid AND n.type = 'forum' AND n.status = 1 AND c.status = 0 ORDER BY c.timestamp DESC", $term, 0, 1));

  $value = ($topic->timestamp > $reply->timestamp) ? $topic : $reply;

  return $value;
}

function forum_get_topics($tid, $sortby, $forum_per_page) {
  global $user, $forum_topic_list_header;

  $forum_topic_list_header = array(
      array("data" => "&nbsp;"),
      array("data" => t("Topic"), "field" => "n.title"),
      array("data" => t("Replies"), "field" => "num_comments"),
      array("data" => t("Created"), "field" => "n.created"),
      array("data" => t("Last reply"), "field" => "date_sort", "sort" => "desc"),
  );

  $sql_sortby = _forum_get_topic_order($sortby);
  for ($i = 0; $i < count($forum_topic_list_header); $i++) {
    if ($forum_topic_list_header[$i]["field"] == $sql_sortby) {
      $forum_topic_list_header[$i]["order"] = $sql_sortby;
    }
  }

  $term = taxonomy_get_term($tid);
  $voc = taxonomy_get_vocabulary($term->vid);
  $check_tid = $tid ? "'". check_query($tid). "'" : "NULL";

  // show topics with the correct tid, or in the forum but with shadow = 1
  // @TODO: this is not ANSI SQL! ("user error: 'n.created' isn't in GROUP BY")
  // @TODO: timestamp is a sql reserved word. are there more?
  $sql = "SELECT n.nid, n.title, u.name AS name, u.uid AS uid, n.created AS timestamp, GREATEST(n.created, MAX(c.timestamp)) AS date_sort, COUNT(c.nid) AS num_comments, n.comment AS comment_mode, f.tid FROM {node} n INNER JOIN {term_node} r ON n.nid = r.nid INNER JOIN {users} u ON n.uid = u.uid LEFT JOIN {comments} c ON n.nid = c.nid INNER JOIN {forum} f ON n.nid = f.nid WHERE n.nid = r.nid AND ((r.tid = $check_tid AND f.shadow = 1) OR f.tid = $check_tid) AND n.status = 1 AND n.type = 'forum' GROUP BY n.nid, n.title, u.name, u.uid, n.created, n.comment, f.tid";
  $sql .= tablesort_sql($forum_topic_list_header);

  $sql_count = "SELECT COUNT(DISTINCT(n.nid)) FROM {node} n INNER JOIN {forum} f ON n.nid = f.nid INNER JOIN {term_node} r ON n.nid = r.nid WHERE n.nid = r.nid AND ( (r.tid = $check_tid AND f.shadow = 1) OR f.tid = $check_tid) AND n.status = 1 AND n.type = 'forum'";

  $result = pager_query($sql, $forum_per_page, 0, $sql_count);
  $topic_num = db_num_rows($result);

  $n = 0;
  while ($topic = db_fetch_object($result)) {
    if ($user->uid) {
      $history = _forum_user_last_visit($topic->nid);
      // folder is new if topic is new or there are new comments since last visit
      if ($topic->shadow > 0) {
        $topic->new = 0;
      }
      else {
        if (!$history && $user->uid) {
          $topic->new_replies = 0;
          $topic->new = 1;
        }
        else {
          $comments = db_result(db_query("SELECT COUNT(c.nid) FROM {node} n INNER JOIN {comments} c ON n.nid = c.nid WHERE n.nid = '$topic->nid' AND n.status = 1 AND c.status = 0 AND timestamp > '$history' GROUP BY n.nid"));

          $topic->new_replies = $comments ? $comments : 0;
          if ($topic->new_replies) {
            $topic->new = 1;
          }
          else {
            $topic->new = 0;
          }
        }
      }
     }
     else {
      // you're not logged in eh?
      $topic->new_replies = 0;
      $topic->new = 0;
     }

    $topic->last_reply = _forum_last_reply($topic->nid);
    $topics[] = $topic;
  }

  return $topics;
}

function _forum_new($tid) {
  global $user;
  $result = db_query("SELECT n.nid FROM {node} n, {history} h, {forum} f WHERE n.type = 'forum' AND n.status = 1 AND h.nid = n.nid AND f.nid = h.nid AND f.tid = %d AND h.uid = %d", $tid, $user->uid);
  while ($r = db_fetch_object($result)) {
    $read[] = $r->nid;
  }

  $nid = db_result(db_query_range("SELECT n.nid FROM {node} n INNER JOIN {forum} f ON n.nid = f.nid WHERE n.type = 'forum' AND f.nid = n.nid AND n.status = 1 AND f.tid = %d ". ($read ? "AND NOT (n.nid IN (". implode(",", $read) .")) " : "") ."ORDER BY created", $tid, 0, 1));

  return $nid ? $nid : 0;
}

function _forum_message_taxonomy() {
  return t("Forums are threaded discussions based on the taxonomy system.  For the forums to work, the taxonomy module has to be installed and enabled.  When activated, a taxonomy vocabulary (eg. \"forums\") needs to be %created and bound to the node type \"forum topic\".  The vocabulary's %terms define the forums.  If you define a term as a \"Container\", the term is not a forum itself, but rather holds forums.  This lets you group your forums.", array('%created' => l(t('created'), 'admin/taxonomy/add/vocabulary'), '%terms' => l(t('terms'), 'admin/taxonomy', array('title' => t('add terms')))));
}

function forum_page() {
  global $sortby, $forum_per_page, $from, $user;

  $op = $_POST["op"];

  if (user_access("access content")) {
    if (module_exist("taxonomy")) {
      $tid = arg(1);

      if (arg(2) == "new") {
        if ($nid = _forum_new($tid)) {
          drupal_goto(url("node/view/$nid"));
        }
      }

      if (empty($sortby)) {
        $sortby = isset($user->sortby) ? $user->sortby : variable_get("forum_order", 1);
      }

      if (empty($forum_per_page)) {
        $forum_per_page = isset($user->forum_per_page) ? $user->forum_per_page : variable_get("forum_per_page", 25);
      }

      $offset = ($from / $forum_per_page) + 1;

      $forums = forum_get_forums($tid);
      $parents = forum_get_parents($tid);
      if ($tid && !in_array($tid, variable_get("forum_containers", array()))) {
        $topics = forum_get_topics($tid, $sortby, $forum_per_page);
      }

      print theme("forum_display", $forums, $topics, $parents, $tid, $sortby, $forum_per_page, $offset);
    }
    else {
      $message = t("Warning");
      print theme("header", $message);
      print theme("box", $message, _forum_message_taxonomy());
      print theme("footer");
    }
  }
  else {
    $message = t("Access denied");
    print theme("header", $message);
    print theme("box", $message, message_access());
    print theme("footer");
  }
}

/**
  @addtogroup theme_system

  Forum module specific theme functions.
  @{
**/

/**
 Controls the output of the forum body.

 @param forums
 @param topics
 @param parents
 @param tid
 @param sortby
 @param forum_per_page
 @param offset

 @return string the output for the forum body.
**/
function theme_forum_display($forums, $topics, $parents, $tid, $sortby, $forum_per_page, $offset) {
  // forum list, topics list, topic browser and "add new topic" link

  $title = t("Forums");

  /*
  ** Breadcrumb navigation:
  */
  $breadcrumb[] = l(t("Home"), "");
  $breadcrumb[] = l($title, "forum");

  if ($parents) {
    $parents = array_reverse($parents);
    foreach ($parents as $p) {
      if ($p->tid == $tid) {
        $title = $p->name;
      }
      else {
        $breadcrumb[] = l($p->name, "forum/$p->tid");
      }
    }
  }

  if (count($forums) || count($parents)) {
    $output  = "<div id=\"forum\">";
    $output .= theme("forum_list", $forums, $parents, $tid);

    if ($tid && !in_array($tid, variable_get("forum_containers", array()))) {
      $output .= theme("forum_topic_list", $tid, $topics, $sortby, $forum_per_page, $offset);
    }
    $output .= "</div>";
  }
  else {
    $title = t("No forums defined");
    $output = '';
  }

  print theme("header", $title);
  print theme("breadcrumb", $breadcrumb);
  print theme("box", $title, $output);
  print theme("footer");
}

/**
 Outputs the forum listing.

 @param forums
 @param parents
 @param tid

 @return string the output for the forum listing.
**/
function theme_forum_list($forums, $parents, $tid) {
  global $user;

  if ($forums) {

    $header = array(t("Forum"), t("Topics"), t("Posts"), t("Last post"));

    foreach ($forums as $forum) {
      if ($forum->container) {
        $forum->num_topics = "";
        $forum->num_posts = "";
        $forum->last_post = "";
      }
      else {
        if ($user->uid) {
          $new_topics = $forum->num_topics - $forum->old_topics;
        }

        $links = array();

        if ($forum->last_post) {
          $links[] = l(t("the most recent topic"), "node/view/". $forum->last_post->nid);
        }

        if ($new_topics) {
          $links[] = l(t("the first new topic"), "forum/$forum->tid/new");
        }
      }

      $description  = "<div class=\"forum\" style=\"margin-left: ". ($forum->depth * 30) ."px;\">\n";
      $description .= " <div class=\"name\">". l($forum->name, "forum/$forum->tid") ."</div>\n";

      if ($forum->description) {
        $description .= " <div class=\"description\">$forum->description</div>\n";
      }
      if ($links) {
        $description .= " <div class=\"navigation\">". t("Jump to: %links", array("%links" => implode(", ", $links))) .".</div>\n";
      }
      $description .= "</div>\n";

      $rows[] = array(
        array("data" => $description, "class" => "description"),
        array("data" => $forum->num_topics . ($new_topics ? "<br />(".t("%a new", array("%a" => $new_topics)).")" : ""), "class" => "topics"),
        array("data" => $forum->num_posts, "class" => "posts"),
        array("data" => ($forum->container ? "" : _forum_format($forum->last_post)), "class" => "last-reply")

       );

    }
  }

  return table($header, $rows);
}

/**
 Outputs the topic listing.

 @param tid
 @param topics
 @param sortby
 @param forum_per_page
 @param offset

 @return string the output for the topic list.
**/
function theme_forum_topic_list($tid, $topics, $sortby, $forum_per_page, $offset) {
  global $id, $status, $user, $pager_total, $forum_topic_list_header;

  if ($topics) {

    foreach ($topics as $topic) {
      // folder is new if topic is new or there are new comments since last visit
      if ($topic->tid != $tid) {
        $rows[] = array(
          array("data" => _forum_icon($topic->new, $topic->num_comments, $topic->comment_mode), "class" => "icon"),
          array("data" => $topic->title, "class" => "title"),
          array("data" => l(t("This topic has been moved"), "forum/$topic->tid"), "colspan" => "3")
        );
      }
      else {
        $rows[] = array(
          array("data" => _forum_icon($topic->new, $topic->num_comments, $topic->comment_mode), "class" => "icon"),
          array("data" => l($topic->title, "node/view/$topic->nid"), "class" => "topic"),
          array("data" => $topic->num_comments . ($topic->new_replies ? "<br />(".t("%a new", array("%a" => $topic->new_replies)).")" : ""), "class" => "replies"),
          array("data" => _forum_format($topic), "class" => "created"),
          array("data" => _forum_format($topic->last_reply), "class" => "last-reply")
        );
      }
    }

    if ($pager = pager_display(NULL, $forum_per_page, 0, "default", tablesort_pager())) {
      $rows[] = array(array("data" => $pager, "colspan" => "5", "class" => "pager"));
    }
  }


  if (user_access("create forum topics")) {
    $output = l(t("create new forum topic"), "node/add/forum/$tid") ."<br /><br />";
  }

  $output .= table($forum_topic_list_header, $rows);

  return $output;
}

/**  @} End of addtogroup theme_system **/

function _forum_icon($new_posts, $num_posts = 0, $comment_mode = 0) {

  $base_path = variable_get("forum_icon_path", "");
  if ($base_path) {
    if ($num_posts > variable_get("forum_hot_topic", 15)) {
      $icon = $new_posts ? "hot-new" : "hot";
    }
    else {
      $icon = $new_posts ? "new" : "default";
    }

    if ($comment_mode == 1) {
      $icon = "closed";
    }

    // default
    $file = $base_path ."/forum-$icon.gif";

    return "<img src=\"$file\" alt=\"\" title=\"\" />";
  }
  else {
    return "&nbsp;";
  }
}

function _forum_user_last_visit($nid) {
  global $user;
  static $history;
  if (!$history) {
    $result = db_query("SELECT nid, timestamp FROM {history} WHERE uid = %d", $user->uid);
    while ($t = db_fetch_object($result)) {
      $history[$t->nid] = $t->timestamp;
    }
  }
  return $history[$nid] ? $history[$nid] : 0;
}

function _forum_get_topic_order($sortby) {
  switch ($sortby) {
    case 1:
      return "date_sort DESC";
      break;
    case 2:
      return "date_sort ASC";
      break;
    case 3:
      return "num_comments DESC";
      break;
    case 4:
      return "num_comments ASC";
      break;
  }
}

function forum_help($section = "admin/help#forum") {
  $output = "";

  switch ($section) {
    case 'admin/help#forum':
      $output .= "<h3>Creating a forum</h3>";
      $output .= "<p>The forum module uses taxonomy to organize itself. To create a forum you first have to create a %taxonomy. When doing this, choose a sensible name for it (such as \"fora\") and make sure under \"Types\" that \"forum\" is selected. Once you have done this, %taxo-terms to it. Each term will become a forum. If you fill in the description field, users will be given additonal information about the forum on the main forum page. For example: \"troubleshooting\" - \"Please ask your questions here.\"</p>";
      $output .= "<p>When you are happy with your vocabulary, go to %forums and set <b>Forum vocabulary</b> to the one you have just created. There will now be fora active on the site. For users to access them they must have the \"access content\" %permission and to create a topic they must have the \"create forum topics\" %permission. These permissions can be set in the %permission pages.</p>";
      $output .= "<h4>Icons</h4>";
      $output .= "<p>To disable icons, set the icon path as blank in %forums.</p>";
      $output .= "<p>All files in the icon directory are assumed to be images. You may use images of whatever size you wish, but it is recommended to use 15x15 or 16x16.</p>";
      $output = t($output, array("%taxonomy" => l(t("taxonomy vocabulary"), "admin/taxonomy/add/vocabulary"), "%taxo-terms" => l(t("add some terms"), "admin/taxonomy"), "%forums" => l(t("administer") ." &raquo; ". t("configutation") ." &raquo; ". t("modules") ." &raquo; ". t("forum"), "admin/system/modules/forum"), "%permission" => l(t("permission"), "admin/user/permission")));
      break;
    case 'admin/system/modules#description':
      $output = t("Enable threaded discussions about general topics.");
      break;
    case 'admin/system/modules/forum':
      $output = _forum_message_taxonomy();
      break;
  }

  return $output;
}

?>
