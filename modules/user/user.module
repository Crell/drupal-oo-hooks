<?php
// $Id$

session_set_save_handler("sess_open", "sess_close", "sess_read", "sess_write", "sess_destroy", "sess_gc");
session_start();

/*** Session functions *****************************************************/

function sess_open($save_path, $session_name) {
  return 1;
}

function sess_close() {
  return 1;
}

function sess_read($key) {
  global $user;
  $user = user_load(array("sid" => $key, "status" => 1));

  return $user->sid ? $user->sid : '';
}

function sess_write($key, $value) {
  global $HTTP_SERVER_VARS;

  db_query("UPDATE users SET hostname = '%s', session = '%s', timestamp = '%s' WHERE sid = '$key'", $HTTP_SERVER_VARS["REMOTE_ADDR"], $value, time());

  return '';
}

function sess_destroy($key) {
  global $HTTP_SERVER_VARS;

  db_query("UPDATE users SET hostname = '%s', timestamp = '%s', sid = '' WHERE sid = '$key'", $HTTP_SERVER_VARS["REMOTE_ADDR"], time());
}

function sess_gc($lifetime) {
  return 1;
}

/*** Common functions ******************************************************/

function user_external_load($authname) {
  $arr_uid = db_query("SELECT uid FROM authmap WHERE authname = '$authname'");

  if (db_fetch_object($arr_uid)) {
    $uid = db_result($arr_uid);
    return user_load(array("uid" => $uid));
  }
  else {
    return 0;
  }
}

function user_load($array = array()) {

  /*
  ** Dynamically compose a SQL query:
  */

  $query = "";

  foreach ($array as $key => $value) {
    if ($key == "pass") {
      $query .= "u.$key = '". md5($value) ."' AND ";
     }
    else {
      $query .= "u.$key = '". addslashes($value) ."' AND ";
    }
  }
  $result = db_query("SELECT u.*, r.name AS role FROM users u LEFT JOIN role r ON u.rid = r.rid WHERE $query u.status < 3 LIMIT 1");

  $user = db_fetch_object($result);
  if ($data = unserialize($user->data)) {
    foreach ($data as $key => $value) {
      if (!isset($user->$key)) {
        $user->$key = $value;
      }
    }
  }

  return $user;
}

function user_save($account, $array = array()) {

  /*
  ** Dynamically compose a SQL query:
  */

  if ($account->uid) {
    $data = unserialize(db_result(db_query("SELECT data FROM users WHERE uid = '$account->uid'")));
    foreach ($array as $key => $value) {
      if ($key == "pass") {
        $query .= "$key = '". md5($value) ."', ";
      }
      else if (substr($key, 0, 4) !== "auth") {
        if (in_array($key, user_fields())) {
          $query .= "$key = '". check_query($value) ."', ";
        }
        else {
          $data[$key] = $value;
        }
      }
    }
    $query .= "data = '". check_query(serialize($data)) ."', ";

    db_query("UPDATE users SET $query timestamp = '%s' WHERE uid = '$account->uid'", time());

    $user = user_load(array("uid" => $account->uid));
  }
  else {
    $array["timestamp"] = time();

    foreach ($array as $key => $value) {
      if ($key == "pass") {
        $fields[] = check_query($key);
        $values[] = "'". md5($value) ."'";
      }
      else if (substr($key, 0, 4) !== "auth") {
        if (in_array($key, user_fields())) {
          $fields[] = check_query($key);
          $values[] = "'". check_query($value) ."'";
        }
        else {
          $data[$key] = $value;
        }
      }
    }

    $fields[] = "data";
    $values[] = "'". serialize($data) ."'";

    db_query("INSERT INTO users (". implode(", ", $fields) .") VALUES (". implode(", ", $values) .")");

    $user = user_load(array("name" => $array["name"]));
  }

  foreach ($array as $key => $value) {
    if (substr($key, 0, 4) == "auth") {
      $authmaps[$key] = $value;
    }
  }

  if ($authmaps) {
    $result = user_set_authmaps($user, $authmaps);
  }

  return $user;
}

function user_set($account, $key, $value) {
  $account->data[$key] = $value;
  return $account;
}

function user_get($account, $key) {
  return $account->data[$key];
}

function user_validate_name($name) {

  /*
  ** Verify the syntax of the given name:
  */

  if (!$name) return t("You must enter a Username.");
  if (ereg("^ ", $name)) return t("The Username cannot begin with a space.");
  if (ereg(" \$", $name)) return t("The Username cannot end with a space.");
  if (ereg("  ", $name)) return t("The Username cannot contain multiple spaces in a row.");
  // if (ereg("[^a-zA-Z0-9@-@]", $name)) return t("The Username contains an illegal character.");
  if (ereg('@', $name) && !eregi('@([0-9a-z](-?[0-9a-z])*\.)+[a-z]{2}([zmuvtg]|fo|me)?$', $name)) return t("The Username is not a valid authentication ID.");
  if (!eregi('^[[:print:]]+', $name)) return t("The name contains an illegal character.");
  if (strlen($name) > 56) return t("The Username '$name' is too long: it must be less than 56 characters.");
}

function user_validate_mail($mail) {

  /*
  ** Verify the syntax of the given e-mail address.  Empty e-mail addresses
  ** allowed.
  */

  if ($mail && !eregi("^[_+\.0-9a-z-]+@([0-9a-z][0-9a-z-]+\.)+[a-z]{2,3}$", $mail)) {
    return t("The e-mail address '$mail' is not valid.");
  }
}

function user_validate_authmap($account, $authname, $module) {
  $result = db_query("SELECT COUNT(*) from authmap WHERE uid != '$account->uid' && authname = '$authname'");
  if (db_result($result) > 0) {
    $name = module_invoke($module, "info", "name");
    return t("The %u ID %s is already taken.", array("%u" => ucfirst($name), "%s" => "<i>$authname</i>"));
  }
}

function user_password($min_length = 6) {

  /*
  ** Generate a human-readable password:
  */

  mt_srand((double)microtime() * 1000000);
  $words = explode(",", variable_get("user_password", "foo,bar,guy,neo,tux,moo,sun,asm,dot,god,axe,geek,nerd,fish,hack,star,mice,warp,moon,hero,cola,girl,fish,java,perl,boss,dark,sith,jedi,drop,mojo"));
  while (strlen($password) < $min_length) $password .= trim($words[mt_rand(0, count($words))]);
  return $password;
}

function user_access($string) {

  global $user;
  static $perm;

  /*
  ** To reduce the number of SQL queries, we cache the user's permissions
  ** in a static variable.
  */

  if (!$perm) {
    if ($user->uid) {
      $perm = db_result(db_query("SELECT p.perm FROM role r, permission p WHERE r.rid = p.rid AND name = '$user->role'"), 0);
    }
    else {
      $perm = db_result(db_query("SELECT p.perm FROM role r, permission p WHERE r.rid = p.rid AND name = 'anonymous user'"), 0);
    }
  }

  if ($user->uid == 1) {
    return 1;
  }
  else {
    return strstr($perm, $string);
  }

}

function user_mail($mail, $subject, $message, $header) {
  if (variable_get("smtp_library", "") && file_exists(variable_get("smtp_library", ""))) {
    include_once variable_get("smtp_library", "");
    return user_mail_wrapper($mail, $subject, $message, $header);
  }
  else {
    return mail($mail, $subject, $message, $header);
  }
}

function user_deny($type, $mask) {

  $allow = db_fetch_object(db_query("SELECT * FROM access WHERE status = '1' AND type = '$type' AND LOWER('$mask') LIKE LOWER(mask)"));

  $deny = db_fetch_object(db_query("SELECT * FROM access WHERE status = '0' AND type = '$type' AND LOWER('$mask') LIKE LOWER(mask)"));

  if ($deny && !$allow) {
    return 1;
  }
  else {
    return 0;
  }
}

function user_fields() {
  static $fields;

  if (!$fields) {
    // is this ANSI? perhaps this should go in the database include...
    $result = db_query("SHOW FIELDS FROM users");
    while ($data = db_fetch_object($result)) {
      $fields[] = $data->Field;
    }
  }
  return $fields;
}

/*** Module hooks **********************************************************/

function user_help() {
 ?>
<h3>Introduction</h3>
<p>Drupal offers a powerful and open user system. This system allows users to
  register, login, logout, maintain user profiles, etc. No participant can use
  his own name to post comments until he signs up and submits his e-mail address.
  Those who do not register may participate as anonymous users, but they will
  suffer numerous disadvantages, for example their posts beginning at a lower
  score. </p>
<p>In contrast, those with a user account can use their own name or handle and
  are granted various privileges: the most important are probably the ability
  to moderate new submissions, to rate comments, and to fine-tune the site to
  their personal liking.  Drupal themes make fine tuning quite a pleasure.</p>
<p>Registered users need to authenticate by supplying a username and password.
  Users may authenticate locally or via an external authentication source like
  <a href="http://www.jabber.org/">Jabber</a>, <a href="http://www.delphiforums.com/">Delphi</a>,
  and other <a href="http://www.drupal.org/">Drupal</a> web sites. See <a href="#da">Distributed
  Authentication</a> for more information on this innovative feature. The username
  and password are kept in your database, where the password is hashed so that
  no one can read nor use it. When a username and password needs to be checked
  the system goes down the list of registered users until it finds a matching
  username, and then hashes the password that was supplied and compares it to
  the listed value. If the hashes match, the username and password are correct.
  Once a user authenticated session is started, and until that session is over,
  the user won't have to re-authenticate. To keep track of the individual sessions,
  Drupal relies on <a href="http://www.php.net/manual/en/ref.session.php">PHP's
  session support</a>. A visitor accessing your web site is assigned an unique
  ID, the so-called session ID, which is stored in a cookie. For security's sake,
  the cookie does not contain personal information but acts as a key to retrieve
  the information stored on your server's side. When a visitor accesses your site,
  Drupal will check whether a specific session ID has been sent with the request.
  If this is the case, the prior saved environment is recreated.</p>
<p>Authenticated users can select entirely different appearances for the site,
  utilizing their own preferences for how the pages are structured, how navigation
  lists and other page components are presented and much more. <br />
</p>
<h3>User administration</h3>
<p>Administrators manage user accounts by clicking on the <i>User management</i> link in
  their Admin interface. There, you will find several configuration pages and
  reports which help you manage your users. The following pages are available:</p>

<h4>add new user</h4>
<p>If your site is completely private, and doesn't allow registration for
  any old web user (see <a href="#settings">settings</a> for this feature), then
  you'll need to add new users manually. This web page allows any administrator
  to register a new user.</p>
<h4>access rules<a name="access"></a></h4>
<p>Access rules enable administrators to filter out usernames and e-mail addresses
  which are not allowed in Drupal. An administrator creates a 'mask' against which
  each new registration is checked. Disallowed names and e-mail addresses are denied
  access to the site. Another handy use for this page is to disallow registration
  to your site from an untrusted external authentication server. Just add their
  server address to the username mask section and you've effectively blocked all
  logins from that server.</p>
<p>To do describe access rules you can use the following wild-card characters:</p>
  <ul>
   <li>&nbsp;% : matches any number of characters, including zero characters.</li>
   <li>&nbsp;_ : matches exactly one character.</li>
  </ul>
<p><u>Examples:</u></p>
  <ul>
   <li>E-mail address bans <code>%@hotmail.com</code>, <code>%@altavista.%</code>, <code>%@usa.net</code>, etc.  Used to prevent users from using free e-mail accounts, which might be used to cause trouble.</li>
   <li>Username bans <code>root</code>, <code>webmaster</code>, <code>admin%</code>, etc.  Used to prevent administrator impersonators.</li>
  </ul>
<p>If no access rules are provided, access control is turned off and everybody will be able to access your website.  The 'allow' rules are processed prior to the 'deny' rules and are thus considered to be stronger.</p>
<h4>user accounts</h4>
<p>This page is quite powerful. It allows an administrator to review any user's
  profile. In addition, administrators may block any user, or assign him a <a href="#roles">role</a>,
  using this page.</p>
<h4>user roles<a name="roles"></a></h4>
<p>Roles allow you to fine tune the security and administration of drupal. A role
defines a group of users which have certain privileges. Examples of roles
include: <I>anonymous user</I>, <I>authenticated user</I>, <I>moderator</I>,
<I>administrator</I> and so on. By default, Drupal comes with two commonly used
roles:
<UL>
  <LI>Anonymous user: this role is used for users that don't have a user account
    or that are not authenticated.
  <LI>Registered user: this role is assigned automatically to authenticated users.
    Most users will belong to this user role unless specified otherwise.</LI>
</UL></p>
<p>These common roles will suffice for most sites. However, for a more complex site where you need to give several users different access privileges, you will
  need to add a new role by clicking the "add new role" link. Then define what privileges that role will have by clicking the "permission overview" link and   checking the appropriate boxes to give that role the permissions you desire.
  <p>To attach a specific user to a role, use the "account" section of the drupal Administration. </p>
  <p>Note: If you intend for a user to access certain sections of the administration
  pages, they must have "access administration page" privileges. </p>
<h4>user permissions<a name="permissions"></a></h4>
<p>Each role has certain things that its users are allowed to do, and some that
  are disallowed. For example, authenticated users may usually post a story but
  Anonymous users may not. </p>
<p>Each permission describes a fine-grained logical operation such as <br />
  <i>access administration pages</i> or <i>add and modify user
  accounts</i>. You <br /b>
  could say a permission represents access granted to a user to perform a set
  of <br />
  operations.</p>
<h4>search account</h4>
<p>Search Account enables an admin to query for any username in the user table
  and return users which match that query. For example, one may search for 'br'
  and Drupal might return 'brian', 'brad', and 'brenda'.</p>
<h4>settings<a name="settings"></a></h4>
<p>Administrators may choose to restrict registration to their site. That restriction
  may be accomplished on this page. Also, the list of words which may be included
  in a system generated password is also listed on this page. Drupal generates
  passwords by joining small words from the password list until the new password
  is greater than 6 characters.</p>
<h4>active users - report</h4>
<p>All users sorted by most recent login.</p>
<h4> new users - report</h4>
<p>All users sorted by most recent registration</p>
<h4> blocked users - report</h4>
<p>All users who have been blocked (status = 0) sorted by most recent registration</p>
<h4> special users - report</h4>
<p>All users with a <a href="#roles">role</a> other than Authenticated User</p>
<h3>Distributed authentication<a name="da"> </a></h3>
<p>One of the more tedious moments in visiting a new web site is filling out the
  registration form. The reg form provides helpful information to the web site
  owner, but not much value for the user. The value for the end user is usually
  a the ability to post a messages or receive personalized news, etc. Distributed
  authentication (DA) gives the user what he wants without having to fill out
  the reg form. Removing this obstacle yields more registered and active users
  for the web site.</p>
<p>DA enables a new user to input a username and password into the login box and
  immediately be recognized, even if that user never registered on your site.
  This works because Drupal knows how to communicate with external registration
  databases. For example, lets say that your new user 'Joe' is already a registered
  member of Delphi Forums. If your Drupal has delphi.module installed, then Drupal
  will inform Joe on the registration and login screens that he may login with
  his Delphi ID instead of registering with your Drupal instance. Joe likes that
  idea, and logs in with a username of joe@remote.delphiforums.com and his usual
  Delphi password. Drupal then communicates with remote.delphiforums.com (usually using <a href="http://www.xmlrpc.com/">XML-RPC</a>,
  <a href="http://www.w3.org/Protocols/">HTTP POST</a>, or <a href="http://www.soapware.org/">SOAP</a>) behind
  the scenes and asks &quot;is this password for username=joe? If Delphi replies
  yes, then Drupal will create a new local account for joe and log joe into it.
  Joe may keep on logging into your Drupal instance in the same manner, and he
  will be logged into the same joe@remote.delphiforums.com account.</p>
<p>One key element of DA is the 'authmap' table, which maps a user's authname
  (e.g. joe@remote.delphiforums.com) to his local UID (i.e. universal identification
  number). This map is checked whenever a user successfully logs into an external
  authentication source. Once Drupal knows that the current user is definately
  joe@remote.delphiforums.com (because Delphi says so), he looks up Joe's UID
  and logs Joe into that account.</p>
<p>Drupal is setup so that it is very easy to add support for any external authentication
  source. See the <a href="http://www.drupal.org/">Drupal Handbook</a> for information
  on authoring authentication modules. You currently have the following authentication modules installed ...</p>
  <?
    foreach (module_list() as $module) {
      if (module_hook($module, "auth")) {
        print "<h4>" . module_invoke($module, "info", "name") . "</h4>";
        print module_invoke($module, "auth_help");
      }
    }
  ?>
<h3><br />
  User preferences and profiles</h3>
<p>Drupal comes with a set of user preferences and profile which a user may edit by
  clicking on the user account link. Of course, a user must be logged into reach those pages.
  There, users will find a page for changing their preferred timezone, language, username, email address, password, theme, signature, homepage, and <a href="#da">distributed authentication</a> names.
  Changes made here take effect immediately. Also, administrators may make profile and preferences changes in the Admin Center on behalf of their users.</p>
  <p>Module developers are provided several hooks for adding custom fields to the user view/edit pages. These hooks are described in the Developer section of the <A href="http://www.drupal.org">Drupal Handbook</a>. For an example, see the <code>jabber_user()</code> function in <i>/modules/jabber.module</i>.
  </p>
 <?
}

function user_perm() {
  return array("administer users");
}

function user_search($keys) {
  global $PHP_SELF;
  $result = db_query("SELECT * FROM users WHERE name LIKE '%$keys%' LIMIT 20");
  while ($account = db_fetch_object($result)) {
    $find[$i++] = array("title" => $account->name, "link" => (strstr($PHP_SELF, "admin.php") ? drupal_url(array("mod" => "user", "op" => "edit", "id" => $account->uid), "admin") : drupal_url(array("mod" => "user", "op" => "view", "id" => $account->uid), "module")), "user" => $account->name);
  }
  return $find;
}

function user_block() {
  global $user, $edit;

  if ($user->uid) {
    // Display account settings:
    $block[0]["subject"] = $user->name;

    $output = "<div style=\"{ width: 155; }\">\n";

    $links = array_merge(module_invoke_all("link", "menu.create"), array(""), module_invoke_all("link", "menu.view"), array(""), module_invoke_all("link", "menu.settings"), array(""), module_invoke_all("link", "menu.misc"));
    $output .= @implode("<br />\n", $links);

    $output .= "</div>";
    $block[0]["content"] = $output;
  }
  else {
    $block[1]["subject"] = t("Log in");

    $output = "<div align=\"center\">\n";
    $output .= "<form action=\"".drupal_url(array("mod" => "user", "op" => "login"), "module")."\" method=\"post\">\n";
    // Save the referer.  We record where the user came from such that we
    // can redirect him after having completed the login form.
    if (!$edit["destination"]) $edit["destination"] = request_uri();
    $output .= "<input name=\"edit[destination]\" type=\"hidden\" value=\"" . $edit["destination"] . "\">";
    $output .= "<b>". t("Username") .":</b><br /><input name=\"edit[name]\" size=\"15\" /><br />\n";
    $output .= "<b>". t("Password") .":</b><br /><input name=\"edit[pass]\" size=\"15\" type=\"password\" /><br />\n";
    $output .= "<input name=\"edit[remember_me]\" type=\"checkbox\" />". t("Remember me") ."<br />\n";
    $output .= "<input name=\"edit[op]\" type=\"submit\" value=\"". t("Log in") ."\" /><br />\n";
    $output .= "</form></div>\n";
    if (variable_get("user_register", 1)) {
      $output .= "&#187; ". lm(t("Register"), array("mod" => "user", "op" => "register"), t("Create a new user account.")) ."\n";
    }
    $output .= "<br />&#187; ". lm(t("New password"), array("mod" => "user", "op" => "password"), t("Request new password via e-mail")) ."<br />";

    $block[1]["content"] = $output;
  }

  $block[0]["info"] = t("User information");
  $block[0]["link"] = drupal_url(array("mod" => "user"), "module");

  $block[1]["info"] = t("Log in");
  $block[1]["link"] = drupal_url(array("mod" => "user"), "module");

  // Who's online block
  $time = 60 * 60; // minutes * seconds
  $limit = 5; // List the X most recent people

  $result = db_query("SELECT uid, name FROM users WHERE timestamp > unix_timestamp() - $time ORDER BY timestamp DESC LIMIT $limit");

  if (db_num_rows($result)) {
    $output = "<ol>";
    while ($account = db_fetch_object($result)) {
      $output .= '<li>'.lm((strlen($account->name) > 10 ? substr($account->name, 0, 10) . '...' : $account->name), array("mod" => "user", "op" => "view", "id" => $account->uid)).'</li>';
    }
    $output .= "</ol>";
    $block[2]["content"] = $output;
  }
  $block[2]["subject"] = t("Who's online");
  $block[2]["info"] = t("Who's online");
  $block[3]["subject"] = t("Who's new");
  $block[3]["info"] = t("Who's new");
  $block[3]["content"] = user_new_users();

  return $block;
}

function user_new_users() {
  $result = db_query("SELECT uid, name FROM users WHERE status != '0' ORDER BY uid DESC LIMIT 5");
  while ($account = db_fetch_object($result)) {
    $output .= lm($account->name, array("mod" =>user, "op" => "view", "id" => $account->uid)) ."<br />";
  }
  return $output;
}

function user_link($type) {
  if ($type == "page") {
    $links[] = lm(t("user account"), array("mod" => "user"), t("Create a user account, request a new password or edit your account settings."));
  }

  if ($type == "menu.settings") {
    $links[] = lm(t("edit account"), array("mod" => "user", "op" => "edit"), t("View and edit your account information."));
  }

  if ($type == "menu.misc") {
    if (user_access("access administration pages")) {
      $links[] = la(t("administer %a", array("%a" => variable_get("site_name", "drupal"))));
    }

    $links[] = lm(t("logout"), array("mod" => "user", "op" => "logout"), t("Logout."));
  }

  if ($type == "admin" && user_access("administer users")) {
    $links[] = la(t("user management"), array("mod" => "user"));
  }

  return $links ? $links : array();
}

function drupal_login($arguments) {
   // an XML-RPC method called by external clients (usually other Drupal instances)
  $argument = $arguments->getparam(0);
  $username = $argument->scalarval();
  $argument = $arguments->getparam(1);
  $password = $argument->scalarval();

  if ($user = user_load(array(name => "$username", "pass" => $password, "status" => 1))) {
    return new xmlrpcresp(new xmlrpcval($user->uid, "int"));
  }
  else {
    return new xmlrpcresp(new xmlrpcval(0, "int"));
  }
}


function user_xmlrpc() {
  return array("drupal.login" => array("function" => "drupal_login"));
}

/*** Authentication methods ************************************************/

function user_get_authname($account, $module) {

  /*
  **  Called by authentication modules in order to edit/view their authmap information.
  */

  $result = db_query("SELECT authname FROM authmap WHERE uid = '$account->uid' && module = '$module'");
  return db_result($result);
}


function user_get_authmaps($authname = NULL) {

  /*
  ** Accepts an user object, $account, or an DA name and returns an
  ** associtive array of modules and DA names. Called at external login.
  */

  $result = db_query("SELECT authname, module FROM authmap WHERE authname = '$authname'");
  if (db_num_rows($result) > 0) {
    while ($authmap = db_fetch_object($result)) {
      $authmaps[$authmap->module] = $authmap->authname;
    }
    return $authmaps;
  }
  else {
    return 0;
  }
}

function user_set_authmaps($account, $authmaps) {
  foreach ($authmaps as $key => $value) {
    $module = explode("_", $key, 2);
    if ($value) {
      $result = db_query("SELECT COUNT(*) from authmap WHERE uid = '$account->uid' && module = '$module[1]'");
      if (db_result($result) == 0) {
        $result = db_query("INSERT INTO authmap (authname, uid, module) VALUES ('%s', '%s', '%s')", $value, $account->uid, $module[1]);
      }
      else {
        $result = db_query("UPDATE authmap SET authname = '$value' WHERE uid = '$account->uid' && module = '$module[1]'");
      }
    }
    else {
      $result = db_query("DELETE FROM authmap WHERE uid = '$account->uid' && module = '$module[1]'");
    }
  }
  return $result;
}

function user_help_da() {
  $site = variable_get("site_name", "this web site");

  $output = "
   <h3>Distributed authentication<a name=\"da\"></a></h3>
   <p>One of the more tedious moments in visiting a new web site is filling out the
    registration form. Here at %s, you do not have to fill out a registration form
    if you are already a member of ";
    $output .= implode(", ", user_auth_help_links());
    $output .= ".  This capability is called <i>Distributed
    Authentication</i>, and is unique to <a href=\"http://www.drupal.org\">Drupal</a>,
    the software which powers %s.</p>
   <p>Distributed Authentication enables a new user to input a username and password into the login box,
    and immediately be recognized, even if that user never registered at %s. This
    works because Drupal knows how to communicate with external registration databases.
    For example, lets say that new user 'Joe' is already a registered member of
    <a href=\"http://www.delphiforums.com\">Delphi Forums</a>. Drupal informs Joe
    on registration and login screens that he may login with his Delphi ID instead
    of registering with %s. Joe likes that idea, and logs in with a username
    of joe@remote.delphiforums.com and his usual Delphi password. Drupal then contacts
    the <i>remote.delphiforums.com</i> server behind the scenes (usually using <a href=\"http://www.xmlrpc.com\">XML-RPC</a>,
    <a href=\"http://www.w3.org/Protocols/\">HTTP POST</a>, or <a href=\"http://www.soapware.org\">SOAP</a>)
    and asks: \"Is the password for user Joe correct?\".  If Delphi replies yes, then
    we create a new $site account for Joe and log him into it.  Joe may keep
    on logging into %s in the same manner, and he will always be logged into the
    same account.</p>";

  $output = t($output, array("%s" => $site));

  foreach (module_list() as $module) {
    if (module_hook($module, "auth")) {
      $output .= "<h4><a name=\"$module\"></a>" . module_invoke($module, "info", "name") . "</h4>";
      $output .= module_invoke($module, "auth_help");
    }
  }

  return $output;
}

function user_auth_help_links() {
  foreach (module_list() as $module) {
    if (module_hook($module, "auth_help")) {
      $links[] = lm(module_invoke($module, "info", "name"), array("mod" => "user", "op" => "help#$module"));
    }
  }
  return $links;
}

/*** User features *********************************************************/

function user_login($edit = array(), $msg = "") {
  global $user, $referer;

  /*
  ** If we are already logged on, go to the user page instead.
  */

  if ($user->uid) {
    drupal_goto(drupal_url(array("mod" => "user"), "module"));
  }

  if (user_deny("user", $edit["name"])) {
    $error = t("The name '%s' has been denied access.", array("%s" => $edit["name"]));
  }
  else if ($edit["name"] && $edit["pass"]) {

    /*
    ** Try to log in the user locally:
    */

    if (!$user) {
      $name = check_input($edit["name"]);
      $pass = check_input($edit["pass"]);
      $user = user_load(array("name" => $name, "pass" => $pass, "status" => 1));
    }

    /*
    ** Strip name and server from ID:
    */

    if ($server = strrchr($edit["name"], "@")) {
      $name = check_input(substr($edit["name"], 0, strlen($edit["name"]) - strlen($server)));
      $server = check_input(substr($server, 1));
      $pass = check_input($edit["pass"]);
    }

    /*
    ** When possible, determine corrosponding external auth source. Invoke source, and login user if successful:
    */

    if (!$user && $server  && $result = user_get_authmaps("$name@$server")) {
      if (module_invoke(key($result), "auth", $name, $pass, $server)) {
        $user = user_external_load("$name@$server");
        watchdog("user", "external load: $name@$server, module: " . key($result));
      }
      else {
        $error = t("Invalid password for %s.", array("%s" => "<i>$name@$server</i>"));
      }
    }

     /*
    ** Try each external authentication source in series. Register user if successful.
    */

    else if (!$user && $server) {
      foreach (module_list() as $module) {
        if (module_hook($module, "auth")) {
          if (module_invoke($module, "auth", $name, $pass, $server)) {
            if (variable_get("user_register", 1) == 1 && !user_load(array("name" => "$name@$server"))) { //register this new user
              watchdog("user", "new user: $name@$server ($module ID)");
              $user = user_save("", array("name" => "$name@$server", "pass" => user_password(), "init" => "$name@$server", "rid" => _user_authenticated_id(), "status" => 1, "authname_$module" => "$name@$server"));
              break;
            }
          }
        }
      }
    }

    if ($user->uid) {
      watchdog("user", "session opened for '$user->name'");

      /*
      ** Write session ID to database:
      */

      user_save($user, array("sid" => session_id()));

      /*
      ** If the user wants to be remembered, set the proper cookie such
      ** that the session won't expire.
      */

      if ($edit["remember_me"]) {
        setcookie(session_name(), session_id(), time() + 3600 * 24 * 365);
      }
      else {
        setcookie(session_name(), session_id());
      }

      /*
      ** Redirect the user to the page he logged on from.
      */

      drupal_goto($edit["destination"]);
    }
    else {
      if (!$error) {
        $error = t("Sorry.  Unrecognized username or password.")." ". lm(t("Have you forgotten your password?"), array("mod" => "user", "op" => "password"));
      }
      if ($server) {
        watchdog("user", "failed login for '$name@$server': $error");
      }
      else {
        watchdog("user", "failed login for '$name': $error");
      }
    }
  }

  /*
  ** Display error message (if any):
  */

  if ($error) {
    $output .= "<p><span style=\"color: red;\" class=\"error\">". check_output($error) ."</span></p>";
  }

  /*
  ** Save the referer.  We record where the user came from such that we
  ** can redirect him after having completed the login form.
  */

  if (!$edit["destination"]) {
    $edit["destination"] = request_uri();
  }
  $output .= form_hidden("destination", $edit["destination"]);

  /*
  ** Display login form:
  */

  if ($msg) {
    $output .= "<p>$msg</p>";
  }
  $output .= form_textfield(t("Username"), "name", $edit["name"], 20, 64, t("Enter your %s username, or an ID from one of our affiliates: %a.", array("%s" => variable_get("site_name", "local"), "%a" => implode(", ", user_auth_help_links()))));
  $output .= form_password(t("Password"), "pass", $pass, 20, 64, t("Enter the password that accompanies your username."));
  $output .= form_checkbox(t("Remember me"), "remember_me", 1, 0, 0);
  $output .= form_submit(t("Log in"));
  $output .= "<p>&#187; ". lm(t("E-mail new password"), array("mod" => "user", "op" => "password")). "<br />";
  $output .= "&#187; " . lm(t("Create new account"), array("mod" => "user", "op" => "register")). "</p>";

  return form($output, "post", drupal_url(array ("mod" => "user"), "module"));
}

function _user_authenticated_id() {
  return db_result(db_query("SELECT rid FROM role WHERE name = 'authenticated user'"));
}

function user_logout() {
  global $user;

  if ($user->uid) {
    watchdog("user", "session closed for user '$user->name'");

    /*
    ** Destroy the current session:
    */

    session_destroy();
    unset($user);
  }

  /*
  ** Redirect the user to his personal information page:
  */

  drupal_goto("index.php");

}

function user_pass($edit = array()) {

  if ($edit["name"]) {
    $account = db_fetch_object(db_query("SELECT uid, name, mail FROM users WHERE name = '%s'", $edit["name"]));
    if (!$account) $error = t("Sorry. The username <i>%s</i> is not recognized.", array("%s" => $edit["name"]));
  }
  else if ($edit["mail"]) {
    $account = db_fetch_object(db_query("SELECT uid, name, mail FROM users WHERE mail = '%s'", $edit["mail"]));
    if (!$account) $error = t("Sorry. The e-mail address <i>%s</i> is not recognized.", array("%s" => $edit["mail"]));
  }
  if ($account) {

      $from = variable_get("site_mail", ini_get("sendmail_from"));
      $pass = user_password();

      /*
      ** Save new password:
      */

      user_save($account, array("pass" => $pass));

      /*
      ** Mail new password:
      */

      global $HTTP_HOST;
      $variables = array("%username" => $account->name, "%site" => variable_get("site_name", "drupal"), "%password" => $pass, "%uri" => path_uri(), "%uri_brief" => $HTTP_HOST, "%mailto" => $account->mail);
      $subject = strtr(variable_get("user_mail_pass_subject", t("Replacement login information for %username at %site")), $variables);
      $body = strtr(variable_get("user_mail_pass_body", t("%username,\n\nHere is your new password for %site. You may now login to %uri".drupal_url(array("mod" => "login"), "module")." using the following username and password:\n\nusername: %username\npassword: %password\n\nAfter logging in, you may wish to change your password at %uri".drupal_url(array("mod" => "user", "op" => "edit"), "module")."\n\nYour new %site membership also enables to you to login to other Drupal powered web sites (e.g. http://www.drop.org) without registering. Just use the following Drupal ID and password:\n\nDrupal ID: %username@%uri_brief\npassword: %password\n\n\n--  %site team")), $variables);
      $headers = "From: $from\nReply-to: $from\nX-Mailer: Drupal\nReturn-path: $from\nErrors-to: $from";
      user_mail($account->mail, $subject, $body, $headers);

      watchdog("user", "mail password: '". $account->name ."' &lt;". $account->mail ."&gt;");

      return t("Your password and further instructions have been sent to your e-mail address.");
    }
    else {

    // Display error message if necessary.
    if ($error) {
      $output .= "<p><span style=\"color: red;\" class=\"error\">". check_output($error) ."</span></p>";
    }

    /*
    ** Display form:
    */

    $output .= "<p>". sprintf(t("Enter your username %sor%s your email address."), "<b><i>", "</i></b>") ."</p>";
    $output .= form_textfield(t("Username"), "name", $edit["name"], 30, 64);
    $output .= form_textfield(t("E-mail address"), "mail", $edit["mail"], 30, 64);
    $output .= form_submit(t("E-mail new password"));
    $output .= "<p>&#187; ".lm(t("Log in"), array("mod" =>user, "op" => "login"))."<br />";
    $output .= "&#187; ".lm(t("Create new account"), array("mod" => "user", "op" => "register"))."</p>";

    return form($output, "post", drupal_url(array ("mod" => "user"), "module"));
  }
}

function user_register($edit = array()) {
  global $user;

  /*
  ** If we are already logged on, go to the user page instead.
  */

  if ($user->uid) {
    drupal_goto(drupal_url(array("mod" => "user", "op" => "edit"), "module"));
  }

  if ($edit["name"] && $edit["mail"]) {
    if ($error = user_validate_name($edit["name"])) {
      // do nothing
    }
    else if ($error = user_validate_mail($edit["mail"])) {
      // do nothing
    }
    else if (user_deny("user", $edit["name"])) {
      $error = t("The name '%s' has been denied access.", array("%s" => $edit["name"]));
    }
    else if (user_deny("mail", $edit["mail"])) {
      $error = t("The e-mail address '%s' has been denied access.", array("%s" => $edit["mail"]));
    }
    else if (db_num_rows(db_query("SELECT name FROM users WHERE LOWER(name) = LOWER('%s')", $edit["name"])) > 0) {
      $error = t("The name '%s' is already taken.", array("%s" => $edit["name"]));
    }
    else if (db_num_rows(db_query("SELECT mail FROM users WHERE LOWER(mail) = LOWER('%s')", $edit["mail"])) > 0) {
      $error = t("The e-mail address '%s' is already taken.", array("%s" => $edit["mail"]));
    }
    else if (variable_get("user_register", 1) == 0) {
      $error = t("Public registrations have been disabled by the site administrator.");
    }
    else {
      foreach (module_list() as $module) {
        if (module_hook($module, "user")) {
          $result = module_invoke($module, "user", "register_validate", $edit, $user);
          if (is_array($result)) {
            $data = array_merge($data, $result);
          }
          elseif (is_string($result)) {
            $error = $result;
            break;
          }
        }
      }
      if (!$error) {
        $success = 1;
      }
    }
  }

  if ($success) {

    watchdog("user", "new user: '". $edit["name"] ."' &lt;". $edit["mail"] ."&gt;");

    $from = variable_get("site_mail", ini_get("sendmail_from"));
    $pass = user_password();

    // create new user account, noting whether administrator approval is required
    if (variable_get("user_register", 1) == 1) {
      $user = user_save("", array_merge(array("name" => $edit["name"], "pass" => $pass, "init" => $edit["mail"], "mail" => $edit["mail"], "rid" => _user_authenticated_id(), "status" => 1), $data));
    }
    else {
      $user = user_save("", array_merge(array("name" => $edit["name"], "pass" => $pass, "init" => $edit["mail"], "mail" => $edit["mail"], "rid" => _user_authenticated_id(), "status" => 0), $data));
    }

    $variables = array("%username" => $edit["name"], "%site" => variable_get("site_name", "drupal"), "%password" => $pass, "%uri" => path_uri(), "%uri_brief" => $HTTP_HOST, "%mailto" => $edit["mail"]);

    //the first user may login immediately, and receives a customized welcome email.
    if ($user->uid == 1) {
      user_mail($edit["mail"], t("drupal user account details for %s", array("%s" => $edit["name"])), strtr(t("%username,\n\nYou may now login to %uri using the following username and password:\n\n  username: %username\n  password: %password\n\nAfter logging in, you may wish to visit the following pages:\n\nAdministration: %uriadmin.php\nEdit user account: %uri". drupal_url(array("mod" => "user", "op" => "edit"), "module") ."\n\n--drupal"), $variables), "From: $from\nReply-to: $from\nX-Mailer: Drupal\nReturn-path: $from\nErrors-to: $from");
      // This should not be t()'ed. No point as its only shown once in the sites lifetime, and it would be bad to store the password
      $output .= "<p>Welcome to Drupal. You are user #1, which gives you full and immediate access. All future registrants will receive their passwords via email, so please configure your email settings using the Administration pages.</p><p> Your password is <b>$pass</b>. You may change your password on the next page.</p><p>Please login below.</p>";
      $output .= form_hidden("name", $user->name);
      $output .= form_hidden("pass", $pass);
      $output .= form_submit(t("Log in"));
      return form($output);
    }
    else {
      global $HTTP_HOST;
      $subject = strtr(variable_get("user_mail_welcome_subject", t("User account details for %username at %site")), $variables);
      $body = strtr(variable_get("user_mail_welcome_body", t("%username,\n\nThank you for registering at %site. You may now login to %uri".drupal_url(array("mod" => "login"), "module")." using the following username and password:\n\nusername: %username\npassword: %password\n\nAfter logging in, you may wish to change your password at %urimodule.php?mod=user&op=edit\n\nYour new %site membership also enables to you to login to other Drupal powered web sites (e.g. http://www.drop.org) without registering. Just use the following Drupal ID and password:\n\nDrupal ID: %username@%uri_brief\npassword: %password\n\n\n--  %site team")), $variables);
      user_mail($edit["mail"], $subject, $body, "From: $from\nReply-to: $from\nX-Mailer: Drupal\nReturn-path: $from\nErrors-to: $from");
      return t("Your password and further instructions have been sent to your e-mail address.");
    }
  }
  else {
    if ($error) {
      $output .= "<p><span style=\"color: red;\" class=\"error\">". check_output($error) ."</span></p>";
    }
  }

  // display the registration form
  $affiliates = user_auth_help_links();
  if (array_count_values($affiliates) > 1) {
    $affiliates = implode(", ", $affiliates);
    $output .= "<p>" . t("Note: If you have an account with one of our affiliates (%s), you may ".lm("login now", array("mod" => "user", "op" => "login"))." instead of registering.", array("%s" => $affiliates)) ."</p>";
  }
  $output .= form_textfield(t("Username"), "name", $edit["name"], 30, 64, t("Your full name or your prefered username: only letters, numbers and spaces are allowed."));
  $output .= form_textfield(t("E-mail address"), "mail", $edit["mail"], 30, 64, t("A password and instructions will be sent to this e-mail address, so make sure it is accurate."));
  foreach (module_list() as $module) {
    if (module_hook($module, "user")) {
      $output .= module_invoke($module, "user", "register_form", $edit, $user);
    }
  }
  $output .= form_submit(t("Create new account"));
  $output .= "<p>&#187; ".lm(t("E-mail new password"), array("mod" => "user", "op" => "password")). "<br />";
  $output .= "&#187; " .lm(t("Log in"), array("mod" => "user", "op" => "login")). "</p>";
  return form($output);
}


function user_delete() {
  global $edit, $user;

  if ($edit["confirm"]) {
    watchdog(user,"$user->name deactivated her own account.");
    db_query("UPDATE users SET mail = 'deleted', status='0' WHERE uid = '$user->uid'");
    $output .= t("Your account has been deactivated.");
  }
  else {
    $output .= form_item(t("Confirm Deletion"), t("You are about to deactivate your own user account. In addition, your email address will be removed from the database."));
    $output .= form_hidden("confirm", 1);
    $output .= form_submit(t("Delete account"));
    $output = form($output);
  }
  return $output;
}

function user_edit($edit = array()) {
  global $themes, $user, $languages;

  if ($user->uid) {
    if ($edit["name"]) {
      if ($error = user_validate_name($edit["name"])) {
        // do nothing
      }
      else if ($error = user_validate_mail($edit["mail"])) {
        // do nothing
      }
      else if (db_num_rows(db_query("SELECT uid FROM users WHERE uid != '$user->uid' AND LOWER(name) = LOWER('%s')", $edit["name"])) > 0) {
        $error = t("The name '%s' is already taken.", array("%s" => $edit["name"]));
      }
      else if ($edit["mail"] && db_num_rows(db_query("SELECT uid FROM users WHERE uid != '$user->uid' AND LOWER(mail) = LOWER('%s')", $edit["mail"])) > 0) {
        $error = t("The e-mail address '%s' is already taken.", array("%s" => $edit["mail"]));
      }
      else if ($user->uid) {
        foreach (module_list() as $module) {
          if (module_hook($module, "user")) {
            $result = module_invoke($module, "user", "edit_validate", $edit, $user);
          }
          if (is_array($result)) {
            $data = array_merge($data, $result);
          }
          elseif (is_string($result)) {
            $error = $result;
            break;
          }
        }

        /*
        ** If required, check that proposed passwords match.  If so,
        ** add new password to $edit.
        */

        if ($edit["pass1"]) {
          if ($edit["pass1"] == $edit["pass2"]) {
            $edit["pass"] = $edit["pass1"];
          }
          else {
            $error = t("The specified passwords do not match.");
          }
        }

        unset($edit["pass1"], $edit["pass2"]);

        if (!$error) {
          /*
          ** Save user information:
          */

          $user = user_save($user, array_merge($edit, $data));

          $output .= t("Your user information changes have been saved.");
        }
      }
    }

    if ($error) {
      $output .= "<p><span style=\"color: red;\" class=\"error\">". check_output($error) ."</span></p>";
    }

    $output .= form_textfield(t("Username"), "name", $user->name, 30, 55, t("Your full name or your prefered username: only letters, numbers and spaces are allowed."));
    $output .= form_textfield(t("E-mail address"), "mail", $user->mail, 30, 55, t("Insert a valid e-mail address.  All e-mails from the system will be sent to this address. The e-mail address is not made public and will only be used if you wish to receive a new password or wish to receive certain news or notifications by e-mail."));

    foreach (module_list() as $module) {
      if (module_hook($module, "user")) {
        $output .= module_invoke($module, "user", "edit_form", $edit, $user);
      }
    }

    $output .= form_textfield(t("Homepage"), "homepage", $user->homepage, 30, 55, t("Optional") .". ". t("Make sure you enter a fully qualified URL: remember to include \"http://\"."));
    foreach (theme_list() as $key => $value) {
      $options .= "$value[type]<option value=\"$key\"". (($user->theme == $key) ? " selected=\"selected\"" : "") .">$key - $value->description</option>\n";
    }
    $output .= form_item(t("Theme"), "<select name=\"edit[theme]\">$options</select>", t("Selecting a different theme will change the look and feel of the site."));
    for ($zone = -43200; $zone <= 46800; $zone += 3600) $zones[$zone] = date("l, F dS, Y - h:i A", time() - date("Z") + $zone) ." (GMT ". $zone / 3600 .")";
    $output .= form_select(t("Timezone"), "timezone", $user->timezone, $zones, t("Select what time you currently have and your timezone settings will be set appropriate."));
    $output .= form_select(t("Language"), "language", $user->language, $languages, t("Selecting a different language will change the language of the site."));
    $output .= form_textarea(t("Signature"), "signature", $user->signature, 70, 3, t("Your signature will be publicly displayed at the end of your comments.") ."<br />". t("Allowed HTML tags") .": ". htmlspecialchars(variable_get("allowed_html", "")));
    $output .= form_item(t("Password"), "<input type=\"password\" name=\"edit[pass1]\" size=\"12\" maxlength=\"24\" /> <input type=\"password\" name=\"edit[pass2]\" size=\"12\" maxlength=\"24\" />", t("Enter your new password twice if you want to change your current password or leave it blank if you are happy with your current password."));
    $output .= form_submit(t("Save user information"));

    $output = form($output);
  }
  else {
    $output = user_login();
  }

  return $output;
}

function user_menu() {
  $links[] = lm(t("view user information"), array("mod" => "user", "op" => "view"));
  $links[] = lm(t("edit user information"), array("mod" => "user", "op" => "edit"));
  $links[] = lm(t("delete account"), array("mod" => "user", "op" => "delete"));

  return "<div align=\"center\">". implode(" &middot; ", $links) ."</div>";
}

function user_view($uid = 0) {
  global $theme, $user;

  if (!$uid) {
    $uid = $user->uid;
  }

  if ($user->uid && $user->uid == $uid) {
    $output .= form_item(t("Name"), check_output("$user->name ($user->init)"));
    $output .= form_item(t("E-mail address"), check_output($user->mail));

    foreach (module_list() as $module) {
      if (module_hook($module, "user")) {
        $output .= module_invoke($module, "user", "view_private", "", $user);
      }
    }

    $output .= form_item(t("Homepage"), format_url($user->homepage));
    $output .= form_item(t("Signature"), check_output($user->signature, 1));

    $theme->header();
    $theme->box(t("User account"), user_menu());
    $theme->box(t("View user information"), $output);
    $theme->footer();
  }
  else if ($uid && $account = user_load(array("uid" => $uid, "status" => 1))) {
    $output .= form_item(t("Name"), check_output($account->name));
    $output .= form_item(t("Homepage"), format_url($account->homepage));

    foreach (module_list() as $module) {
      if (module_hook($module, "user")) {
        $output .= module_invoke($module, "user", "view_public", "", $account);
      }
    }

    $theme->header();
    $theme->box(t("View user information"), $output);
    $theme->footer();
  }
  else {
    $theme->header();
    $theme->box(t("Log in"), user_login());
    $theme->box(t("Create new user account"), user_register());
    $theme->box(t("E-mail new password"), user_pass());
    $theme->footer();
  }
}

function user_page() {
  global $edit, $op, $id, $theme;

  switch ($op) {
    case t("E-mail new password");
    case "password":
      $theme->header();
      $theme->box(t("E-mail new password"), user_pass($edit));
      $theme->footer();
      break;
    case t("Create new account"):
    case "register":
      $output = user_register($edit);
      $theme->header();
      $theme->box(t("Create new account"), $output);
      $theme->footer();
      break;
    case t("Log in"):
    case "login":
      $output = user_login($edit);
      $theme->header();
      $theme->box(t("Log in"), $output);
      $theme->footer();
      break;
    case t("Delete account"):
    case t("delete");
      $output = user_delete();
      $theme->header();
      $theme->box(t("User account"), user_menu());
      $theme->box(t("Delete account"), $output);
      $theme->footer();
      break;
    case t("Save user information"):
    case "edit":
      $output = user_edit($edit);
      $theme = theme_init();
      $theme->header();
      $theme->box(t("User account"), user_menu());
      $theme->box(t("Edit user information"), $output);
      $theme->footer();
      break;
    case "view":
      user_view($id);
      break;
    case t("Logout"):
    case "logout":
      print user_logout();
      break;
    case "help":
      $theme->header();
      $theme->box(t("Distributed Authentication"), user_help_da());
      $theme->footer();
      break;
    default:
      print user_view();
  }

}

/*** Administrative features ***********************************************/

function user_conf_options() {
  $output .= form_select("Public registrations", "user_register", variable_get("user_register", 1), array("Only site administrators can create new user accounts.", "Visitors can create accounts and no administrator approval is required.", "Visitors can create accounts but administrator approval is required."));
  $output .= form_textfield("Password words", "user_password", variable_get("user_password", "foo,bar,guy,neo,tux,moo,sun,asm,dot,god,axe,geek,nerd,fish,hack,star,mice,warp,moon,hero,cola,girl,fish,java,perl,boss,dark,sith,jedi,drop,mojo"), 55, 256, "A comma separated list of short words that can be concatenated to generate human-readable passwords.");
  $output .= form_textfield("Welcome e-mail subject", "user_mail_welcome_subject", variable_get("user_mail_welcome_subject", t("User account details for %username at %site")), 80, 180, "Customize the Subject of your welcome email, which is sent to new members upon registering. Available variables are: %username, %site, %password, %uri, %uri_brief, %mailto");
  $output .= form_textarea("Welcome e-mail body", "user_mail_welcome_body", variable_get("user_mail_welcome_body", t("%username,\n\nThank you for registering at %site. You may now login to %uri".drupal_url(array("mod" => "login"), "module")." using the following username and password:\n\nusername: %username\npassword: %password\n\nAfter logging in, you may wish to change your password at %uri".drupal_url(array("mod" => "user", "op" => "edit"), "module")."\n\nYour new %site membership also enables to you to login to other Drupal powered web sites (e.g. http://www.drop.org) without registering. Just use the following Drupal ID and password:\n\nDrupal ID: %username@%uri_brief\npassword: %password\n\n\n--  %site team")), 70, 10, "Customize the Body of the welcome email, which is sent to new members upon registering. Available variables are: %username, %site, %password, %uri, %uri_brief, %mailto");
  $output .= form_textfield("Forgotten password e-mail subject", "user_mail_pass_subject", variable_get("user_mail_pass_subject", t("Replacement login information for %username at %site")), 80, 180, "Customize the Subject of your Forgotten Password email. Available variables are: %username, %site, %password, %uri, %uri_brief, %mailto");
  $output .= form_textarea("Forgotten password e-mail body", "user_mail_pass_body", variable_get("user_mail_pass_body", t("%username,\n\nHere is your new password for %site. You may now login to %uri".drupal_url(array("mod" => "login"), "module")." using the following username and password:\n\nusername: %username\npassword: %password\n\nAfter logging in, you may wish to change your password at %uri".drupal_url(array("mod" => "user", "op" => "edit"), "module")."\n\nYour new %site membership also enables to you to login to other Drupal powered web sites (e.g. http://www.drop.org) without registering. Just use the following Drupal ID and password:\n\nDrupal ID: %username@%uri_brief\npassword: %password\n\n\n--  %site team")), 70, 10, "Customize the Body of the Forgotten Password email. Available variables are: %username, %site, %password, %uri, %uri_brief, %mailto");
  return $output;
}

function user_admin_settings($edit = array()) {
  global $op;

  if ($op == "Save configuration") {
    /*
    ** Save the configuration options:
    */

    foreach ($edit as $name => $value) variable_set($name, $value);
  }

  if ($op == "Reset to defaults") {
    /*
    ** Reset the configuration options to their default value:
    */

    foreach ($edit as $name=>$value) variable_del($name);
  }

  $output .= user_conf_options();
  $output .= form_submit("Save configuration");
  $output .= form_submit("Reset to defaults");

  return form($output);

}

function user_admin_create($edit = array()) {

  if ($edit["name"] || $edit["mail"]) {
    if ($error = user_validate_name($edit["name"])) {
      // do nothing
    }
    else if ($error = user_validate_mail($edit["mail"])) {
      // do nothing
    }
    else if (db_num_rows(db_query("SELECT name FROM users WHERE LOWER(name) = LOWER('%s')", $edit["name"])) > 0) {
      $error = t("The name '%s' is already taken.", array("%s" => $edit["name"]));
    }
    else if (db_num_rows(db_query("SELECT mail FROM users WHERE LOWER(mail) = LOWER('%s')", $edit["mail"])) > 0) {
      $error = t("The e-mail address '%s' is already taken.", array("%s" => $edit["mail"]));
    }
    else {
      $success = 1;
    }
  }

  if ($success) {

    watchdog("user", "new user: '". $edit["name"] ."' &lt;". $edit["mail"] ."&gt;");

    user_save("", array("name" => $edit["name"], "pass" => $edit["pass"], "init" => $edit["mail"], "mail" => $edit["mail"], "rid" => _user_authenticated_id(), "status" => 1));

    return "Created a new user '". $edit["name"] ."'.  No e-mail has been sent.";
  }
  else {

    if ($error) {
      $output .= "<p><span style=\"color: red;\" class=\"error\">". check_output($error) ."</span></p>";
    }

    $output .= form_textfield("Username", "name", $edit["name"], 30, 55);
    $output .= form_textfield("E-mail address", "mail", $edit["mail"], 30, 55);
    $output .= form_textfield("Password", "pass", $edit["pass"], 30, 55);
    $output .= form_submit("Create account");

    return form($output);
  }
}

function user_admin_access($edit = array()) {
  global $op, $id, $type;

  $output .= "<small>". la(t("e-mail rules"), array("mod" => "user", "op" => "access", "type" => "mail"))." :: ".la(t("username rules"), array("mod" => "user", "op" => "access", "type" => "user")) ."</small><hr />";  // irc rules, too!

  if ($type != "user") {
    $output .= "<h3>E-mail rules</h3>";
    $type = "mail";
  }
  else {
    $output .= "<h3>Username rules</h3>";
  }

  if ($op == "Add rule") {
    db_query("INSERT INTO access (mask, type, status) VALUES ('%s', '%s', '%s')", $edit["mask"], $type, $edit["status"]);
  }
  else if ($op == "Check") {
    if (user_deny($type, $edit["test"])) {
      $message = "<b>'". $edit["test"] ."' is not allowed.</b><p />";
    }
    else {
      $message = "<b>'". $edit["test"] ."' is allowed.</b><p />";
    }
  }
  else if ($id) {
    db_query("DELETE FROM access WHERE aid = '$id'");
  }

  $output .= "<table border=\"1\" cellpadding=\"2\" cellspacing=\"2\">";
  $output .= " <tr><th>type</th><th>mask</th><th>operations</th></tr>";

  $result = db_query("SELECT * FROM access WHERE type = '%s' AND status = '1' ORDER BY mask", $type);

  while ($rule = db_fetch_object($result)) {
    $output .= "<tr><td align=\"center\">allow</td><td>". check_output($rule->mask) ."</td><td>". la(t("delete rule"), array("mod" => "user", "op" => "access", "type" => $type, "id" => $rule->aid)) ."</td></tr>";
  }

  $result = db_query("SELECT * FROM access WHERE type = '%s' AND status = '0' ORDER BY mask", $type);

  while ($rule = db_fetch_object($result)) {
    $output .= "<tr><td align=\"center\">deny</td><td>". check_output($rule->mask) ."</td><td>". la(t("delete rule"), array("mod" => "user", "op" => "access", "type" => $type, "id" => $rule->aid)). "</td></tr>";
  }

  $output .= " <tr><td><select name=\"edit[status]\"><option value=\"1\">allow</option><option value=\"0\">deny</option></select></td><td><input size=\"32\" maxlength=\"64\" name=\"edit[mask]\" /></td><td><input type=\"submit\" name=\"op\" value=\"Add rule\" /></td></tr>";
  $output .= "</table>";
  $output .= "<p><small>%: matches any number of characters, even zero characters.<br />_: matches exactly one character.</small></p>";

  if ($type != "user") {
    $output .= "<h3>Check e-mail address</h3>";
  }
  else {
    $output .= "<h3>Check username</h3>";
  }

  $output .= "$message<input size=\"32\" maxlength=\"64\" name=\"edit[test]\" value=\"". $edit["test"] ."\" /><input type=\"submit\" name=\"op\" value=\"Check\" />";

  return form($output);
}

function user_roles($membersonly = 0) {
  $result = db_query("SELECT * FROM role ORDER BY name");
  while ($role = db_fetch_object($result)) {
    if (!$membersonly || ($membersonly && $role->name != "anonymous user")) {
      $roles[$role->rid] = $role->name;
    }
  }
  return $roles;
}

function user_admin_perm($edit = array()) {
  global $tid;

  if ($edit) {

    /*
    ** Save permissions:
    */

    $tid = check_input($edit["tid"]);

    $result = db_query("SELECT * FROM role");
    while ($role = db_fetch_object($result)) {
      // delete, so if we clear every checkbox we reset that role;
      // otherwise permissions are active and denied everywhere
      db_query("DELETE FROM permission WHERE rid = '%s' AND tid = '$tid'", $role->rid);
      $perm = $edit[$role->rid] ? implode(", ", array_keys($edit[$role->rid])) : "";
      if ($perm) {
        db_query("INSERT INTO permission (rid, perm, tid) VALUES ('%s', '$perm', '$tid')", $role->rid);
      }

    }
  }

  /*
  ** Compile permission array:
  */

  foreach (module_list() as $name) {
    if (module_hook($name, "perm")) {
      $perms = array_merge($perms, module_invoke($name, "perm"));
    }
  }
  asort($perms);

  /*
  ** Compile role array:
  */

  $result = db_query("SELECT r.rid, p.perm FROM role r LEFT JOIN permission p ON r.rid = p.rid WHERE tid = '%s' ORDER BY name", $tid);
  $roles = array();
  while ($role = db_fetch_object($result)) {
    $role_perms[$role->rid] = $role->perm;
  }

  $result = db_query("SELECT rid, name FROM role ORDER BY name");
  $role_names = array ();
  while ($role = db_fetch_object($result)) {
    $role_names[$role->rid] = $role->name;
  }

  /*
  ** Render roles / permission overview:
  */

  $output .= "<table border=\"1\" cellpadding=\"2\" cellspacing=\"2\">";
  $output .= " <tr><th>&nbsp;</th><th>". implode("</th><th>", array_values($role_names)) ."</th></tr>";
  foreach ($perms as $perm) {
    $output .= " <tr>";
    $output .= "  <td>". check_output($perm) ."</td>";
    foreach ($role_names as $rid => $name) {
      $output .= "  <td align=\"center\"><input type=\"checkbox\" name=\"edit[$rid][$perm]\"". (strstr($role_perms[$rid], $perm) ? " checked=\"checked\"" : "") ." /></td>";
    }
    $output .= " </tr>";
  }
  $output .= "</table>";
  $output .= form_hidden("tid", $tid);
  $output .= form_submit("Save permissions");

  return form($output);

}

function user_admin_role($edit = array()) {
  global $op, $id;

  if ($op == "Save role") {
    db_query("UPDATE role SET name = '%s' WHERE rid = '%s'", $edit["name"], $id);
  }
  else if ($op == "Delete role") {
    db_query("DELETE FROM role WHERE rid = '%s'", $id);
    db_query("DELETE FROM permission WHERE rid = '%s'", $id);
  }
  else if ($op == "Add role") {
    db_query("INSERT INTO role (name) VALUES ('%s')", $edit["name"]);
  }
  else if ($id) {
    /*
    ** Display role form:
    */

    $role = db_fetch_object(db_query("SELECT * FROM role WHERE rid = '%s'", $id));

    $output .= form_textfield("Role name", "name", $role->name, 32, 64, "The name for this role.  Example: 'moderator', 'editorial board', 'site architect'.");
    $output .= form_submit("Save role");
    $output .= form_submit("Delete role");

    $output = form($output);
  }

  if (!$output) {
    /*
    ** Render role overview:
    */

    $result = db_query("SELECT * FROM role ORDER BY name");

    $output .= "<table border=\"1\" cellpadding=\"2\" cellspacing=\"2\">";
    $output .= " <tr><th>name</th><th>operations</th></tr>";
    while ($role = db_fetch_object($result)) {
      $output .= "<tr><td>". check_output($role->name) ."</td><td>". la(t("edit role"), array("mod" => "user", "op" => "role", "id" => $role->rid)) ."</td></tr>";
    }
    $output .= " <tr><td><input size=\"32\" maxlength=\"64\" name=\"edit[name]\" /></td><td><input type=\"submit\" name=\"op\" value=\"Add role\" /></td></tr>";
    $output .= "</table>";

    $output = form($output);
  }

  return $output;
}

function user_admin_edit($edit = array()) {
  global $op, $id, $themes;

  if ($account = user_load(array("uid" => $id))) {

    if ($op == "Save account") {
      foreach (module_list() as $module) {
        if (module_hook($module, "user")) {
          $result = module_invoke($module, "user", "edit_validate", $edit, $account);
        }
        if (is_array($result)) {
          $data = array_merge($data, $result);
        }
        elseif (is_string($result)) {
          $error = $result;
          break;
        }
      }

      // TODO: this display/edit/validate should be moved to a new profile.module implementing the _user hooks
      if ($error = user_validate_name($edit["name"])) {
        // do nothing
      }
      else if ($error = user_validate_mail($edit["mail"])) {
        // do nothing
      }
      else if (db_num_rows(db_query("SELECT uid FROM users WHERE uid != '$account->uid' AND LOWER(name) = LOWER('%s')", $edit["name"])) > 0) {
        $error = t("The name '%s' is already taken.", array("%s" => $edit["name"]));
      }
      else if ($edit["mail"] && db_num_rows(db_query("SELECT uid FROM users WHERE uid != '$account->uid' AND LOWER(mail) = LOWER('%s')", $edit["mail"])) > 0) {
        $error = t("The e-mail address '%s' is already taken.", array("%s" => $edit["mail"]));
      }

      /*
      ** If required, check that proposed passwords match.  If so,
      ** add new password to $edit.
      */

      if ($edit["pass1"]) {
        if ($edit["pass1"] == $edit["pass2"]) {
          $edit["pass"] = $edit["pass1"];
        }
        else {
          $error = t("The specified passwords do not match.");
        }
      }

      unset($edit["pass1"], $edit["pass2"]);
      if (!$error) {
        $account = user_save($account, $edit);
        $output .= status(t("Your user information changes have been saved."));
      }
      else {
        $output .= "<p><span style=\"color: red;\" class=\"error\">". check_output($error) ."</span></p>";
      }
    }
    else if ($op == "Delete account") {
      if ($edit["status"] == 0) {
        db_query("DELETE FROM users WHERE uid = '$account->uid'");
        db_query("DELETE FROM authmap WHERE uid = '$account->uid'");
        $output .= t("The account has been deleted.");
      }
      else {
        $output .= t("Failed to delete account: the account has to be blocked first.");
      }
    }

  /*
  ** Display user form:
  */

  $output .= form_item("User ID", check_output($account->uid));
  $output .= form_textfield(t("Username"), "name", $account->name, 30, 55, t("Your full name or your prefered username: only letters, numbers and spaces are allowed."));
  $output .= form_textfield(t("E-mail address"), "mail", $account->mail, 30, 55, t("Insert a valid e-mail address.  All e-mails from the system will be sent to this address. The e-mail address is not made public and will only be used if you wish to receive a new password or wish to receive certain news or notifications by e-mail."));

  foreach (module_list() as $module) {
    if (module_hook($module, "user")) {
      $output .= module_invoke($module, "user", "edit_form", $edit, $account);
    }
  }

  $output .= form_textfield(t("Homepage"), "homepage", $account->homepage, 30, 55, t("Optional") .". ". t("Make sure you enter a fully qualified URL: remember to include \"http://\"."));
  foreach (theme_list() as $key => $value) {
    $options .= "$value[type]<option value=\"$key\"". (($user->theme == $key) ? " selected=\"selected\"" : "") .">$key - $value->description</option>\n";
  }
  $output .= form_item(t("Theme"), "<select name=\"edit[theme]\">$options</select>", t("Selecting a different theme will change the look and feel of the site."));
  for ($zone = -43200; $zone <= 46800; $zone += 3600) $zones[$zone] = date("l, F dS, Y - h:i A", time() - date("Z") + $zone) ." (GMT ". $zone / 3600 .")";
  $output .= form_select(t("Timezone"), "timezone", $account->timezone, $zones, t("Select what time you currently have and your timezone settings will be set appropriate."));
  $output .= form_select(t("Language"), "language", $account->language, $languages, t("Selecting a different language will change the language of the site."));
  $output .= form_textarea(t("Signature"), "signature", $account->signature, 70, 3, t("Your signature will be publicly displayed at the end of your comments.") ."<br />". t("Allowed HTML tags") .": ". htmlspecialchars(variable_get("allowed_html", "")));
  $output .= form_item(t("Password"), "<input type=\"password\" name=\"edit[pass1]\" size=\"12\" maxlength=\"24\" /> <input type=\"password\" name=\"edit[pass2]\" size=\"12\" maxlength=\"24\" />", t("Enter a new password twice if you want to change the current password for this user or leave it blank if you are happy with the current password."));
  $output .= form_select("Status", "status", $account->status, array("blocked", "active"));
  $output .= form_select("Role", "rid", $account->rid, user_roles(1));

  $output .= form_submit("Save account");
  $output .= form_submit("Delete account");

  $output = form($output);

  }
  else {
    $output = t("no such user");
  }

  return $output;
}

function user_admin_account() {
  global $query;

  $queries = array(array("ORDER BY timestamp DESC", "active users"), array("ORDER BY uid DESC", "new users"), array("WHERE status = 0 ORDER BY uid DESC", "blocked users"));
  foreach (user_roles(1) as $key => $value) {
    $queries[] = array("WHERE role = '$value' ORDER BY uid DESC", $value . "s");
  }

  $result = db_query("SELECT uid, name, timestamp FROM users ". $queries[$query ? $query : 0][0] ." LIMIT 50");

  foreach ($queries as $key => $value) {
    $links[] = la($value[1], array("mod" => "user", "op" => "account", "query" => $key));
  }

  $output .= "<small>". implode(" :: ", $links) ."</small><hr />";

  $output .= "<table border=\"1\" cellpadding=\"2\" cellspacing=\"2\">";
  $output .= " <tr><th>username</th><th>last access</th><th>operations</th></tr>";
  while ($account = db_fetch_object($result)) {
    $output .= " <tr><td>". format_name($account) ."</td><td>". format_date($account->timestamp, "small") ."</td><td align=\"center\">". la(t("edit account"), array("mod" => "user", "op" => "edit", "id" =>$account->uid)) ."</td></tr>";
  }
  $output .= "</table>";

  return $output;

}

function admin_access_init() {
  $role = db_fetch_object(db_query("SELECT * FROM role WHERE name = 'anonymous user'"));
  if (!$role) db_query("INSERT INTO role (name) VALUES ('anonymous user')");

  $role = db_fetch_object(db_query("SELECT * FROM role WHERE name = 'authenticated user'"));
  if (!$role) db_query("INSERT INTO role (name) VALUES ('authenticated user')");
}

function user_admin() {
  global $edit, $id, $op, $user;

  if (user_access("administer users")) {
    /*
    ** Initialize all the roles and permissions:
    */

    admin_access_init();

    /*
    ** Compile a list of the administrative links:
    */

    $links[] = la(t("add new user"), array("mod" => "user", "op" => "create"));
    $links[] = la(t("access rules"), array("mod" => "user", "op" => "access"));
    $links[] = la(t("user accounts"), array("mod" => "user", "op" => "account"));
    $links[] = la(t("user roles"), array("mod" => "user", "op" => "role"));
    $links[] = la(t("user permissions"), array("mod" => "user", "op" => "permission"));
    $links[] = la(t("search account"), array("mod" => "user", "op" => "search"));
    $links[] = la(t("settings"), array("mod" => "user", "op" => "settings"));
    $links[] = la(t("help"), array("mod" => "user", "op" => "help"));

    print "<small>". implode(" &middot; ", $links) ."</small><hr />";

    switch ($op) {
      case "help":
        print user_help();
        break;
      case "search":
        print search_type("user", drupal_url(array("mod" => "user", "op" => "search"), "admin"));
        break;
      case "Save configuration":
      case "Reset to defaults":
      case "settings":
        print user_admin_settings($edit);
        break;
      case "Add rule":
      case "Check":
      case "access":
        print user_admin_access($edit);
        break;
      case "Save permissions":
      case "permission":
        print user_admin_perm($edit);
        break;
      case "Create account":
      case "create":
        print user_admin_create($edit);
        break;
      case "Add role":
      case "Delete role":
      case "Save role":
      case "role":
        print user_admin_role($edit);
        break;
      case "Delete account":
      case "Save account":
      case "edit":
        print user_admin_edit($edit);
        break;
      default:
        print user_admin_account();
    }
  }
}

?>