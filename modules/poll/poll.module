<?php
// $Id$

function poll_allowvotes(&$node) {
  /*
  ** Only accept votes on specific cases to prevent double voting and abuse.
  ** We only need to determine this once for a poll, but we don't do this in
  ** poll_load() (i.e. for every poll that is loaded) for speed reasons.
  */
  global $user;

  if ($node->allowvotes != -1) {
    return $node;
  }

  $node->allowvotes = 0;
  if (user_access("vote on polls")) {
    if ($user->uid) {
      // Pad the UID with underscores to allow a simple strstr() search
      $id = "_". $user->uid ."_";
    }
    else {
      $id = $_SERVER["REMOTE_ADDR"];
    }
    if (!strstr($node->voters, $id)) {
      $node->allowvotes = $node->active;
    }

    // Save this for later
    $node->polluserid = $id;
  }
  return $node;
}

function poll_access($op, $node) {
  if ($op == "view") {
    return $node->status;
  }

  if ($op == "create") {
    return user_access("create polls");
  }
}

function poll_block($op = "list", $delta = 0) {
  if (user_access("access content")) {
    if ($op == "list") {
      $blocks[0]["info"] = t("Most recent poll");
      return $blocks;
    }
    else {
      $timestamp = db_result(db_query("SELECT MAX(created) FROM {node} WHERE type = 'poll' AND status = '1' AND moderate = '0'"));
      if ($timestamp) {
        $poll = node_load(array("type" => "poll", "created" => $timestamp, "moderate" => "0", "status" => "1"));
        if ($poll->nid) {
          // Poll_view dumps the output into $poll->body
          poll_view($poll, 1, 1);
        }
      }
      $block["subject"] = t("Poll");
      $block["content"] = "<div class=\"poll-title\">$poll->title</div>$poll->body";
      return $block;
    }
  }
}

function poll_cron() {
  // Close polls that have exceeded their allowed runtime
  $result = db_query("SELECT p.nid FROM {poll} p INNER JOIN {node} n ON p.nid=n.nid WHERE (n.created + p.runtime) < '". time() ."' AND p.active = '1' AND p.runtime != '0'");
  while ($poll = db_fetch_object($result)) {
    db_query("UPDATE {poll} SET active='0' WHERE nid = %d", $poll->nid);
  }
}

function poll_delete($node) {
  db_query("DELETE FROM {poll} WHERE nid=%d", $node->nid);
  db_query("DELETE FROM {poll_choices} WHERE nid = %d", $node->nid);
}


function poll_validate(&$node) {
  if (isset($node->title)) {
    // Check for at least two options and validate amount of votes:
    for ($i = 0; $i < $node->choices; $i++) {
      if ($node->choice[$i] != "") {
        $actualchoices++;
      }

      if ($node->chvotes[$i] < 0) {
        $error["chvotes][$i"] = theme("theme_error", t("Negative values are not allowed."));
      }
    }

    if ($actualchoices < 2) {
      $error["choice][0"] = theme("theme_error", t("You must fill in at least two choices."));
    }
  }

  $node->teaser = poll_teaser($node);

  return $error;
}

function poll_form(&$node, &$help, &$error) {
  $admin = user_access("administer nodes");

  $_duration = array(0 => t("Unlimited"), 86400 => format_interval(86400), 172800 => format_interval(172800), 345600 => format_interval(345600), 604800 => format_interval(604800), 1209600 => format_interval(1209600), 2419200 => format_interval(2419200), 4838400 => format_interval(4838400), 9676800 => format_interval(9676800), 31536000 => format_interval(31536000));
  $_active = array(0 => t("Closed"), 1 => t("Active"));

  $node->choices = $node->choices ? $node->choices : max(2, count($node->choice) ? count($node->choice) : 5);

  $help = variable_get("poll_help", "");

  if (function_exists("taxonomy_node_form")) {
    $output = implode("", taxonomy_node_form("poll", $node));
  }

  for ($c = 2; $c <= 30; $c++) {
    $opts[$c] = $c;
  }
  $output .= form_select(t("Number of choices"), "choices", $node->choices, $opts, t("This item sets the number of multiple choice options in the poll, but it doesn't have to equal the actual amount of options; you can leave the extra boxes empty."));
  $output .= form_submit(t("Preview")) ."<br /><br /><br />";

  for ($a = 0; $a < $node->choices; $a++) {
    $output .= form_textfield(t("Choice %n", array("%n" => ($a + 1))), "choice][$a", $node->choice[$a], 50, 127, $error["choice][$a"]);
    if ($admin) {
      $output .= form_textfield(t("Votes for choice %n", array("%n" => ($a + 1))), "chvotes][$a", $node->chvotes[$a] ? $node->chvotes[$a] : 0, 7, 7, $error["chvotes][$a"]);
    }
  }

  if ($admin) {
    $output .= form_select(t("Poll status"), "active", isset($node->active) ? $node->active : 1, $_active);
  }

  $output .= form_select(t("Poll duration"), "runtime", $node->runtime ? $node->runtime : 0, $_duration, t("After this period, the poll will be closed automatically."));

  return $output;
}

function poll_help($section = "admin/help#poll") {
  $output = "";

  switch ($section) {

    case 'admin/help#poll':
      $output .= "<p>Users with the correct %permissions can create and/or vote on polls.</p>";
      $output .= "<ul>";
      $output .= "<li> To create a poll a user needs the \"create polls\" permission.</li>";
      $output .= "<li>To vote on a poll question a user must have the \"vote on polls\" permission.</li>";
      $output .= "<li>To view the results one needs the \"access content\" permission.</li>";
      $output .= "<li>To administer polls you need the \"administer nodes\" permission.</li>";
      $output .= "</ul>";
      $output .= "<p>Creating a poll is much like creating any other node. Click \"create poll\" in your user box. The title of the poll should be the question, then enter the answers and the \"base\" vote counts. You can also choose the time period over which the vote will run.</p><p>The %poll item in the navigation links will take you to a page where you can see all the current polls, vote on them (if you haven't already) and view the results.</p>";
      $output = t($output, array("%permissions" => l(t("permissions"), "admin/user/permission"), "%poll" => l(t("Poll"), "poll")));
      break;
    case 'admin/system/modules#description':
      $output = t("Enables your site to capture votes on different topics in the form of multiple choice questions.");
      break;
  }

  return $output;
}

function poll_insert($node) {
  if (!user_access("administer nodes")) {
    // Make sure all votes are 0 initially
    for ($i = 0; $i < count($node->chvotes); $i++) $node->chvotes[$i] = 0;
    $node->active = 1;
  }

  db_query("INSERT INTO {poll} (nid, runtime, voters, active) VALUES (%d, %d, '', %d)", $node->nid, $node->runtime, $node->active);

  for ($i = 0; $i < $node->choices; $i++) {
    if ($node->choice[$i] != "") {
      db_query("INSERT INTO {poll_choices} (nid, chtext, chvotes, chorder) VALUES (%d, '%s', %d, %d)", $node->nid, $node->choice[$i], $node->chvotes[$i], $i);
    }
  }
}

function poll_link($type, $node = 0, $main) {
  $links = array();

  if ($type == "system") {
    if (user_access("create polls")) {
      menu("node/add/poll", t("poll"), "poll_page", 0);
    }
  }
  else if ($type == "page" && user_access("access content")) {
    $links[] = l(t("polls"), "poll", array("title" => t("View the list of polls on this site.")));
  }
  else if ($type == "node" && $node->type == "poll") {
    /*
    ** Add links to allow the user to switch between the results and the voting
    ** form, if he/she hasn't voted yet.
    */

    // Make sure we have determined the 'allowvotes' flag
    poll_allowvotes($node);

    if ($node->allowvotes == 1) {
      $pollresults = $_GET["pollresults"];

      // Change the current URL: add/edit the value of pollresults[nid]
      if ($pollresults[$node->nid]) {
        // Disable
        $url = eregi_replace("pollresults\[$node->nid\]=1", "pollresults[$node->nid]=0", request_uri());

        $links[] = "<a href=\"". htmlentities($url) ."\">". t("voting form") . "</a>";
      }
      else {
        // Enable
        if (strstr(request_uri(), "pollresults[$node->nid]=")) {
          $url = eregi_replace("pollresults\[$node->nid\]=0", "pollresults[$node->nid]=1", request_uri());
        }
        else {
          $url = request_uri() . (strstr(request_uri(), "?") ? "&amp;" : "?") ."pollresults[$node->nid]=1";
        }

        $links[] = "<a href=\"". htmlentities($url) ."\">". t("view results") . "</a>";
      }
    }
  }

  return $links;
}

function poll_load($node) {
  // Load the appropriate choices into the $node object
  $poll = db_fetch_object(db_query("SELECT runtime, voters, active FROM {poll} WHERE nid = %d", $node->nid));

  $result = db_query("SELECT chtext, chvotes, chorder FROM {poll_choices} WHERE nid=%d ORDER BY chorder", $node->nid);
  while ($choice = db_fetch_object($result)) {
    $poll->choice[$choice->chorder]  = $choice->chtext;
    $poll->chvotes[$choice->chorder] = $choice->chvotes;
  }

  // Reset allowvotes flag, will be filled in later on when needed.
  $poll->allowvotes = -1;
  return $poll;
}

function poll_node($field) {
  $info["name"] = t("poll");
  $info["description"] = t("A poll is a multiple-choice question which visitors can vote on.");
  return $info[$field];
}

function poll_page() {

  theme("header");
  $result = db_query("SELECT n.nid, n.title, p.active, SUM(c.chvotes) AS votes FROM {node} n INNER JOIN {poll} p ON n.nid=p.nid INNER JOIN {poll_choices} c ON n.nid=c.nid WHERE type = 'poll' AND status = '1' AND moderate = '0' GROUP BY n.nid, n.title, p.active, n.created ORDER BY n.created DESC");
  $output = "<ul>";
  while ($node = db_fetch_object($result)) {
    $output .= "<li>".l($node->title, "node/view/$node->nid") ." - ". format_plural($node->votes, "1 vote", "%count votes") ." - ". ($node->active ? t("open") : t("closed")) ."</li>";
  }
  $output .= "</ul>";
  theme("box", t("Polls"), $output);
  theme("footer");
}

function poll_perm() {
  return array("create polls", "vote on polls");
}

function poll_teaser($node) {
  // Create a simple teaser that lists all the choices
  if (is_array($node->choice)) {
    foreach ($node->choice as $k => $v) {
      if ($v != "") {
        $teaser .= "* $v\n";
      }
    }
  }
  return $teaser;
}

function poll_view_voting(&$node, $main, $block, $links) {
  // Display the vote form


  $url = request_uri();
  $output .= "<div class=\"poll\"><form action=\"". htmlentities($url) ."\" method=\"post\">";

  $output .= "<div class=\"vote-form\">";
  $output .= "<div class=\"choices\">";
  if ($node->choice) {
    foreach ($node->choice as $key => $value) {
      if ($value != "") {
        $output .= "<div><input type=\"radio\" name=\"pollvote[$node->nid]\" value=\"$key\" />". filter($value) ."</div>";
      }
    }
  }
  $output .= "</div>". form_submit(t("Vote"), "vote") ."</div>";
  $output .= $block ? "<div class=\"links\">". theme("links", $links) ."</div>" : "";
  $output .= "</form></div>";

  return $output;
}

function poll_view_results(&$node, $main, $block, $links) {
  // Display the results


  // Count the votes and find the maximum
  if ($node->choice) {
    foreach ($node->choice as $key => $value) {
      $votestotal += $node->chvotes[$key];
      $votesmax = max($votesmax, $node->chvotes[$key]);
    }
    $votesmax = max($votesmax, 1);
  }

  // Output the divs for the text, bars and percentages
  $output .= "<div class=\"poll\">";
  if ($node->choice) {
    foreach ($node->choice as $key => $value) {
      if ($value != "") {
        $width = round($node->chvotes[$key] * 100 / max($votestotal, 1));
        $percentage = round($node->chvotes[$key] * 100 / max($votestotal, 1));
        $output .= "<div class=\"text\">". filter($value) ."</div>";
        $output .= "<div class=\"bar\">";
        $output .= "<div style=\"width: ". $width ."%;\" class=\"foreground\"></div>";
        $output .= "<div style=\"width: ". (100 - $width) ."%;\" class=\"background\"></div>";
        $output .= "</div>";
        $output .= "<div class=\"percent\"> $percentage%". (!$block ? " (". format_plural($node->chvotes[$key], "1 vote", "%count votes") .")" : "") ."</div>";
      }
    }
  }
  $output .= "<div class=\"total\">". t("Total votes") .": $votestotal</div>";

  $output .= ($block ? "<div class=\"links\">". theme("links", $links) ."</div>" : "") ."</div>";

  return $output;
}

function poll_view_processvote(&$node) {
  $pollvote = $_POST["pollvote"];

  if (isset($pollvote[$node->nid]) && ($node->allowvotes == 1)) {
    if (!empty($node->choice[$pollvote[$node->nid]])) {
      $node->voters = $node->voters ? ($node->voters ." ". $node->polluserid) : $node->polluserid;
      db_query("UPDATE {poll} SET voters='%s' WHERE nid = %d", $node->voters, $node->nid);
      db_query("UPDATE {poll_choices} SET chvotes = chvotes + 1 WHERE nid = %d AND chorder = %d", $node->nid, $pollvote[$node->nid]);
      $node->allowvotes = 0;
      $node->chvotes[$pollvote[$node->nid]]++;
    }
  }
}

function poll_view(&$node, $main = 0, $block = 0) {
  global $user;

  /*
  ** When several polls are displayed on the same page (e.g. on the front page and in the side bar)
  ** we distinguish between them using the nid as index into associative arrays:
  ** $pollvote[nid]    - A user's vote
  ** $pollresults[nid] - When a user hasn't voted, he can choose to see the voting form or the results
  */
  $pollresults = $_GET["pollresults"];

  // Make sure we have determined the 'allowvotes' flag
  poll_allowvotes($node);

  // Because the voting form is embedded in the node-display, we process the data here
  poll_view_processvote($node);

  // Add extra link pointing to the list of polls (side-block only)
  if ($block) {
    $node->body = $node->teaser = "";

    $links = link_node($node, $main);
    $links[] = l(t("older polls"), "poll", array("title" => t("View the list of polls on this site.")));
  }

  if (($node->allowvotes == 1) && !$pollresults[$node->nid]) {
    $output = poll_view_voting($node, $main, $block, $links);
  }
  else {
    $output = poll_view_results($node, $main, $block, $links);
  }

  $node->body = $node->teaser = $output;

  // We also use poll_view() for the side-block
  if (!$block) {
    theme("node", $node, $main);
  }
}

function poll_update($node) {
  db_query("UPDATE {poll} SET runtime = %d, active = %d WHERE nid = %d", $node->runtime, $node->active, $node->nid);

  db_query("DELETE FROM {poll_choices} WHERE nid = %d", $node->nid);
  for ($i = 0; $i < count($node->choice); $i++) {
    $choice->chtext = $node->choice[$i];
    $choice->chvotes = (int)$node->chvotes[$i];
    $choice->chorder = $i;

    if ($choice->chtext != "") {
      db_query("INSERT INTO {poll_choices} (nid, chtext, chvotes, chorder) VALUES (%d, '%s', %d, %d)", $node->nid, $choice->chtext, $choice->chvotes, $choice->chorder);
    }
  }
}

?>
