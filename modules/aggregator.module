<?php
// $Id$

/**
 * @file
 * Used to aggregate syndicated content (RSS and RDF).
 */

/**
 * Implementation of hook_help().
 */
function aggregator_help($section) {
  switch ($section) {
    case 'admin/help#aggregator':
      return t('
      <p>Thousands of sites (particularly news sites and weblogs) publish their latest headlines and/or stories in a machine-readable format so that other sites can easily link to them. This content is usually in the form of an <a href="http://blogs.law.harvard.edu/tech/rss">RSS</a> feed (which is an XML-based syndication standard).</p>
      <p>You can read aggregated content from many sites using RSS feed readers, such as <a href="http://www.disobey.com/amphetadesk/">Amphetadesk</a>.</p>
      <p>Drupal provides the means to aggregate feeds from many sites and display these aggregated feeds to your site\'s visitors. To do this, enable the aggregator module in site administration and then go to the aggregator configuration page, where you can subscribe to feeds and set up other options.</p>
      <h3>How do I find RSS feeds to aggregate?</h3>
      <p>Many web sites (especially weblogs) display small XML icons or other obvious links on their home page. You can follow these to obtain the web address for the RSS feed. Common extensions for RSS feeds are .rss, .xml and .rdf. For example: <a href="http://slashdot.org/slashdot.rdf">Slashdot RSS</a>.</p>
      <p>If you can\'t find a feed for a site, or you want to find several feeds on a given topic, try an RSS syndication directory such as <a href="http://www.syndic8.com/">Syndic8</a>.</p>
      <p>To learn more about RSS, read Mark Pilgrim\'s <a href="http://www.xml.com/pub/a/2002/12/18/dive-into-xml.html">What is RSS</a> and WebReference.com\'s <a href="http://www.webreference.com/authoring/languages/xml/rss/1/">The Evolution of RSS</a> articles.</p>
      <p>NOTE: Enable your site\'s XML syndication button by turning on the Syndicate block in block management.</p>
      <h3>How do I add a news feed?</h3>
      <p>To subscribe to an RSS feed on another site, use the <a href="%admin-news">aggregation page</a>.</p>
      <p>Once there, click the <a href="%new-feed">new feed</a> tab.  Drupal will then ask for the following:</p>
      <ul>
       <li><strong>Title</strong> -- The text entered here will be used in your news aggregator, within the administration configuration section, and as a title for the news feed block. As a general rule, use the web site name from which the feed originates.</li>
       <li><strong>URL</strong> -- Here you\'ll enter the fully-qualified web address for the feed you wish to subscribe to.</li>
       <li><strong>Update interval</strong> -- This is how often Drupal will scan the feed for new content. This defaults to every hour. Checking a feed more frequently that this is typically a waste of bandwidth and is considered somewhat impolite. For automatic updates to work, cron.php must be called regularly. If it is not, you\'ll have to manually update the feeds one at a time within the news aggregation administration page by using <a href="%update-items">update items</a>.</li>
       <li><strong>Categorize news items</strong> -- As items are received from a feed they will be put in any categories you have selected here.</li>
      </ul>
      <p>Once you have submitted the new feed, check to make sure it is working properly by selecting <a href="%update-items">update items</a> on the <a href="%admin-news">aggregation page</a>. If you do not see any items listed for that feed, edit the feed and make sure that the URL was entered correctly.</p>
      <h3>Adding categories</h3>
      <p>News items can be filed into categories. To create a category, start at the <a href="%admin-news">aggregation page</a>.</p>
      <p>Once there, select <a href="%new-category">new category</a> from the menu. Drupal will then ask for the following:</p>
      <ul>
       <li><strong>Title</strong> -- The title will be used in the <em>news by topics</em> listing in your news aggregator and for the block created for the bundle.</li>
       <li><strong>Description</strong> -- A short description of the category to tell users more details about what news items they might find in the category.</li>
      </ul>
      <h3>Using the news aggregator</h3>
      <p>The news aggregator has a number of ways that it displays your subscribed content:</p>
      <ul>
       <li><strong><a href="%news-aggregator">News aggregator</a></strong> (latest news) -- Displays all incoming items in the order in which they were received.</li>
       <li><strong><a href="%sources">Sources</a></strong> -- Organizes incoming content by feed, displaying feed titles (each of which links to a page with the latest items from that feed) and item titles (which link to that item\'s actual story/article).</li>
       <li><strong><a href="%categories">Categories</a></strong> -- Organizes incoming content by category, displaying category titles (each of which links to a page with the latest items from that category) and item titles (which link to that item\'s actual story/article).</li>
      </ul>
      <p>Pages that display items (for sources, categories, etc.) display the following for each item:
      <ul>
       <li>The title of the item (its headline).</li>
       <li>The categories that the item belongs to, each of which links to that particular category page as detailed above.</li>
       <li>A description containing the first few paragraphs or a summary of the item (if available).</li>
       <li>The name of the feed, which links to the individual feed\'s page, listing information about that feed and items for that feed only. This is not shown on feed pages (they would link to the page you\'re currently on).</li>
      </ul>
      <p>Additionally, users with the <em>administer news feeds permission</em> will see a link to categorize the news items. Clicking this will allow them to select which category(s) each news item is in.</p>
      <h3>Technical details</h3>
      <p>Drupal automatically generates an OPML feed file that is available by selecting the XML icon on the News Sources page.</p>
      <p>When fetching feeds Drupal supports conditional GETs, this reduces the bandwidth usage for feeds that have not been updated since the last check.</p>
      <p>If a feed is permanently moved to a new location Drupal will automatically update the feed URL to the new address.</p>', array('%block' => url('admin/block'), '%admin-news' => url('admin/aggregator'), '%new-feed' => url('admin/aggregator/add/feed'), '%new-category' => url('admin/aggregator/add/category'), '%update-items' => url('admin/aggregator'), '%news-aggregator' => url('aggregator'), '%sources' => url('aggregator/sources'), '%categories' => url('aggregator/categories')));
    case 'admin/modules#description':
      return t('Aggregates syndicated content (RSS and RDF feeds).');
    case 'admin/aggregator':
      return t('<p>Thousands of sites (particularly news sites and weblogs) publish their latest headlines and/or stories in a machine-readable format so that other sites can easily link to them. This content is usually in the form of an <a href="http://blogs.law.harvard.edu/tech/rss">RSS</a> feed (which is an XML-based syndication standard). To display the feed or category in a block you must decide how many items to show by editing the feed or block and turning on the <a href="%block">feed\'s block</a>.</p>', array('%block' => url('admin/block')));
    case 'admin/aggregator/add/feed':
      return t('<p>Add a site that has an RSS/RDF feed. The URL is the full path to the RSS feed file. For the feed to update automatically you must run "cron.php" on a regular basis. If you already have a feed with the URL you are planning to use, the system will not accept another feed with the same URL.</p>');
    case 'admin/aggregator/add/category':
      return t('<p>Categories provide a way to group items from different news feeds together. Each news category has its own feed page and block. For example, you could tag various sport-related feeds as belonging to a category called <em>Sports</em>. News items can be added to a category automatically by setting a feed to automatically place its item into that category, or by using the categorize items link in any listing of news items.</p>');
  }
}

function aggregator_settings() {
  $items = array(0 => t('none')) + drupal_map_assoc(array(3, 5, 10, 15, 20, 25), '_aggregator_items');
  $period = drupal_map_assoc(array(3600, 10800, 21600, 32400, 43200, 86400, 172800, 259200, 604800, 1209600, 2419200, 4838400, 9676800), 'format_interval');

  $output = '';
  $output .= form_textfield(t('Allowed HTML tags'), 'aggregator_allowed_html_tags', variable_get('aggregator_allowed_html_tags', '<a> <b> <br> <dd> <dl> <dt> <em> <i> <li> <ol> <p> <strong> <u> <ul>'), 80, 255, t('The list of tags which are allowed in feeds, i.e., which will not be removed by Drupal.'));
  $output .= form_select(t('Items shown in sources and categories pages'), 'aggregator_summary_items', variable_get('aggregator_summary_items', 3), $items, t('The number of items which will be shown with each feed or category in the feed and category summary pages.'));
  $output .= form_select(t('Discard news items older than'), 'aggregator_clear', variable_get('aggregator_clear', 9676800), $period, t('Older news items will be automatically discarded.  Requires crontab.'));
  $output .= form_radios(t('Category selection type'), 'aggregator_category_selector', variable_get('aggregator_category_selector', 'check'), array('check' => t('checkboxes'), 'select' => t('multiple selector')), t('The type of category selection widget which is shown on categorization pages. Checkboxes are easier to use; a multiple selector is good for working with large numbers of categories.'));
  return $output;
}

/**
 * Helper function for drupal_map_assoc.
 */
function _aggregator_items($count) {
  return format_plural($count, '1 item', '%count items');
}

/**
 * Implementation of hook_perm().
 */
function aggregator_perm() {
  return array('administer news feeds', 'access news feeds');
}

/**
 * Implementation of hook_menu().
 */
function aggregator_menu($may_cache) {
  $items = array();
  $edit = user_access('administer news feeds');
  $view = user_access('access news feeds');

  if ($may_cache) {
    $items[] = array('path' => 'admin/aggregator', 'title' => t('aggregator'),
      'callback' => 'aggregator_admin_overview', 'access' => $edit);
    $items[] = array('path' => 'admin/aggregator/edit/feed', 'title' => t('edit feed'),
      'callback' => 'aggregator_admin_edit_feed', 'access' => $edit,
      'type' => MENU_CALLBACK);
    $items[] = array('path' => 'admin/aggregator/edit/category', 'title' => t('edit category'),
      'callback' => 'aggregator_admin_edit_category', 'access' => $edit,
      'type' => MENU_CALLBACK);
    $items[] = array('path' => 'admin/aggregator/remove', 'title' => t('remove items'),
      'callback' => 'aggregator_admin_remove_feed', 'access' => $edit,
      'type' => MENU_CALLBACK);
    $items[] = array('path' => 'admin/aggregator/update', 'title' => t('update items'),
      'callback' => 'aggregator_admin_refresh_feed', 'access' => $edit,
      'type' => MENU_CALLBACK);

    $items[] = array('path' => 'admin/aggregator/list', 'title' => t('list'),
      'type' => MENU_DEFAULT_LOCAL_TASK, 'weight' => -10);
    $items[] = array('path' => 'admin/aggregator/add/feed', 'title' => t('add feed'),
      'callback' => 'aggregator_admin_edit_feed', 'access' => $edit,
      'type' => MENU_LOCAL_TASK);
    $items[] = array('path' => 'admin/aggregator/add/category', 'title' => t('add category'),
      'callback' => 'aggregator_admin_edit_category', 'access' => $edit,
      'type' => MENU_LOCAL_TASK);

    $items[] = array('path' => 'aggregator', 'title' => t('news aggregator'),
      'callback' => 'aggregator_page_last', 'access' => $view,
      'weight' => 5);
    $items[] = array('path' => 'aggregator/sources', 'title' => t('sources'),
      'callback' => 'aggregator_page_sources', 'access' => $view);
    $items[] = array('path' => 'aggregator/categories', 'title' => t('categories'),
      'callback' => 'aggregator_page_categories', 'access' => $view,
      'type' => MENU_ITEM_GROUPING);
    $items[] = array('path' => 'aggregator/rss', 'title' => t('RSS feed'),
      'callback' => 'aggregator_page_rss', 'access' => $view,
      'type' => MENU_CALLBACK);
    $items[] = array('path' => 'aggregator/opml', 'title' => t('OPML feed'),
      'callback' => 'aggregator_page_opml', 'access' => $view,
      'type' => MENU_CALLBACK);
  }
  else {
    if (arg(0) == 'aggregator' && is_numeric(arg(2))) {
      if (arg(1) == 'sources') {
        $feed = db_fetch_object(db_query('SELECT title, fid FROM {aggregator_feed} WHERE fid = %d', arg(2)));
        if ($feed) {
          $items[] = array('path' => 'aggregator/sources/'. $feed->fid, 'title' => $feed->title,
                           'callback' => 'aggregator_page_source', 'access' => $view);
          $items[] = array('path' => 'aggregator/sources/'. $feed->fid .'/view', 'title' => t('view'),
                           'type' => MENU_DEFAULT_LOCAL_TASK, 'weight' => -10);
          $items[] = array('path' => 'aggregator/sources/'. $feed->fid .'/categorize', 'title' => t('categorize'),
                           'callback' => 'aggregator_page_source', 'access' => $edit,
                           'type' => MENU_LOCAL_TASK);
          $items[] = array('path' => 'aggregator/sources/'. $feed->fid .'/configure', 'title' => t('configure'),
                           'callback' => 'aggregator_edit', 'access' => $edit,
                           'type' => MENU_LOCAL_TASK,
                           'weight' => 1);
        }
      }
      else if (arg(1) == 'categories') {
        $category = db_fetch_object(db_query('SELECT title, cid FROM {aggregator_category} WHERE cid = %d', arg(2)));
        if ($category) {
          $items[] = array('path' => 'aggregator/categories/'. $category->cid, 'title' => $category->title,
                           'callback' => 'aggregator_page_category', 'access' => $view);
          $items[] = array('path' => 'aggregator/categories/'. $category->cid .'/view', 'title' => t('view'),
                           'type' => MENU_DEFAULT_LOCAL_TASK, 'weight' => -10);
          $items[] = array('path' => 'aggregator/categories/'. $category->cid .'/categorize', 'title' => t('categorize'),
                           'callback' => 'aggregator_page_category', 'access' => $edit,
                           'type' => MENU_LOCAL_TASK);
          $items[] = array('path' => 'aggregator/categories/'. $category->cid .'/configure', 'title' => t('configure'),
                           'callback' => 'aggregator_edit', 'access' => $edit,
                           'type' => MENU_LOCAL_TASK,
                           'weight' => 1);
        }
      }
    }
  }

  return $items;
}

/**
 * Implementation of hook_cron().
 *
 * Checks news feeds for updates once their refresh interval has elapsed.
 */
function aggregator_cron() {
  $result = db_query('SELECT * FROM {aggregator_feed} WHERE checked + refresh < %d', time());
  while ($feed = db_fetch_array($result)) {
    aggregator_refresh($feed);
  }
}

/**
 * Implementation of hook_block().
 *
 * Generates blocks for the latest news items in each category and feed.
 */
function aggregator_block($op, $delta = 0, $edit = array()) {
  if (user_access('access news feeds')) {
    if ($op == 'list') {
      $result = db_query('SELECT cid, title FROM {aggregator_category} ORDER BY title');
      while ($category = db_fetch_object($result)) {
        $block['category-'. $category->cid]['info'] = t('%title category latest items', array('%title' => theme('placeholder', $category->title)));
      }
      $result = db_query('SELECT fid, title FROM {aggregator_feed} ORDER BY fid');
      while ($feed = db_fetch_object($result)) {
        $block['feed-'. $feed->fid]['info'] = t('%title feed latest items', array('%title' => theme('placeholder', $feed->title)));
      }
    }
    else if ($op == 'configure') {
      list($type, $id) = explode('-', $delta);
      if ($type == 'category') {
        $value = db_result(db_query('SELECT block FROM {aggregator_category} WHERE cid = %d', $id));
      }
      else {
        $value = db_result(db_query('SELECT block FROM {aggregator_feed} WHERE fid = %d', $id));
      }

      $output = form_select(t('Number of news items in block'), 'block', $value, drupal_map_assoc(array(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)));
      return $output;
    }
    else if ($op == 'save') {
      list($type, $id) = explode('-', $delta);
      if ($type == 'category') {
        $value = db_query('UPDATE {aggregator_category} SET block = %d WHERE cid = %d', $edit['block'], $id);
      }
      else {
        $value = db_query('UPDATE {aggregator_feed} SET block = %d WHERE fid = %d', $edit['block'], $id);
      }
    }
    else if ($op == 'view') {
      list($type, $id) = explode('-', $delta);
      switch ($type) {
        case 'feed':
          if ($feed = db_fetch_object(db_query('SELECT fid, title, block FROM {aggregator_feed} WHERE fid = %d', $id))) {
            $block['subject'] = check_plain($feed->title);
            $result = db_query_range('SELECT * FROM {aggregator_item} WHERE fid = %d ORDER BY timestamp DESC, iid DESC', $feed->fid, 0, $feed->block);
            $block['content'] = '<div class="more-link">'. l(t('more'), 'aggregator/sources/'. $feed->fid, array('title' => t('View this feed\'s recent news.'))) .'</div>';
          }
          break;

        case 'category':
          if ($category = db_fetch_object(db_query('SELECT cid, title, block FROM {aggregator_category} WHERE cid = %d', $id))) {
            $block['subject'] = check_plain($category->title);
            $result = db_query_range('SELECT i.* FROM {aggregator_category_item} ci LEFT JOIN {aggregator_item} i ON ci.iid = i.iid WHERE ci.cid = %d ORDER BY i.timestamp DESC, i.iid DESC', $category->cid, 0, $category->block);
            $block['content'] = '<div class="more-link">'. l(t('more'), 'aggregator/categories/'. $category->cid, array('title' => t('View this category\'s recent news.'))) .'</div>';
          }
          break;
      }
      $items = array();
      while ($item = db_fetch_object($result)) {
        $items[] = theme('aggregator_block_item', $item);
      }
      $block['content'] = theme('item_list', $items) . $block['content'];
    }
    return $block;
  }
}

function aggregator_remove($feed) {
  $result = db_query('SELECT iid FROM {aggregator_item} WHERE fid = %d', $feed['fid']);
  while ($item = db_fetch_object($result)) {
    $items[] = "iid = $item->iid";
  }
  if ($items) {
    db_query('DELETE FROM {aggregator_category_item} WHERE '. implode(' OR ', $items));
  }
  db_query('DELETE FROM {aggregator_item} WHERE fid = %d', $feed['fid']);
  db_query("UPDATE {aggregator_feed} SET checked = 0, etag = '', modified = 0 WHERE fid = %d", $feed['fid']);
  drupal_set_message(t('The news items from %site have been removed.', array('%site' => theme('placeholder', $feed['title']))));
}

/**
 * Call-back function used by the XML parser.
 */
function aggregator_element_start($parser, $name, $attributes) {
  global $item, $element, $tag, $items, $channel;

  switch ($name) {
    case 'IMAGE':
    case 'TEXTINPUT':
    case 'CONTENT':
    case 'SUMMARY':
    case 'TAGLINE':
    case 'SUBTITLE':
    case 'LOGO':
    case 'INFO':
    case 'ID':
      $element = $name;
      break;
    case 'LINK':
      if ($attributes['REL'] == 'alternate') {
        if ($element == 'ITEM') {
          $items[$item]['LINK'] = $attributes['HREF'];
        }
        else {
          $channel['LINK'] = $attributes['HREF'];
        }
      }
      break;
    case 'ITEM':
      $element = $name;
      $item += 1;
      break;
    case 'ENTRY':
      $element = 'ITEM';
      $item += 1;
      break;
  }

  $tag = $name;
}

/**
 * Call-back function used by the XML parser.
 */
function aggregator_element_end($parser, $name) {
  global $element;

  switch ($name) {
    case 'IMAGE':
    case 'TEXTINPUT':
    case 'ITEM':
    case 'ENTRY':
    case 'CONTENT':
    case 'INFO':
    case 'ID':
      $element = '';
  }
}

/**
 * Call-back function used by the XML parser.
 */
function aggregator_element_data($parser, $data) {
  global $channel, $element, $items, $item, $image, $tag;

  switch ($element) {
    case 'ITEM':
      $items[$item][$tag] .= $data;
      break;
    case 'IMAGE':
    case 'LOGO':
      $image[$tag] .= $data;
      break;
    case 'LINK':
      if ($data) {
        $items[$item][$tag] .= $data;
      }
      break;
    case 'CONTENT':
      $items[$item]['CONTENT'] .= $data;
      break;
    case 'SUMMARY':
      $items[$item]['SUMMARY'] .= $data;
      break;
    case 'TAGLINE':
    case 'SUBTITLE':
      $channel['DESCRIPTION'] .= $data;
      break;
    case 'INFO':
    case 'ID':
    case 'TEXTINPUT':
      // The sub-element is not supported. However, we must recognize
      // it or its contents will end up in the item array.
      break;
    default:
      $channel[$tag] .= $data;
  }
}

/**
 * Checks a news feed for new items.
 */
function aggregator_refresh($feed) {
  global $channel, $image;

  // Generate conditional GET headers.
  $headers = array();
  if ($feed['etag']) {
    $headers['If-None-Match'] = $feed['etag'];
  }
  if ($feed['modified']) {
    $headers['If-Modified-Since'] = gmdate('D, d M Y H:i:s', $feed['modified']) .' GMT';
  }

  // Request feed.
  $result = drupal_http_request($feed['url'], $headers);

  // Process HTTP response code.
  switch ($result->code) {
    case 304:
      db_query('UPDATE {aggregator_feed} SET checked = %d WHERE fid = %d', time(), $feed['fid']);
      drupal_set_message(t('There is no new syndicated content from %site.', array('%site' => theme('placeholder', $feed['title']))));
      break;
    case 301:
      $feed['url'] = $result->redirect_url;
      watchdog('aggregator', t('Updated URL for feed %title to %url.', array('%title' => theme('placeholder', $feed['title']), '%url' => theme('placeholder', $feed['url']))));
      break;

    case 200:
    case 302:
    case 307:
      // Filter the input data:
     if (aggregator_parse_feed($result->data, $feed)) {

        if ($result->headers['Last-Modified']) {
          $modified = strtotime($result->headers['Last-Modified']);
        }

        /*
        ** Prepare the channel data:
        */

        foreach ($channel as $key => $value) {
          $channel[$key] = trim(strip_tags($value));
        }

        /*
        ** Prepare the image data (if any):
        */

        foreach ($image as $key => $value) {
          $image[$key] = trim($value);
        }

        if ($image['LINK'] && $image['URL'] && $image['TITLE']) {
          $image = '<a href="'. $image['LINK'] .'"><img src="'. $image['URL'] .'" alt="'. $image['TITLE'] .'" /></a>';
        }
        else {
          $image = NULL;
        }

        /*
        ** Update the feed data:
        */

        db_query("UPDATE {aggregator_feed} SET url = '%s', checked = %d, link = '%s', description = '%s', image = '%s', etag = '%s', modified = %d WHERE fid = %d", $feed['url'], time(), $channel['LINK'], $channel['DESCRIPTION'], $image, $result->headers['ETag'], $modified, $feed['fid']);

        /*
        ** Clear the cache:
        */

        cache_clear_all();

        watchdog('aggregator', t('There is new syndicated content from %site.', array('%site' => theme('placeholder', $feed[title]))));
        drupal_set_message(t('There is new syndicated content from %site.', array('%site' => theme('placeholder', $feed[title]))));
      }
      break;
    default:
      watchdog('aggregator', t('The RSS-feed from %site seems to be broken, due to "%error".', array('%site' => theme('placeholder', $feed['title']), '%error' => theme('placeholder', $result->code .' '. $result->error))), WATCHDOG_WARNING);
      drupal_set_message(t('The RSS-feed from %site seems to be broken, because of error "%error".', array('%site' => theme('placeholder', $feed['title']), '%error' => theme('placeholder', $result->code .' '. $result->error))));
  }
}

/**
 * Parse the W3C date/time format, a subset of ISO 8601. PHP date parsing
 * functions do not handle this format.
 * See http://www.w3.org/TR/NOTE-datetime for more information.
 * Originally from MagpieRSS (http://magpierss.sourceforge.net/).
 *
 * @param $date_str A string with a potentially W3C DTF date.
 * @return A timestamp if parsed successfully or -1 if not.
 */
function aggregator_parse_w3cdtf($date_str) {
  if (preg_match('/(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2})(:(\d{2}))?(?:([-+])(\d{2}):?(\d{2})|(Z))?/', $date_str, $match)) {
    list($year, $month, $day, $hours, $minutes, $seconds) = array($match[1], $match[2], $match[3], $match[4], $match[5], $match[6]);
    // calc epoch for current date assuming GMT
    $epoch = gmmktime($hours, $minutes, $seconds, $month, $day, $year);
    if ($match[10] != 'Z') { // Z is zulu time, aka GMT
      list($tz_mod, $tz_hour, $tz_min) = array($match[8], $match[9], $match[10]);
      // zero out the variables
      if (!$tz_hour) {
        $tz_hour = 0;
      }
      if (!$tz_min) {
        $tz_min = 0;
      }
      $offset_secs = (($tz_hour * 60) + $tz_min) * 60;
      // is timezone ahead of GMT?  then subtract offset
      if ($tz_mod == '+') {
        $offset_secs *= -1;
      }
      $epoch += $offset_secs;
    }
    return $epoch;
  }
  else {
    return -1;
  }
}

function aggregator_parse_feed(&$data, $feed) {
  global $items, $image, $channel;

  // Unset the global variables before we use them:
  unset($GLOBALS['element'], $GLOBALS['item'], $GLOBALS['tag']);
  $items = array();
  $image = array();
  $channel = array();

  // parse the data:
  $xml_parser = drupal_xml_parser_create($data);
  xml_set_element_handler($xml_parser, 'aggregator_element_start', 'aggregator_element_end');
  xml_set_character_data_handler($xml_parser, 'aggregator_element_data');

  if (!xml_parse($xml_parser, $data, 1)) {
    watchdog('aggregator', t('The RSS-feed from %site seems to be broken, due to an error "%error" on line %line.', array('%site' => theme('placeholder', $feed['title']), '%error' => xml_error_string(xml_get_error_code($xml_parser)), '%line' => xml_get_current_line_number($xml_parser))), WATCHDOG_WARNING);
    drupal_set_message(t('The RSS-feed from %site seems to be broken, because of error "%error" on line %line.', array('%site' => theme('placeholder', $feed['title']), '%error' => xml_error_string(xml_get_error_code($xml_parser)), '%line' => xml_get_current_line_number($xml_parser))), 'error');
    return 0;
  }
  xml_parser_free($xml_parser);

  /*
  ** We reverse the array such that we store the first item last,
  ** and the last item first.  In the database, the newest item
  ** should be at the top.
  */

  $items = array_reverse($items);

  foreach ($items as $item) {
    unset($title, $link, $author, $description);

    // Prepare the item:
    foreach ($item as $key => $value) {
      $value = decode_entities(trim($value));
      $value = strip_tags($value, variable_get('aggregator_allowed_html_tags', '<a> <b> <br> <dd> <dl> <dt> <em> <i> <li> <ol> <p> <strong> <u> <ul>'));
      $value = preg_replace('/\Wstyle\s*=[^>]+?>/i', '>', $value);
      $value = preg_replace('/\Won[a-z]+\s*=[^>]+?>/i', '>', $value);
      $item[$key] = $value;
    }
    /*
    ** Resolve the item's title.  If no title is found, we use
    ** up to 40 characters of the description ending at a word
    ** boundary but not splitting potential entities.
    */

    if ($item['TITLE']) {
      $title = $item['TITLE'];
    }
    else {
      $title = preg_replace('/^(.*)[^\w;&].*?$/', "\\1", truncate_utf8($item['DESCRIPTION'], 40));
    }

    /*
    ** Resolve the items link.
    */

    if ($item['LINK']) {
      $link = $item['LINK'];
    }
    elseif ($item['GUID'] && (strncmp($item['GUID'], 'http://', 7) == 0)) {
      $link = $item['GUID'];
    }
    else {
      $link = $feed['link'];
    }

    /**
     * Atom feeds have a CONTENT and/or SUMMARY tag instead of a DESCRIPTION tag
     */
    if ($item['CONTENT']) {
      $item['DESCRIPTION'] = $item['CONTENT'];
    }
    else if ($item['SUMMARY']) {
      $item['DESCRIPTION'] = $item['SUMMARY'];
    }

    /*
    ** Try to resolve and parse the item's publication date.  If no
    ** date is found, we use the current date instead.
    */

    if ($item['PUBDATE']) $date = $item['PUBDATE'];                        // RSS 2.0
    else if ($item['DC:DATE']) $date = $item['DC:DATE'];                   // Dublin core
    else if ($item['DCTERMS:ISSUED']) $date = $item['DCTERMS:ISSUED'];     // Dublin core
    else if ($item['DCTERMS:CREATED']) $date = $item['DCTERMS:CREATED'];   // Dublin core
    else if ($item['DCTERMS:MODIFIED']) $date = $item['DCTERMS:MODIFIED']; // Dublin core
    else $date = 'now';

    $timestamp = strtotime($date); // strtotime() returns -1 on failure
    if ($timestamp < 0) {
      $timestamp = aggregator_parse_w3cdtf($date); // also returns -1 on failure
      if ($timestamp < 0) {
        $timestamp = time(); // better than nothing
      }
    }

    /*
    ** Save this item.  Try to avoid duplicate entries as much as
    ** possible.  If we find a duplicate entry, we resolve it and
    ** pass along it's ID such that we can update it if needed.
    */

    if ($link && $link != $feed['link'] && $link != $feed['url']) {
      $entry = db_fetch_object(db_query("SELECT iid FROM {aggregator_item} WHERE fid = %d AND link = '%s'", $feed['fid'], $link));
    }
    else {
      $entry = db_fetch_object(db_query("SELECT iid FROM {aggregator_item} WHERE fid = %d AND title = '%s'", $feed['fid'], $title));
    }

    if (!valid_input_data($item['DESCRIPTION'])) {
      drupal_set_message(t('The RSS feed from %site seems to be broken, because of suspicious input data.', array('%site' => theme('placeholder', $feed['title']))), 'error');
    }
    else {
      aggregator_save_item(array('iid' => $entry->iid, 'fid' => $feed['fid'], 'timestamp' => $timestamp, 'title' => $title, 'link' => $link, 'author' => $item['AUTHOR'], 'description' => $item['DESCRIPTION']));
    }
  }

  /*
  ** Remove all items that are older than flush item timer:
  */

  $age = time() - variable_get('aggregator_clear', 9676800);
  $result = db_query('SELECT iid FROM {aggregator_item} WHERE fid = %d AND timestamp < %d', $feed['fid'], $age);

  if (db_num_rows($result)) {
    $items = array();
    while ($item = db_fetch_object($result)) {
      $items[] = $item->iid;
    }
    db_query('DELETE FROM {aggregator_category_item} WHERE iid IN ('. implode(', ', $items) .')');
    db_query('DELETE FROM {aggregator_item} WHERE fid = %d AND timestamp < %d', $feed['fid'], $age);
  }

  return 1;
}

function aggregator_save_item($edit) {
  if ($edit['iid'] && $edit['title']) {
    db_query('UPDATE {aggregator_item} SET title = \'%s\', link = \'%s\', author = \'%s\', description = \'%s\' WHERE iid = %d', $edit['title'], $edit['link'], $edit['author'], $edit['description'], $edit['iid']);
  }
  else if ($edit['iid']) {
    db_query('DELETE FROM {aggregator_item} WHERE iid = %d', $edit['iid']);
    db_query('DELETE FROM {aggregator_category_item} WHERE iid = %d', $edit['iid']);
  }
  else if ($edit['title'] && $edit['link']) {
    $edit['iid'] = db_next_id('{aggregator_item}_iid');
    db_query('INSERT INTO {aggregator_item} (iid, fid, title, link, author, description, timestamp) VALUES (%d, %d, \'%s\', \'%s\', \'%s\', \'%s\', %d)', $edit['iid'], $edit['fid'], $edit['title'], $edit['link'], $edit['author'], $edit['description'], $edit['timestamp']);
    // file the items in the categories indicated by the feed
    $categories = db_query('SELECT cid FROM {aggregator_category_feed} WHERE fid = %d', $edit['fid']);
    while ($category = db_fetch_object($categories)) {
      db_query('INSERT INTO {aggregator_category_item} (cid, iid) VALUES (%d, %d)', $category->cid, $edit['iid']);
    }
  }
}

function aggregator_form_category($edit = array()) {
  $form  = form_textfield(t('Title'), 'title', $edit['title'], 60, 64);
  $form .= form_textarea(t('Description'), 'description', $edit['description'], 60, 5);
  $form .= form_submit(t('Submit'));

  if ($edit['cid']) {
    $form .= form_submit(t('Delete'));
    $form .= form_hidden('cid', $edit['cid']);
  }

  return form($form);
}

function aggregator_save_category($edit) {
  if ($edit['cid'] && $edit['title']) {
    db_query('UPDATE {aggregator_category} SET title = \'%s\', description = \'%s\' WHERE cid = %d', $edit['title'], $edit['description'], $edit['cid']);
  }
  else if ($edit['cid']) {
    db_query('DELETE FROM {aggregator_category} WHERE cid = %d', $edit['cid']);
  }
  else if ($edit['title']) {
    // a single unique id for bundles and feeds, to use in blocks
    $next_id = db_next_id('{aggregator_category}_cid');
    db_query('INSERT INTO {aggregator_category} (cid, title, description, block) VALUES (%d, \'%s\', \'%s\', 5)', $next_id, $edit['title'], $edit['description']);
  }
}

function aggregator_form_feed($edit = array()) {
  $period = drupal_map_assoc(array(900, 1800, 3600, 7200, 10800, 21600, 32400, 43200, 64800, 86400, 172800, 259200, 604800, 1209600, 2419200), 'format_interval');

  if ($edit['refresh'] == '') {
    $edit['refresh'] = 3600;
  }

  $form .= form_textfield(t('Title'), 'title', $edit['title'], 60, 64, t('The name of the feed; typically the name of the web site you syndicate content from.'));
  $form .= form_textfield(t('URL'), 'url', $edit['url'], 60, 255, t('The fully-qualified URL of the feed.'));
  $form .= form_select(t('Update interval'), 'refresh', $edit['refresh'], $period, t('The refresh interval indicating how often you want to update this feed.  Requires crontab.'));

  // Handling of categories:
  $options = array();
  $values = array();
  $categories = db_query('SELECT c.cid, c.title, f.fid FROM {aggregator_category} c LEFT JOIN {aggregator_category_feed} f ON c.cid = f.cid AND f.fid = %d ORDER BY title', $edit['fid']);
  while ($category = db_fetch_object($categories)) {
    $options[$category->cid] = $category->title;
    if ($category->fid) $values[] = check_plain($category->cid);
  }
  if ($options) {
    $form .= form_checkboxes(t('Categorize news items'), 'category', $values, $options, t('New items in this feed will be automatically filed in the checked categories as they are received.'));
  }

  // Form buttons:
  $form .= form_submit(t('Submit'));
  if ($edit['fid']) {
    $form .= form_submit(t('Delete'));
    $form .= form_hidden('fid', $edit['fid']);
  }

  return form($form);
}

function aggregator_save_feed($edit) {
  if ($edit['fid']) {
    // an existing feed is being modified, delete the category listings
    db_query('DELETE FROM {aggregator_category_feed} WHERE fid = %d', $edit['fid']);
  }
  if ($edit['fid'] && $edit['title']) {
    db_query('UPDATE {aggregator_feed} SET title = \'%s\', url = \'%s\', refresh = %d WHERE fid = %d', $edit['title'], $edit['url'], $edit['refresh'], $edit['fid']);
  }
  else if ($edit['fid']) {
    $result = db_query('SELECT iid FROM {aggregator_item} WHERE fid = %d', $edit['fid']);
    while ($item = db_fetch_object($result)) {
      $items[] = "iid = $item->iid";
    }
    if ($items) {
      db_query('DELETE FROM {aggregator_category_item} WHERE '. implode(' OR ', $items));
    }
    db_query('DELETE FROM {aggregator_feed} WHERE fid = %d', $edit['fid']);
    db_query('DELETE FROM {aggregator_item} WHERE fid = %d', $edit['fid']);
  }
  else if ($edit['title']) {
    // a single unique id for bundles and feeds, to use in blocks
    $edit['fid'] = db_next_id('{aggregator_feed}_fid');
    db_query('INSERT INTO {aggregator_feed} (fid, title, url, refresh, block) VALUES (%d, \'%s\', \'%s\', %d, 5)', $edit['fid'], $edit['title'], $edit['url'], $edit['refresh']);
  }
  if ($edit['title']) {
    // the feed is being saved, save the categories as well
    if ($edit['category']) {
      foreach ($edit['category'] as $cid) {
        db_query('INSERT INTO {aggregator_category_feed} (fid, cid) VALUES (%d, %d)', $edit['fid'], $cid);
      }
    }
  }
}

function aggregator_get_feed($fid) {
  return db_fetch_array(db_query('SELECT * FROM {aggregator_feed} WHERE fid = %d', $fid));
}

function aggregator_get_category($cid) {
  return db_fetch_array(db_query('SELECT * FROM {aggregator_category} WHERE cid = %d', $cid));
}

function aggregator_view() {
  $result = db_query('SELECT f.*, COUNT(i.iid) AS items FROM {aggregator_feed} f LEFT JOIN {aggregator_item} i ON f.fid = i.fid GROUP BY f.fid, f.title, f.url, f.refresh, f.checked, f.link, f.description, f.etag, f.modified, f.image, f.block ORDER BY f.title');

  $output .= '<h3>'. t('Feed overview') .'</h3>';

  $header = array(t('Title'), t('Items'), t('Last update'), t('Next update'), array('data' => t('Operations'), 'colspan' => '3'));
  $rows = array();
  while ($feed = db_fetch_object($result)) {
    $rows[] = array(l($feed->title, "aggregator/sources/$feed->fid"), format_plural($feed->items, '1 item', '%count items'), ($feed->checked ? t('%time ago', array('%time' => format_interval(time() - $feed->checked))) : t('never')), ($feed->checked ? t('%time left', array('%time' => format_interval($feed->checked + $feed->refresh - time()))) : t('never')), l(t('edit'), "admin/aggregator/edit/feed/$feed->fid"), l(t('remove items'), "admin/aggregator/remove/$feed->fid"), l(t('update items'), "admin/aggregator/update/$feed->fid"));
  }
  $output .= theme('table', $header, $rows);

  $result = db_query('SELECT c.cid, c.title, count(ci.iid) as items FROM {aggregator_category} c LEFT JOIN {aggregator_category_item} ci ON c.cid = ci.cid GROUP BY c.cid, c.title ORDER BY title');

  $output .= '<h3>'. t('Category overview') .'</h3>';

  $header = array(t('Title'), t('Items'), t('Operations'));
  $rows = array();
  while ($category = db_fetch_object($result)) {
    $rows[] = array(l($category->title, "aggregator/categories/$category->cid"), format_plural($category->items, '1 item', '%count items'), l(t('edit'), "admin/aggregator/edit/category/$category->cid"));
  }
  $output .= theme('table', $header, $rows);

  return $output;
}

function aggregator_edit() {

  if ($_POST['op'] == t('Submit')) {
    if (arg(1) == 'categories') {
      aggregator_save_category($_POST['edit']);
      drupal_set_message(t('The category has been updated.'));
    }
    else {
      aggregator_save_feed($_POST['edit']);
      drupal_set_message(t('The feed has been updated.'));
    }

    menu_rebuild();
    drupal_goto($_GET['q']);
  }
  else if ($_POST['op'] == t('Delete')) {
    // Unset the title:
    unset($_POST['edit']['title']);

    if (arg(1) == 'categories') {
      aggregator_save_category($_POST['edit']);
      drupal_set_message(t('The category has been deleted.'));
    }
    else {
      aggregator_save_feed($_POST['edit']);
      drupal_set_message(t('The feed has been deleted.'));
    }

    menu_rebuild();
    drupal_goto('aggregator/'. arg(1));
  }

  if (arg(1) == 'categories') {
    $output = aggregator_form_category(aggregator_get_category(arg(2)));
  }
  else {
    $output = aggregator_form_feed(aggregator_get_feed(arg(2)));
  }

  return $output;
}


/**
 * Menu callback; displays the category edit form, or saves changes and
 * redirects to the overview page.
 */
function aggregator_admin_edit_category($category = 0) {
  $edit = $_POST['edit'];
  $op = $_POST['op'];

  switch ($op) {
    case t('Delete'):
      $edit['title'] = 0;
      // Fall through:
    case t('Submit'):
      aggregator_save_category($edit);
      drupal_set_message($edit['title'] ? t('The category has been updated.') : t('The category has been removed.'));
      menu_rebuild();
      drupal_goto('admin/aggregator');
      break;
    default:
      if ($category) {
        $output = aggregator_form_category(aggregator_get_category($category));
      }
      else {
        $output = aggregator_form_category();
      }
  }
  return $output;
}

/**
 * Menu callback; displays the feed edit form.
 *
 * After editing, saves changes and redirects to the overview page.
 */
function aggregator_admin_edit_feed($feed = 0) {
  $edit = $_POST['edit'];
  $op = $_POST['op'];

  switch ($op) {
    case t('Delete'):
      $edit['title'] = 0;
      // Fall through:
    case t('Submit'):
      aggregator_save_feed($edit);
      drupal_set_message($edit['title'] ? t('The feed has been updated.') : t('The feed has been removed.'));
      menu_rebuild();
      drupal_goto('admin/aggregator');
      break;
    default:
      if ($feed) {
        $output = aggregator_form_feed(aggregator_get_feed($feed));
      }
      else {
        $output = aggregator_form_feed();
      }
  }
  return $output;
}

/**
 * Menu callback; removes all items from a feed, then redirects to the overview page.
 */
function aggregator_admin_remove_feed($feed) {
  aggregator_remove(aggregator_get_feed($feed));
  drupal_goto('admin/aggregator');
}

/**
 * Menu callback; refreshes a feed, then redirects to the overview page.
 */
function aggregator_admin_refresh_feed($feed) {
  aggregator_refresh(aggregator_get_feed($feed));
  drupal_goto('admin/aggregator');
}

/**
 * Menu callback; displays the aggregator administration page.
 */
function aggregator_admin_overview() {
  return aggregator_view();
}

/**
 * Menu callback; displays the most recent items gathered from any feed.
 */
function aggregator_page_last() {
  return _aggregator_page_list('SELECT i.*, f.title AS ftitle, f.link AS flink FROM {aggregator_item} i INNER JOIN {aggregator_feed} f ON i.fid = f.fid ORDER BY i.timestamp DESC, i.iid DESC', arg(1));
}

/**
 * Menu callback; displays all the items captured from a particular feed.
 */
function aggregator_page_source() {
  $feed = db_fetch_object(db_query('SELECT * FROM {aggregator_feed} WHERE fid = %d', arg(2)));
  $info = theme('aggregator_feed', $feed);

  return _aggregator_page_list('SELECT * FROM {aggregator_item} WHERE fid = '. $feed->fid .' ORDER BY timestamp DESC, iid DESC', arg(3), "<div class=\"feed\">$info</div>");
}

/**
 * Menu callback; displays all the items aggregated in a particular category.
 */
function aggregator_page_category() {
  $category = db_fetch_object(db_query('SELECT cid, title FROM {aggregator_category} WHERE cid = %d', arg(2)));

  return _aggregator_page_list('SELECT i.*, f.title AS ftitle, f.link AS flink FROM {aggregator_category_item} c LEFT JOIN {aggregator_item} i ON c.iid = i.iid LEFT JOIN {aggregator_feed} f ON i.fid = f.fid WHERE cid = '. $category->cid .' ORDER BY timestamp DESC, iid DESC', arg(3));
}

/**
 * Prints an aggregator page listing a number of feed items. Various
 * menu callbacks use this function to print their feeds.
 */
function _aggregator_page_list($sql, $op, $header = '') {
  if (user_access('administer news feeds') && $op == 'categorize') {
    if ($edit = $_POST['edit']) {
      foreach ($edit['categories'] as $iid => $selection) {
        db_query('DELETE FROM {aggregator_category_item} WHERE iid = %d', $iid);
        foreach ($selection as $cid) {
          if ($cid) {
            db_query('INSERT INTO {aggregator_category_item} (cid, iid) VALUES (%d, %d)', $cid, $iid);
          }
        }
      }
      drupal_set_message(t('The categories have been saved.'));
      drupal_goto($_GET['q']);
    }
    else {
      $categorize = true;
    }
  }

  $output = '<div id="aggregator">';
  if ($header) {
    $output .= $header;
  }
  if ($links) {
    $output .= theme('links', $links);
  }

  $result = pager_query($sql, 20);

  $rows = array();
  $categories = array();
  while ($item = db_fetch_object($result)) {
    if ($categorize) {
      $categories_result = db_query('SELECT c.cid, c.title, ci.iid FROM {aggregator_category} c LEFT JOIN {aggregator_category_item} ci ON c.cid = ci.cid AND ci.iid = %d', $item->iid);
      if (variable_get('aggregator_category_selector', 'check') == 'select') {
        $selected = array();
        while ($category = db_fetch_object($categories_result)) {
          if (!$done) {
            $categories[$category->cid] = check_plain($category->title);
          }
          if ($category->iid) {
            $selected[] = $category->cid;
          }
        }
        $done = true;
        $form = form_select(NULL, 'categories]['. $item->iid, $selected, $categories, NULL, 'size="10"', true);
      }
      else {
        $form = '';
        while ($category = db_fetch_object($categories_result)) {
          $form .= form_checkbox(check_plain($category->title), 'categories]['. $item->iid .'][', $category->cid, !is_null($category->iid));
        }
      }
      $rows[] = array(theme('aggregator_page_item', $item), array('data' => $form, 'class' => 'categorize-item'));
    }
    else {
      $output .= theme('aggregator_page_item', $item);
    }
  }
  if ($categorize) {
    $output .= form(theme('table', array('', t('Categorize')), $rows) . form_submit(t('Save categories')));
  }
  $output .= '</div>';

  if ($pager = theme('pager', NULL, 20, 0)) {
    $output .= $pager;
  }

  // arg(1) is undefined if we are at the top aggregator URL
  // is there a better way to do this?
  if (!arg(1)) {
    $output .= theme('xml_icon', url('aggregator/rss'));
  }
  elseif (arg(1) == 'categories' && arg(2) && !arg(3)) {
    $output .= theme('xml_icon', url('aggregator/rss/' . arg(2)));
  }

  return $output;
}

/**
 * Menu callback; displays all the feeds used by the aggregator.
 */
function aggregator_page_sources() {
  $result = db_query('SELECT f.fid, f.title, f.description, f.image, MAX(i.timestamp) AS last FROM {aggregator_feed} f LEFT JOIN {aggregator_item} i ON f.fid = i.fid GROUP BY f.fid, f.title, f.description, f.image');
  $output = "<div id=\"aggregator\">\n";
  while ($feed = db_fetch_object($result)) {
    $output .= '<h2>'. check_plain($feed->title) ."</h2>\n";

    // Most recent items:
    $list = array();
    if (variable_get('aggregator_summary_items', 3)) {
      $items = db_query_range('SELECT i.title, i.timestamp, i.link FROM {aggregator_item} i WHERE i.fid = %d ORDER BY i.timestamp DESC', $feed->fid, 0, variable_get('aggregator_summary_items', 3));
      while ($item = db_fetch_object($items)) {
        $list[] = theme('aggregator_summary_item', $item);
      }
    }
    $output .= theme('item_list', $list);
    $output .= '<div class="links">'. theme('links', array(l(t('more'), 'aggregator/sources/'. $feed->fid))) ."</div>\n";
  }
  $output .= theme('xml_icon', url('aggregator/opml'));
  $output .= '</div>';
  return $output;
}

/**
 * Menu callback; generate an RSS 0.92 feed of aggregator items or categories.
 */
function aggregator_page_rss() {
  global $base_url;

  // arg(2) is the passed cid, only select for that category
  $result = NULL;
  if (arg(2)) {
    $category = db_fetch_object(db_query('SELECT cid, title FROM {aggregator_category} WHERE cid = %d', arg(2)));
    $url = '/categories/' . $category->cid;
    $title = ' ' . t('in category') . ' ' . $category->title;
    $sql = 'SELECT i.*, f.title AS ftitle, f.link AS flink FROM {aggregator_category_item} c LEFT JOIN {aggregator_item} i ON c.iid = i.iid LEFT JOIN {aggregator_feed} f ON i.fid = f.fid WHERE cid = %d ORDER BY timestamp DESC, iid DESC';
    $result = db_query_range($sql, $category->cid, 0, 15);
  }
  // or, get the default aggregator items
  else {
    $sql = 'SELECT i.*, f.title AS ftitle, f.link AS flink FROM {aggregator_item} i INNER JOIN {aggregator_feed} f ON i.fid = f.fid ORDER BY i.timestamp DESC, i.iid DESC';
    $result = db_query_range($sql, 0, 15);
  }

  while ($item = db_fetch_object($result)) {
    $items .= format_rss_item($item->ftitle . ': ' . $item->title, $item->link, $item->description, array('pubDate' => date('r', $item->timestamp)));
  }

  $output .= "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n";
  $output .= "<!DOCTYPE rss [<!ENTITY % HTMLlat1 PUBLIC \"-//W3C//ENTITIES Latin 1 for XHTML//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml-lat1.ent\">]>\n";
  $output .= "<rss version=\"0.92\">\n";
  $output .= format_rss_channel(variable_get('site_name', t('Drupal')) . ' ' . t('aggregator'), $base_url . '/' . url('aggregator' . $url), variable_get('site_name', t('Drupal')) . ' - ' . t('aggregated feeds') . $title, $items, 'en');
  $output .= "</rss>\n";

  drupal_set_header('Content-Type: text/xml; charset=utf-8');
  print $output;
}

/**
 * Menu callback; generates an OPML representation of all feeds.
 */
function aggregator_page_opml($cid = NULL) {
  if ($cid) {
    $result = db_query('SELECT f.title, f.url FROM {aggregator_feed} f LEFT JOIN {aggregator_category_feed} c on f.fid = c.fid WHERE c.cid = %d ORDER BY title', $cid);
  }
  else {
    $result = db_query('SELECT * FROM {aggregator_feed} ORDER BY title');
  }

  $output = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n";
  $output .= "<opml version=\"1.1\">\n";
  $output .= "<head>\n";
  $output .= '<title>'. check_plain(variable_get('site_name', 'Drupal')) ."</title>\n";
  $output .= '<dateModified>'. gmdate('r') ."</dateModified>\n";
  $output .= "</head>\n";
  $output .= "<body>\n";

  while ($feed = db_fetch_object($result)) {
    $output .= '<outline text="'. check_plain($feed->title) .'" xmlUrl="'. check_url($feed->url) ."\" />\n";
  }

  $output .= "</body>\n";
  $output .= "</opml>\n";

  drupal_set_header('Content-Type: text/xml; charset=utf-8');
  print $output;
}

/**
 * Menu callback; displays all the categories used by the aggregator.
 */
function aggregator_page_categories() {
  $result = db_query('SELECT c.cid, c.title, c.description FROM {aggregator_category} c LEFT JOIN {aggregator_category_item} ci ON c.cid = ci.cid LEFT JOIN {aggregator_item} i ON ci.iid = i.iid GROUP BY c.cid, c.title, c.description');
  $output = "<div id=\"aggregator\">\n";

  while ($category = db_fetch_object($result)) {
    $output .= '<h2>'. check_plain($category->title) ."</h2>\n";
    if (variable_get('aggregator_summary_items', 3)) {
      $list = array();
      $items = db_query_range('SELECT i.title, i.timestamp, i.link, f.title as feed_title, f.link as feed_link FROM {aggregator_category_item} ci LEFT JOIN {aggregator_item} i ON i.iid = ci.iid LEFT JOIN {aggregator_feed} f ON i.fid = f.fid WHERE ci.cid = %d ORDER BY i.timestamp DESC', $category->cid, 0, variable_get('aggregator_summary_items', 3));
      while ($item = db_fetch_object($items)) {
        $list[] = theme('aggregator_summary_item', $item);
      }
      $output .= theme('item_list', $list);
    }
    $output .= '<div class="links">'. theme('links', array(l(t('more'), 'aggregator/categories/'. $category->cid))) ."</div>\n";
  }
  $output .= '</div>';

  return $output;
}

/**
 * Format a news feed.
 *
 * @ingroup themeable
 */
function theme_aggregator_feed($feed) {
  $output  = '';

  if ($feed->image) {
    $output .= $feed->image;
  }

  $output .= $feed->description;
  $output .= '<h3>'. t('URL') ."</h3>\n";
  $output .= theme('xml_icon', $feed->url);
  $output .= '<a href="'. check_url($feed->link) .'">'. check_plain($feed->link) ."</a>\n";
  $output .= '<h3>'. t('Last update') ."</h3>\n";
  $updated = t('%time ago', array('%time' => format_interval(time() - $feed->checked)));

  if (user_access('administer news feeds')) {
    $output .= l($updated, 'admin/aggregator');
  }
  else {
    $output .= $updated;
  }

  return $output;
}

/**
 * Format an individual feed item for display in the block.
 *
 * @ingroup themeable
 */
function theme_aggregator_block_item($item, $feed = 0) {
  global $user;

  if ($user->uid && module_exist('blog') && user_access('edit own blog')) {
    if ($image = theme('image', 'misc/blog.png', t('blog it'), t('blog it'))) {
      $output .= '<div class="icon">'. l($image, 'node/add/blog', array('title' => t('Comment on this news item in your personal blog.'), 'class' => 'blog-it'), "iid=$item->iid", NULL, FALSE, TRUE) .'</div>';
    }
  }

  // Display the external link to the item.
  $output .= '<a href="'. check_url($item->link) .'">'. check_plain($item->title) ."</a>\n";

  return $output;
}

/**
 * Return a themed item heading for summary pages located at "aggregator/sources"
 * and "aggregator/categories".
 *
 * @param $item The item object from the aggregator module.
 * @return A string containing the output.
 *
 * @ingroup themeable
 */
function theme_aggregator_summary_item($item) {
  $output = '<a href="'. check_url($item->link) .'">'. check_plain($item->title) .'</a> <span class="age">'. t('%age old', array('%age' => format_interval(time() - $item->timestamp))) .'</span>';
  if ($item->feed_link) {
    $output .= ', <span class="source"><a href="'. $item->feed_link .'">'. $item->feed_title .'</a></span>';
  }
  return $output ."\n";
}

/**
 * Format an individual feed item for display on the aggregator page.
 *
 * @ingroup themeable
 */
function theme_aggregator_page_item($item) {
  static $last;

  $date = format_date($item->timestamp, 'custom', 'Ymd');
  if ($date != $last) {
    $last = $date;
    $output .= '<h3>'. format_date($item->timestamp, 'custom', 'F j, Y') ."</h3>\n";
  }

  $output .= "<div class=\"news-item\">\n";
  $output .= ' <div class="date">'. format_date($item->timestamp, 'custom', 'H:i') ."</div>\n";
  $output .= " <div class=\"body\">\n";

  $source = '';
  if ($item->ftitle && $item->fid) {
    $source = '<span class="source">'. l($item->ftitle, "aggregator/sources/$item->fid") .":</span>\n";
  }

  $output .= '  <div class="title">'. $source .'<a href="'. check_url($item->link) .'">'. check_plain($item->title) ."</a></div>\n";

  if ($item->description) {
    $output .= '  <div class="description">'. $item->description ."</div>\n";
  }

  $result = db_query('SELECT c.title, c.cid FROM {aggregator_category_item} ci LEFT JOIN {aggregator_category} c ON ci.cid = c.cid WHERE ci.iid = %d ORDER BY c.title', $item->iid);
  $categories = array();
  while ($category = db_fetch_object($result)) {
    $categories[] = l($category->title, 'aggregator/categories/'. $category->cid);
  }
  if ($categories) {
    $output .= '  <div class="categories">'. t('Categories') .': '. implode(', ', $categories) ."</div>\n";
  }

  $output .= " </div>\n";
  $output .= "</div>\n";

  return $output;
}


