<?php

$module = array("find" => "book_find",
                "type" => "book_type",
                "page" => "book_page",
                "user" => "book_user",
                "admin" => "book_admin",
                "export" => "book_export");

class Book {
  function Book($nid, $userid, $title, $body, $parent, $weight, $timestamp) {
    $this->nid = $nid;
    $this->userid = $userid;
    $this->title = $title;
    $this->body = $body;
    $this->parent = $parent;
    $this->weight = $weight;
    $this->timestamp = $timestamp;
  }
}

function book_status() {
  return array(dumped, expired, queued, posted);
}

function book_location($node, $nodes = array()) {
  $parent = db_fetch_object(db_query("SELECT n.nid, n.title, b.parent FROM node n LEFT JOIN book b ON n.nid = b.nid AND n.lid = b.lid WHERE n.nid = '$node->parent'"));
  if ($parent->title) {
    $nodes = book_location($parent, $nodes);
    array_push($nodes, $parent);
  }
  return $nodes;
}

function book_type() {
  return array("book", t("book page"));
}

function book_view($node, $main = 0) {
  global $theme;

  if ($node->nid && $node->parent) {
    $next = db_fetch_object(db_query("SELECT n.nid, n.title FROM node n LEFT JOIN book b ON n.nid = b.nid AND n.lid = b.lid WHERE b.parent = '$node->parent' AND b.weight > '$node->weight' ORDER BY b.weight ASC"));
    $prev = db_fetch_object(db_query("SELECT n.nid, n.title FROM node n LEFT JOIN book b ON n.nid = b.nid AND n.lid = b.lid WHERE b.parent = '$node->parent' AND b.weight < '$node->weight' ORDER BY b.weight DESC"));
  }

  $output .= "<TABLE BORDER=\"0\" CELLPADDING=\"0\" CELLSPACING=\"0\" WIDTH=\"100%\">\n";

  if ($node->title) {
    foreach (book_location($node) as $level) {
      $location .= "$indent <A HREF=\"node.php?id=$level->nid\">$level->title</A><BR>";
      $indent .= "-";
    }

    $output .= " <TR><TD COLSPAN=\"2\">$location</TD><TD ALIGN=\"right\">". node_control($node) ."</TD></TR>\n";
    $output .= " <TR><TD COLSPAN=\"3\"><HR></TD></TR>";
    $output .= " <TR><TD COLSPAN=\"3\"><B><BIG>". check_output($node->title) ."</BIG></B>". ($node->body ? "<BR><SMALL><I>Last updated by ". format_username($node->userid) ." on ". format_date($node->timestamp) ."</I></SMALL> " : "") ."</TD></TR>\n";
  }

  if ($node->body) {
    $output .= " <TR><TD COLSPAN=\"3\"><BR>". check_output($node->body, 1) ."</TD></TR>";
  }

  $output .= " <TR><TD COLSPAN=\"3\"><BR>". book_tree($node->nid) ."</TD></TR>";
  $output .= " <TR><TD COLSPAN=\"3\"><HR></TD></TR>";
  $output .= " <TR><TD ALIGN=\"left\" WIDTH=\"33%\">". ($prev ? "<A HREF=\"node.php?id=$prev->nid\">". t("previous") ."</A>" : t("previous")) ."</TD><TD ALIGN=\"center\" WIDTH=\"34%\"><A HREF=\"module.php?mod=book\">index</A></TD><TD ALIGN=\"right\" WIDTH=\"33%\">". ($next ? "<A HREF=\"node.php?id=$next->nid\">". t("next") ."</A>" : t("next")) ."</TD></TR>\n";
  $output .= " <TR><TD ALIGN=\"left\" WIDTH=\"33%\">". ($prev ? "<SMALL>". check_output($prev->title) ."</SMALL>" : "&nbsp;") ."</TD><TD ALIGN=\"center\" WIDTH=\"34%\">". ($node->parent ? "<A HREF=\"node.php?id=$node->parent\">". t("up") ."</A>" : t("up")) ."</TD><TD ALIGN=\"right\" WIDTH=\"33%\">". ($next ? "<SMALL>". check_output($next->title) ."</SMALL>" : "&nbsp;") ."</TD></TR>\n";
  $output .= "</TABLE>\n";

  $theme->box(t("Handbook"), $output);
}

function book_find($keys) {
  global $status, $user;
  $find = array();
  $result = db_query("SELECT n.*, u.userid FROM node n LEFT JOIN book b ON n.nid = b.nid AND n.lid = b.lid LEFT JOIN users u ON n.author = u.id WHERE n.type = 'book' AND n.status = '$status[posted]' AND (n.title LIKE '%". check_input($keys) ."%' OR b.body LIKE '%". check_input($keys) ."%') ORDER BY n.timestamp DESC LIMIT 20");
  while ($node = db_fetch_object($result)) {
    array_push($find, array("title" => check_output($node->title), "link" => (user_access($user, "book") ? "admin.php?mod=book&op=edit&id=$node->nid" : "node.php?id=$node->nid"), "user" => $node->userid, "date" => $node->timestamp));
  }
  return $find;
}

function book_toc($parent = 0, $indent = "", $toc = array()) {
  global $status;
  $result = db_query("SELECT n.*, b.* FROM node n LEFT JOIN book b ON n.nid = b.nid AND n.lid = b.lid WHERE n.type = 'book' AND n.status = '$status[posted]' AND b.parent = '$parent' ORDER BY b.weight");
  while ($node = db_fetch_object($result)) {
    $toc[$node->nid] = "$indent $node->title";
    if ($node->pid) $toc = book_toc($node->pid, "$indent-", $toc);
    $toc = book_toc($node->nid, "$indent-", $toc);
  }
  return $toc;
}

function book_form($edit = array()) {
  global $allowed_html, $REQUEST_URI, $user;

  $form .= form_item(t("Author"), format_username(($edit[userid] ? $edit[userid] : $user->userid)));
  $form .= form_hidden(userid, $edit[userid]);
  $form .= form_textfield(t("Subject"), "title", $edit[title], 50, 64);
  $form .= form_item(t("Category"), category_form_select("book", $edit));

  if ($edit[pid]) {
    $node = node_get_object("nid", $edit[pid]);
    $form .= form_item(t("Parent"), "<A HREF=\"node.php?id=$node->id\">". check_output($node->title) ."</A>", t("The parent subject or category the page belongs in."));
    $form .= form_hidden("parent". $edit[parent]);
  }
  else {
    $form .= form_select(t("Parent"), "parent", $edit[parent], user_access($user, "book") ? array_merge(array(0 => "&nbsp;"), book_toc()) : book_toc(), t("The parent subject or category the page belongs in."));
  }

  $form .= form_textarea(t("Content"), "body", $edit[body], 50, 10, t("Allowed HTML tags") .": ". htmlspecialchars($allowed_html));
  $form .= form_textarea(t("Log message"), "log", $edit[log], 50, 5, t("An explanation of the additions or updates being made to help the group understand your motivations."));

  if (user_access($user, "book")) {
    $form .= form_select(t("Weight"), "weight", $edit[weight], array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30), t("The heavier nodes will sink and the lighter nodes will be positioned nearer the top."));
  }

  $form .= form_hidden("pid", $edit[pid]);
  $form .= form_hidden("nid", $edit[nid]);

  if (!$edit) {
    $form .= form_submit(t("Preview"));
  }
  else if (!$edit[title]) {
    $form .= "<FONT COLOR=\"red\">". t("Warning: you did not supply a title.") ."</FONT><P>\n";
    $form .= form_submit(t("Preview"));
  }
  else {
    $form .= form_submit(t("Preview"));
    $form .= form_submit(t("Submit"));
  }

  return form($REQUEST_URI, $form);
}

function book_save($edit) {
  node_save(array_diff(array_merge($edit, array(nid => $edit[nid], type => "book")), array(userid => $edit[userid])));
}

function book_tree($parent = "", $depth = 0) {
  global $PHP_SELF, $status;

  if (($depth < 3) || (strstr($PHP_SELF,"admin.php"))) {
    $result = db_query("SELECT n.*, b.* FROM node n LEFT JOIN book b ON n.nid = b.nid AND n.lid = b.lid WHERE n.type = 'book' AND n.status = '$status[posted]' AND b.parent = '$parent' ORDER BY b.weight");
    $output .= "<UL>";
    while ($node = db_fetch_object($result)) {
      $output .= "<LI><A HREF=\"node.php?id=$node->nid\">". check_output($node->title) ."</A>";
      if ($PHP_SELF == "/admin.php") $output .= " <SMALL>(weight: $node->weight/$node->parent, status: $node->status) (<A HREF=\"admin.php?mod=book&op=edit&id=$node->nid\">edit</A>)</SMALL>\n";
      if ($node->pid) $output .= book_tree($node->pid, $depth + 1);
      $output .= book_tree($node->nid, $depth + 1);
    }
    $output .= "</UL>";
  }
  return $output;
}

function book_list($query = array()) {
  return node_overview($query);
}

function book_query($type = "") {
  global $status;
  $queries =  array(array("recent book pages", "WHERE n.type = 'book' ORDER BY n.timestamp DESC"), array("posted book pages", "WHERE n.type = 'book' AND n.status = '$status[posted]' ORDER BY n.timestamp DESC"), array("queued book pages", "WHERE n.type = 'book' AND n.status = '$status[queued]' ORDER BY n.timestamp DESC"), array("dumped book pages", "WHERE n.type = 'book' AND n.status = '$status[dumped]' ORDER BY n.timestamp DESC"));
  return ($queries[$type] ? $queries[$type] : $queries);
}

function book_admin() {
  global $op, $id, $edit, $mod, $keys, $type, $user;

  print "<SMALL><A HREF=\"admin.php?mod=book&op=add\">add new page</A> | <A HREF=\"admin.php?mod=book&op=listing\">book listing</A> | <A HREF=\"admin.php?mod=book&op=search\">search book</A> | <A HREF=\"admin.php?mod=book\">list overview</A> | <A HREF=\"admin.php?mod=book&op=tree\">tree overview</A></SMALL><HR>\n";

  $type = $type ? $type : 0;

  switch ($op) {
    case "add":
      print book_form();
      break;
    case "edit":
      print book_form(node_get_array(nid, $id));
      break;
    case "listing":
      print node_listing(book_query());
      break;
    case "search":
      print search_form($keys);
      print search_data($keys, $mod);
      break;
    case "tree":
      print book_tree();
      break;
    case t("Preview"):
      book_view(new Book(($edit[nid] ? $edit[nid] : -1), ($edit[userid] ? $edit[userid] : $user->userid), $edit[title], $edit[body], $edit[parent], $edit[weight], ($edit[timestamp] ? $edit[timestamp] : time())));
      print book_form($edit);
      break;
    case t("Submit"):
      book_save($edit);
      // fall through:
    default:
      print book_list(book_query($type));
  }
}

function book_page() {
  global $status, $theme;

  $result = db_query("SELECT n.*, b.* FROM node n LEFT JOIN book b ON n.nid = b.nid AND n.lid = b.lid WHERE b.parent = 0 AND n.status = $status[posted] ORDER BY b.weight");

  while ($node = db_fetch_object($result)) {
    $output .= "<DT><A HREF=\"node.php?id=$node->nid\">". check_output($node->title) ."</A></DT><DD>". check_output($node->body, 1) ."<BR><BR></DD>";
  }

  $theme->header();
  $theme->box(t("Handbook"), "<DL>$output</DL>");
  $theme->footer();
}

function book_update($id) {
  global $status;

  if ($node = node_get_object("nid", $id)) {
    if ($node->status != $status[posted]) {
      return t("You can only update accepted pages: pages that are still queued or already expired can not be updated.");
    }
    else if (db_result(db_query("SELECT COUNT(nid) FROM node WHERE pid = '$node->nid' AND status = '$status[queued]'"))) {
      return t("There is already an update for this node in the queue: we can only process one update at once.");
    }
    else {
      return book_form(array(nid => -1, pid => $id, title => $node->title, body => $node->body, parent => $node->parent));
    }
  }
}

function book_user() {
  global $edit, $id, $op, $theme, $user;

  $title = t("Submit");

  switch($op) {
    case "update":
      $theme->box($title, book_update($id));
      break;
    case t("Preview"):
      book_view(new Book(($edit[nid] ? $edit[nid] : -1), $user->userid, $edit[title], $edit[body], $edit[parent], $edit[weight], ($edit[timestamp] ? $edit[timestamp] : time())));
      $theme->box($title, book_form($edit));
      break;
    case t("Submit"):
      book_save($edit);
      $theme->box($title, t("Thank you for your submission."));
      break;
    default:
      $theme->box($title, book_form());
  }
}

function book_export_html($parent = "", $depth = 0) {
  global $status;

  $result = db_query("SELECT n.*, b.* FROM node n LEFT JOIN book b ON n.nid = b.nid AND n.lid = b.lid WHERE n.type = 'book' AND n.status = '$status[posted]' AND b.parent = '$parent' ORDER BY b.weight");

  while ($node = db_fetch_object($result)) {
    $output .= "<H$depth>". check_output($node->title) ."</H$depth>";
    if ($node->body) $output .= check_output($node->body, 1);
    if ($node->pid) $output .= book_export_html($node->pid, $depth + 1);
    $output .= book_export_html($node->nid, $depth + 1);
  }
  return $output;
}

function book_export($uri) {
  if ($uri[2] == "book") {
    print book_export_html($uri[3], $depth = 1);
  }
}

?>
