<?php
// $Id$

function book_system($field){
  $system["description"] = t("Allows users to collaboratively author a book.");
  return $system[$field];
}

function book_node($field) {
  global $user;

  $info["name"] = t("book page");
  $info["description"] = t("A book is a collaborative writing effort: users can collaborate writing the pages of the book, positioning the pages in the right order, and reviewing or modifying pages previously written.  So when you have some information to share or when you read a page of the book and you didn't like it, or if you think a certain page could have been written better, you can do something about it.");

  return $info[$field];
}

function book_perm() {
  return array("maintain books");
}

function book_access($op, $node) {
  global $user;

  if ($op == "view") {
    /*
    ** Everyone can access all published book pages whether these pages
    ** are still waiting for approval or not.  We might not always want
    ** to display pages that are waiting for approval, but we take care
    ** of that problem in the book_view() function.
    */

    return $node->status;
  }

  if ($op == "create") {
    /*
    ** Only registered users can create book pages.  Given the nature
    ** of the book module this is considered to be a good/safe idea.
    */

    return user_access("maintain books");
  }

  if ($op == "update") {
    /*
    ** Only registered users can update book pages.  Given the nature
    ** of the book module this is considered to be a good/safe idea.
    ** One can only upate a book page if there are no suggested updates
    ** of that page waiting for approval, when it is not a PHP-page and
    ** as long as the "create new revision"-bit is set.  That is, only
    ** updates that don't overwrite the current or pending information
    ** are allowed.
    */

    return user_access("maintain books") && !$node->moderate && !$node->format && $node->revision;
  }
}

function book_link($type, $node = 0, $main = 0) {

  $links = array();

  if ($type == "page" && user_access("access content")) {
    $links[] = l(t("collaborative book"), "book", array("title" => t("Read and contribute to the collaborative books.")));
  }

  if ($type == "menu.create" && user_access("maintain books")) {
    $links[] = l(t("create book page"), "node/add/book", array("title" => t("Add a new book page.")));
  }

  if ($type == "node" && $node->type == "book") {
    if (book_access("update", $node)) {
      $links[] = l(t("edit this page"), "node/edit/$node->nid", array("title" => t("Suggest an update for this book page.")));
    }
    if (!$main) {
      $links[] = l(t("printer-friendly version"), "book/print/$node->nid", array("title" => t("Show a printer-friendly version of this book page and its sub-pages.")));
    }
  }

  if ($type == "admin" && user_access("maintain books")) {
    $help["book"] = "The collaborative book offers a mean to organize content, authored by many users, in an online manual, outline or FAQ.";
    $help["orphan"] = "Pages in a book are like a tree. As pages are edited, reorganized and removed, child pages might be left with no link to the rest of the book.  Such pages are refered to as 'orphan pages'.  On this page, administrators can review their books for orphans and reattach those pages as desired.";

    menu("admin/node/book", "collaborative books", "book_admin", $help["book"], 4);
    menu("admin/node/book/orphan", "orphan pages", "book_admin", $help["orphan"], 8);
    menu("admin/node/book/help", "help", "book_help", NULL, 9);

    $result = db_query("SELECT n.nid, n.title FROM node n INNER JOIN book b ON n.nid = b.nid WHERE b.parent = 0 ORDER BY b.weight, n.title");
    while ($book = db_fetch_object($result)) {
      menu("admin/node/book/$book->nid", "'$book->title' book", "book_admin");
    }
  }

  return $links;
}

function book_load($node) {
  global $user;

  $book = db_fetch_object(db_query("SELECT format, parent, weight, log FROM book WHERE nid = %d", $node->nid));

  if (strstr(request_uri(), "node/edit")) {

    /*
    ** If a user is about to update a book page, we overload some
    ** fields to reflect the changes.  We use the request URI to
    ** dectect this as we don't want to interfer with updating a
    ** book page through the admin pages.  See also: book_save().
    */

    if ($user->uid) {
      $book->uid = $user->uid;
      $book->name = $user->name;
    }
    else {
      $book->uid = 0;
      $book->name = "";
    }
  }

  /*
  ** We set the revision field to indicate that we have to create
  ** a new revision when updating this book page.  We enable this
  ** always such that the "edit this page"-links appear.
  */

  $book->revision = 1;

  return $book;
}

function book_insert($node) {
  db_query("INSERT INTO book (nid, format, parent, weight, log) VALUES (%d, %d, %d, %d, '%s')", $node->nid, $node->format, $node->parent, $node->weight, $node->log);
}

function book_update($node) {
  db_query("UPDATE book SET format = %d, parent = %d, weight = %d, log = '%s' WHERE nid = %d", $node->format, $node->parent, $node->weight, $node->log, $node->nid);
}

function book_delete(&$node) {
  db_query("DELETE FROM book WHERE nid = %d", $node->nid);
}

function book_validate(&$node) {
  if ($node->format && user_access("create php content")) {
    // Do not filter PHP code, do not auto-extract a teaser
    $node->teaser = $node->body;
  }
  else {
    $node->format = 0;
  }

  // Set default values for non administrators:
  if (!user_access("administer nodes")) {
    $node->format = 0;
    $node->weight = 0;
    $node->revision = 1;
  }
}

function book_form(&$node, &$help, &$error) {
  global $user;

  $op = $_POST["op"];
  $output = form_select(t("Parent"), "parent", $node->parent, book_toc(), t("The parent subject or category the page belongs in."));

  if (function_exists("taxonomy_node_form")) {
    $output .= implode("", taxonomy_node_form("book", $node));
  }

  $output .= form_textarea(t("Body"), "body", $node->body, 60, 20, form_allowed_tags_text());
  $output .= form_textarea(t("Log message"), "log", $node->log, 60, 5, t("An explanation of the additions or updates being made to help the group understand your motivations."));

  if (user_access("administer nodes")) {
    $output .= form_weight(t("Weight"), "weight", $node->weight, 15, t("The heavier pages will sink and the lighter pages will be positioned nearer the top."));
    if (user_access("create php content")) {
      $output .= form_select("Type", "format", $node->format, array(0 => "HTML / text", 1 => "PHP"));
    }
  }
  else {

    /*
    ** Carry out some explanation or submission guidelines:
    */

    $help = book_node("description");

    /*
    ** If a regular user updates a book page, we create a new revision
    ** authored by that user:
    */

    $output .= form_hidden("revision", 1);
  }

  return $output;
}

function book_node_link($node = 0) {
  global $user;

  $op = $_POST["op"];
  $edit = $_POST["edit"];

  if ($node->type != "book") {

    if ($edit["nid"]) {
      $node = node_load(array("nid" => $edit["nid"]));
    }

    if ($op == t("Add to book outline")) {
      db_query("INSERT INTO book (nid, parent, weight) VALUES (%d, %d, %d)", $node->nid, $edit["parent"], $edit["weight"]);
      $output .= status(t("added the node to the book."));
    }

    if ($op == t("Update book outline")) {
      db_query("UPDATE book SET parent = %d, weight = %d WHERE nid = %d", $edit["parent"], $edit["weight"], $node->nid);
      $output .= status(t("updated the book outline."));
    }

    if ($op == t("Remove from book outline")) {
      db_query("DELETE FROM book WHERE nid = %d", $node->nid);
      $output .= status(t("removed the node form the book."));
    }

    $output .= "<h3>". t("Edit book outline for node <i>%booktitle</i>", array("%booktitle" => $node->title)) ."</h3>";

    if ($edit["nid"]) {
      $page = db_fetch_object(db_query("SELECT * FROM book WHERE nid = %d", $node->nid));

      $output .= form_select(t("Parent"), "parent", $page->parent, book_toc(), t("The parent subject or category the page belongs in."));
      $output .= form_weight(t("Weight"), "weight", $node->weight, 15, t("The heavier pages will sink and the lighter pages will be positioned nearer the top."));

      if ($page->nid) {
        $output .= form_submit(t("Update book outline"));
        $output .= form_submit(t("Remove from book outline"));
      }
      else {
        $output .= form_submit(t("Add to book outline"));
      }

    }
    else {
      $output .= form_submit(t("Edit book outline"));
    }

    $output .= form_hidden("nid", $node->nid);

    return form($output, "post", url("admin/node/book"));
  }
}

/*
** Return the the most recent revision that matches the specified
** conditions.
*/

function book_revision_load($page, $conditions = array()) {

  $revisions = array_reverse(node_revision_list($page));

  foreach ($revisions as $revision) {

    /*
    ** Extract the specified revision:
    */

    $node = node_revision_load($page, $revision);

    /*
    ** Check to see if the conditions are met:
    */

    $status = 1;

    foreach ($conditions as $key => $value) {
      if ($node->$key != $value) {
        $status = 0;
      }
    }

    if ($status) {
      return $node;
    }
  }
}

/*
** Return the path (call stack) to a certain book page.
*/
function book_location($node, $nodes = array()) {
  $parent = db_fetch_object(db_query("SELECT n.nid, n.title, b.parent FROM node n INNER JOIN book b ON n.nid = b.nid WHERE n.nid = %d", $node->parent));
  if ($parent->title) {
    $nodes = book_location($parent, $nodes);
    array_push($nodes, $parent);
  }
  return $nodes;
}

function book_location_down($node, $nodes = array()) {
  $last_direct_child = db_fetch_object(db_query("SELECT n.nid, n.title, b.parent FROM node n INNER JOIN book b ON n.nid = b.nid WHERE b.parent = %d ORDER BY b.weight DESC, n.title DESC", $node->nid));
  if ($last_direct_child) {
    array_push($nodes, $last_direct_child);
    $nodes = book_location_down($last_direct_child, $nodes);
  }
  return $nodes;
}

function book_prev($node) {
  // if the parent is zero, we are at the start of a book so there is no previous
  if ($node->parent == 0) {
    return NULL;
  }

  // previous on the same level
  $direct_above = db_fetch_object(db_query("SELECT n.nid, n.title FROM node n INNER JOIN book b ON n.nid = b.nid WHERE b.parent = %d AND n.status = 1 AND (n.moderate = 0 OR n.revisions != '') AND (b.weight < %d OR (b.weight = %d AND n.title < '%s')) ORDER BY b.weight DESC, n.title DESC", $node->parent, $node->weight, $node->weight, $node->title));
  if ($direct_above) {
    // get last leaf of $above
    $path = book_location_down($direct_above);

    return $path ? (count($path) > 0 ? array_pop($path) : NULL) : $direct_above;
  }
  else {
    // direct parent
    $prev = db_fetch_object(db_query("SELECT n.nid, n.title FROM node n INNER JOIN book b ON n.nid = b.nid WHERE n.nid = %d AND n.status = 1 AND (n.moderate = 0 OR n.revisions != '')", $node->parent));
    return $prev;
  }
}

function book_next($node) {
  // get first direct child
  $child = db_fetch_object(db_query("SELECT n.nid, n.title FROM node n INNER JOIN book b ON n.nid = b.nid WHERE b.parent = %d AND n.status = 1 AND (n.moderate = 0 OR n.revisions != '') ORDER BY b.weight ASC, n.title ASC", $node->nid));
  if ($child) {
    return $child;
  }

  // no direct child: get next for this level or any parent in this book
  array_push($path = book_location($node), $node); // path to root node including this one
  // loop through nodes to book root, starting with this node
  while (($leaf = array_pop($path)) && count($path)) {
    $next = db_fetch_object(db_query("SELECT n.nid, n.title FROM node n INNER JOIN book b ON n.nid = b.nid WHERE b.parent = %d AND n.status = 1 AND (n.moderate = 0 OR n.revisions != '') AND (b.weight > %d OR (b.weight = %d AND n.title > '%s')) ORDER BY b.weight ASC, n.title ASC", $leaf->parent, $leaf->weight, $leaf->weight, $leaf->title));
    if ($next) {
      return $next;
    }
  }
}

function book_body($node) {
  $op = $_POST["op"];

  if ($node->format == 1) {
    // Make sure only authorized users can preview PHP pages.
    if ($op == t("Preview") && !user_access("create php content")) {
      return;
    }

    ob_start();
    eval($node->body);
    $output = ob_get_contents();
    ob_end_clean();
  }
  else {
    $output = check_output($node->body);
  }

  return $output;
}

function book_view($node, $main = 0) {

  /*
  ** Always display the most recently approved revision of a node
  ** (if any) unless we have to display this page in the context of
  ** the moderation queue.
  */

  if ($node->moderate && arg(0) != "queue") {
    $revision = book_revision_load($node, array("moderate" => 0, "status" => 1));

    if ($revision) {
      $node = $revision;
    }
  }

  /*
  ** Extract the page body.  If body is dynamic (using PHP code), the body
  ** will be generated.
  */

  $node->body = book_body($node);

  /*
  ** Display the node.  If not displayed on the main page, we render
  ** the node as a page in the book with extra links to the previous
  ** and the next page.
  */

  if ($main) {
    theme("node", $node, $main);
  }
  else {
    /*
    ** Construct the "next" and "previous" links:
    */

    if ($node->nid) {
      $prev = book_prev($node);
      $next = book_next($node);
    }

    // build the tree from bottom to top to have the book index in $level for navigation later
    $path = book_location($node);
    foreach ($path as $level) {
      $trail[] = l($level->title, "node/view/$level->nid");
    }

    $output .= "<div class=\"book\">";
    if ($trail) {
      $output .= "<div class=\"location\">". implode($trail, " &raquo; ") ."</div><hr />";
    }
    $output .= "<div class=\"title\">$node->title</div>";
    $output .= "<div class=\"last-updated\">". t("Last updated by %u on %d", array("%u" => format_name($node), "%d" => format_date($node->changed))) ."</div>";

    $output .= "<div class=\"body\">$node->body</div>";

    if ($node->moderate) {
      $output .= "<div class=\"log\"><div class=\"title\">". t("Log") .":</div>$node->log</div>";
    }

    if ($node->nid) {
      $output .= "<div class=\"tree\">". book_tree($node->nid) ."</div>";
      if ($prev) {
        $links .= "<div class=\"prev\">";
        $links .= l(t("previous"), "node/view/$prev->nid", array("title" => t("View the previous page in this book.")));
        $links .= "</div>";
        $titles .= "<div class=\"prev\">$prev->title</div>";
      }
      if ($next) {
        $links .= "<div class=\"next\">";
        $links .= l(t("next"), "node/view/$next->nid", array("title" => t("View the next page in this book.")));
        $links .= "</div>";
        $titles .= "<div class=\"next\">$next->title</div>";
      }
      if ($node->parent) {
        $links .= "<div class=\"up\">";
        $links .= l(t("up"), "node/view/$node->parent", array("title" => t("View this page's parent section.")));
        if ($node->parent != $level->nid) {
          $links .= " | ";
          $links .= l(t("index"), "node/view/$level->nid", array("title" => t("View this book's table of contents.")));
        }
        $links .= "</div>";
      }
      $output .= "<div class=\"nav\">";
      $output .= "<div class=\"links\">$links</div>";
      $output .= "<div class=\"titles\">$titles</div>";
      $output .= "</div>";
    }
    $output .= "<div class=\"links\">". theme("links", link_node($node, $main)) ."</div>";
    $output .= "</div>";

    theme("box", t("Handbook"), $output);
  }
}

function book_toc_recurse($nid, $indent, $toc, $children) {

  if ($children[$nid]) {
    foreach ($children[$nid] as $foo => $node) {
      $toc[$node->nid] = "$indent $node->title";
      $toc = book_toc_recurse($node->nid, "$indent--", $toc, $children);
    }
  }

  return $toc;
}

function book_toc($parent = 0, $indent = "", $toc = array()) {

  $result = db_query("SELECT n.nid, n.title, b.parent FROM node n INNER JOIN book b ON n.nid = b.nid WHERE n.status = '1' ORDER BY b.weight, n.title");

  while ($node = db_fetch_object($result)) {
    $list = $children[$node->parent] ? $children[$node->parent] : array();
    array_push($list, $node);
    $children[$node->parent] = $list;
  }

  /*
  ** If the user is an administrator, add the root node; only
  ** administrators can start new books.
  */

  if (user_access("administer nodes")) {
    $toc[0] = "<". t("root") .">";
  }

  /*
  ** Iterate root book nodes:
  */

  $toc = book_toc_recurse($parent, $indent, $toc, $children);

  return $toc;
}


function book_tree_recurse($nid, $depth, $children) {

  if ($depth > 0) {
    if ($children[$nid]) {
      foreach ($children[$nid] as $foo => $node) {
        $output .= "<li>";
        $output .= l($node->title, "node/view/$node->nid");
        if ($tree = book_tree_recurse($node->nid, $depth - 1, $children)) {
          $output .= "<ul>$tree</ul>";
        }
        $output .= "</li>";
      }
    }
  }

  return $output;
}


function book_tree($parent = 0, $depth = 3) {

  $result = db_query("SELECT n.nid, n.title, b.parent FROM node n INNER JOIN book b ON n.nid = b.nid WHERE n.status = '1' AND n.moderate = '0' ORDER BY b.weight, n.title");

  while ($node = db_fetch_object($result)) {
    $list = $children[$node->parent] ? $children[$node->parent] : array();
    array_push($list, $node);
    $children[$node->parent] = $list;
  }

  $output = book_tree_recurse($parent, $depth, $children);
  $output = "<ul>$output</ul>";

  return $output;
}


function book_render() {

  $result = db_query("SELECT n.nid FROM node n INNER JOIN book b ON n.nid = b.nid WHERE b.parent = 0 AND n.status = 1 AND (n.moderate = 0 OR n.revisions IS NOT NULL) ORDER BY b.weight, n.title");

  while ($page = db_fetch_object($result)) {
    // load the node:
    $node = node_load(array("nid" => $page->nid));

    // take the most recent approved revision:
    if ($node->moderate) {
      $node = book_revision_load($node, array("moderate" => 0, "status" => 1));
    }

    if ($node) {
      // output the content:
      $output .= "<div class=\"book\">";
      $output .= "<div class=\"title\">". l($node->title, "node/view/$node->nid") ."</div>";
      $output .= "<div class=\"body\">". book_body($node) ."</div>";
      $output .= "</div>";
    }
  }

  theme("header");
  theme("box", t("Handbook"), "$output");
  theme("footer");
}

function book_page() {


  if (user_access("access content")) {
    switch (arg(1)) {
      case "print":
        print book_print(arg(2), $depth = 1);
        break;
      default:
        book_render();
    }
  }
  else {
    theme("header");
    theme("box", t("Access denied"), message_access());
    theme("footer");
  }
}

function book_print($id = "", $depth = 1) {
  global $base_url;
  $result = db_query("SELECT n.nid FROM node n INNER JOIN book b ON n.nid = b.nid WHERE n.status = 1 AND n.nid = %d AND (n.moderate = 0 OR n.revisions IS NOT NULL) ORDER BY b.weight, n.title", $id);

  while ($page = db_fetch_object($result)) {
    // load the node:
    $node = node_load(array("nid" => $page->nid));

    // take the most recent approved revision:
    if ($node->moderate) {
      $node = book_revision_load($node, array("moderate" => 0, "status" => 1));
    }

    if ($node) {
      // output the content:
      $output .= "<h1 id=\"$node->nid\" name=\"$node->nid\" class=\"book-h$depth\">$node->title</h1>";

      if ($node->body) {
        $output .= book_body($node);
      }
    }
  }

  $output .= book_print_recurse($id, $depth);

  $html = "<html><head><title>$node->title</title>";
  $html .= "<base href=\"$base_url/\" />";
  $html .= "<style type=\"text/css\">\n@import url(misc/print.css);\n</style>";
  $html .= "</head><body>". $output ."</body></html>";

  return $html;
}

function book_print_recurse($parent = "", $depth = 1) {
  $result = db_query("SELECT n.nid FROM node n INNER JOIN book b ON n.nid = b.nid WHERE n.status = 1 AND b.parent = '$parent' AND (n.moderate = 0 OR n.revisions IS NOT NULL) ORDER BY b.weight, n.title");

  while ($page = db_fetch_object($result)) {
    // load the node:
    $node = node_load(array("nid" => $page->nid));

    // take the most recent approved revision:
    if ($node->moderate) {
      $node = book_revision_load($node, array("moderate" => 0, "status" => 1));
    }

    if ($node) {
      // output the content:
      $output .= "<h1 id=\"$node->nid\" name=\"$node->nid\" class=\"book-h$depth\">$node->title</h1>";

      if ($node->body) {
        $output .= "<ul>". book_body($node) ."</ul>";
      }

      $output .= book_print_recurse($node->nid, $depth + 1);
    }
  }

  return $output;
}

function book_admin_view_line($node, $depth = 0) {

  $row = array("<div style=\"padding-left: ". (25 * $depth) ."px;\">". form_textfield(NULL, "$node->nid][title", $node->title, 64, 255) ."</div>", form_weight(NULL, "$node->nid][weight", $node->weight), l(t("view node"), "node/view/$node->nid"), l(t("edit node"), "admin/node/edit/$node->nid"), l(t("delete node"), "admin/node/delete/$node->nid"));

  return $row;
}

function book_admin_view_book($nid, $depth = 1) {
  $result = db_query("SELECT n.nid FROM node n INNER JOIN book b ON n.nid = b.nid WHERE b.parent = %d ORDER BY b.weight, n.title", $nid);

  while ($node = db_fetch_object($result)) {
    $node = node_load(array("nid" => $node->nid));
    $rows[] = book_admin_view_line($node, $depth);
    $rows = array_merge($rows, book_admin_view_book($node->nid, $depth + 1));
  }

  return $rows;
}

function book_admin_view($nid, $depth = 0) {

  if ($nid) {
    $node = node_load(array("nid" => $nid));

    $output .= "<h3>$node->title</h3>";

    $header = array(t("title"), t("weight"), array("data" => t("operations"), "colspan" => 3));
    $rows[] = book_admin_view_line($node);
    $rows = array_merge($rows, book_admin_view_book($nid));

    $output .= table($header, $rows);
    $output .= form_submit(t("Save book pages"));

    return form($output);
  }
}

function book_admin_save($nid, $edit = array()) {

  if ($nid) {
    $book = node_load(array("nid" => $nid));

    foreach ($edit as $nid => $value) {
      /*
      ** Check to see whether the title needs updating:
      */

      $title = db_result(db_query("SELECT title FROM node WHERE nid = %d", $nid));
      if ($title != $value["title"]) {
        db_query("UPDATE node SET title = '%s' WHERE nid = %d", $value["title"], $nid);
      }

      /*
      ** Check to see whether the weight needs updating:
      */

      $weight = db_result(db_query("SELECT weight FROM book WHERE nid = %d", $nid));
      if ($weight != $value["weight"]) {
        db_query("UPDATE book SET weight = %d WHERE nid = %d", $value["weight"], $nid);
      }
    }

    $message = t("updated book '%title'", array("%title" => $book->title));
    watchdog("special", $message);

    return $message;
  }
}

function book_admin_orphan() {

  $result = db_query("SELECT n.nid, n.title, n.status, b.parent FROM node n INNER JOIN book b ON n.nid = b.nid WHERE n.type = 'book'");

  while ($page = db_fetch_object($result)) {
    $pages[$page->nid] = $page;
  }

  if ($pages) {
    $output .= "<h3>Orphan pages</h3>";
    $header = array(t("title"), t("weight"), array("data" => t("operations"), "colspan" => 3));
    foreach ($pages as $nid => $node) {
      if ($node->parent && empty($pages[$node->parent])) {
        $rows[] = book_admin_view_line($node, $depth);
        $rows = array_merge($rows, book_admin_view_book($node->nid, $depth + 1));
      }
    }
    $output .= table($header, $rows);
  }

  return $output;
}

function book_admin_links() {
}

function book_admin() {
  $op = $_POST["op"];
  $edit = $_POST["edit"];

  if (user_access("administer nodes")) {
    if (empty($op)) {
      $op = arg(3);
    }

    switch ($op) {
      case t("Edit book outline"):
      case t("Add to book outline"):
      case t("Remove from book outline"):
      case t("Update book outline"):
        print book_node_link();
        break;
      case "orphan":
        print book_admin_orphan();
        break;
      case t("Save book pages"):
        print status(book_admin_save(arg(3), $edit));
        // fall through:
      default:
        print book_admin_view(arg(3));
        break;
    }
  }
}

function book_help() {
  $output .= "<p>The <i>collaborative book</i> organises content into a nested hierarchical structure. It is particularly good for manuals,FAQs and the like, allowing you to have chapters, sections, etc.</p>";
  $output .= "<p>A book is simply a collection of nodes that have been linked together. These nodes are usually of type <i>book page</i>, but you can insert nodes of any type into a book outline. Every node in the book has a <i>parent</i> node which  \"contains\" it. This is how book.module establishes its hierarchy. At any given level in the hierarchy, a book can contain many nodes. All these sibling nodes are sorted according to the <i>weight</i> that you give them.</p>";
  $output .= "<p>A book page is a special node type that allows you to embed PHP within the body of the page. This capability is only offerred to administrators, since malicious users could abuse this power. In addiiton, book pages contain a <i>log message</i> field which helps your users understand the motivation behind an edit of a book page. Each edited version of a book page is stored as a new revision of a node. This capability makes it easy to revert to an old version of a page, should that be desirable.</p>";
  $output .= "<p>Like other node types, book submissions and edits may be subject to moderation, depending on your configuration.  Similarly, books use ". l("permissions", "admin/user/permission") ." to determine who may read and write to them. Only administrators are allowed to create new books, which are really just nodes whose parent is <i>&lt;root&gt;</i>. To include an existing node in your book, click on the \"administer\"-link in that node.  At the bottom of this administration page, click on the <i>edit book outline</i> button. This enables you to place the node wherever you'd like within the book hierarchy. To add a new node into your book, use the <i>create book page</i> link.</p>";
  $output .= "<p>Administrators may review the hierarchy of their books by clicking on the ". l("collaborative book", "admin/node/book")." link in the adminstration pages. There, nodes may be edited, reorganized, removed from book, and deleted. This behavior may change in the future. When a parent node is deleted, it may leave behind child nodes.  These nodes are now <i>orphans</i>. Administrators should periodically ". l("review their books for orphans", "admin/node/book/orphan") ." and reaffiliate those pages as desired. Finally, administrators may also ". l("export their books", "book/print") ." to a single, flat HTML page which is suitable for printing.</p>";
  $output .= "<h3>Maintaining a FAQ using a collaborative book</h3>";
  $output .= "<p>Collaborative books let you easily set up a Frequently Asked Questions section on your web site. The main benefit is that you don't have to write all the questions/answers by yourself - let the community do it for you!</p>";
  $output .= "<p>In order to set up the FAQ, you have to create a new book which will hold all your content. To do so, click on <i>create book page</i> in your user box. Give it a thoughtful title, and body. A title like \"Estonia Travel - FAQ\" is nice. You may always edit these fields later. You will probably want to designate <i>&lt;root&gt;</i> as the parent of this page. Leave the <i>log message</i> and <i>type</i> fields blank for now. After you have submitted this book page, you are ready to begin filling up your book with questions that are frequently asked.</p>";
  $output .= "<p>Whenever you come across a post which you want to include in your FAQ, click on the <i>administer</i> link. Then click on the <i>edit book outline</i> button at the bottom of the page. Then place the relevant post wherever is most appropriate in your book by selecting a <i>parent</i>. Books are quite flexible. They can have sections like <i>Flying to Estonia</i>, <i>Eating in Estonia</i> and so on. As you get more experienced with the <i>collaborative book</i>, you can reorganize posts in your book so that it stays organized.</p>";
  $output .= "<p>Notes:</p><ul><li>Any comments attached to those relevant posts which you designate as book pages will also be transported into your book. This is a great feature, since much wisdom is shared via comments. Remember that all future comments and edits will automatically be reflected in your book.</li><li>You may wish to edit the title of posts when adding them to your FAQ. This is done on the same page as the <i>Edit book outline</i> button. Clear titles improve navigability enormously.</li><li>Book pages may come from any content type (blog, story, page, etc.). If you are creating a post solely for inclusion in your book, then use the <i>Create book page</i> link.</li><li>If you don't see the <i>administer</i> link, then you probably have insufficient ". l("permissions", "admin/user/permission") .".</li><li>If you want to get really fancy, note that books are one of the few content types which allow raw PHP in their <i>body</i>. So you've got lots of geeky possibilities there.</li></ul>";
  return t($output);

}
?>
