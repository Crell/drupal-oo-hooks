<?php

$module = array("find" => "book_find",
                "page" => "book_page",
                "user" => "book_user",
                "admin" => "book_admin");

class Book {
  function Book($nid, $userid, $title, $body, $parent, $weight, $timestamp) {
    $this->nid = $nid;
    $this->userid = $userid;
    $this->title = $title;
    $this->body = $body;
    $this->parent = $parent;
    $this->weight = $weight;
    $this->timestamp = $timestamp;
  }
}

function book_navigation($node) {
  if ($node->nid && $node->parent && $node->weight) {
    $next = db_fetch_object(db_query("SELECT n.nid, n.title FROM node n LEFT JOIN book b ON n.nid = b.nid AND n.lid = b.lid WHERE b.parent = '$node->parent' AND b.weight > $node->weight ORDER BY b.weight ASC"));
    $prev = db_fetch_object(db_query("SELECT n.nid, n.title FROM node n LEFT JOIN book b ON n.nid = b.nid AND n.lid = b.lid WHERE b.parent = '$node->parent' AND b.weight < $node->weight ORDER BY b.weight DESC"));
  }

  $output .= "<HR>";
  $output .= "<TABLE BORDER=\"0\" CELLPADDING=\"0\" CELLSPACING=\"0\" WIDTH=\"100%\">\n";
  $output .= " <TR><TD ALIGN=\"left\" WIDTH=\"33%\">". ($prev ? "<A HREF=\"node.php?id=$prev->nid\">". t("previous") ."</A>" : t("previous")) ."</TD><TD ALIGN=\"center\" WIDTH=\"34%\"><A HREF=\"module.php?mod=book\">index</A></TD><TD ALIGN=\"right\" WIDTH=\"33%\">". ($next ? "<A HREF=\"node.php?id=$next->nid\">". t("next") ."</A>" : t("next")) ."</TD></TR>\n";
  $output .= " <TR><TD ALIGN=\"left\" WIDTH=\"33%\">". ($prev ? "<SMALL>". check_output($prev->title) ."</SMALL>" : "") ."</TD><TD ALIGN=\"center\" WIDTH=\"34%\">". ($node->parent ? "<A HREF=\"node.php?id=$node->parent\">". t("up") ."</A>" : t("up")) ."</TD><TD ALIGN=\"right\" WIDTH=\"33%\">". ($next ? "<SMALL>". check_output($next->title) ."</SMALL>" : "") ."</TD></TR>\n";
  $output .= "</TABLE>\n";

  return $output;
}

function theme_book($node) {
  global $theme;

  if ($node->title) {
    $output .= "<TABLE BORDER=\"0\" CELLPADDING=\"0\" CELLSPACING=\"0\" WIDTH=\"100%\">\n";
    $output .= " <TR><TD><B><BIG>". check_output($node->title) ."</BIG></B>". ($node->body ? "<BR><SMALL><I>Last updated by ". format_username($node->userid) ." on ". format_date($node->timestamp) ."</I></SMALL> " : "") ."</TD><TD ALIGN=\"right\">". node_info($node) ."</TD></TR>\n";
    $output .= "</TABLE>\n";
  }
  if ($node->body) {
    $output .= "<P>". check_output($node->body, 1) ."</P>";
  }

  $theme->box(t("Handbook"), $output ."". book_tree($node->nid) ."". book_navigation($node));
}

function book_view($node, $page = 1) {
  if ($page) {
    global $theme;
    $theme->header();
    theme_book($node);
    $theme->footer();
  }
  else {
    theme_book($node);
  }
}

function book_find($keys) {
  global $status, $user;
  $find = array();
  $result = db_query("SELECT n.*, u.userid FROM node n LEFT JOIN book b ON n.nid = b.nid AND n.lid = b.lid LEFT JOIN users u ON n.author = u.id WHERE n.type = 'book' AND n.status = '$status[posted]' AND (n.title LIKE '%". check_input($keys) ."%' OR b.body LIKE '%". check_input($keys) ."%') ORDER BY n.timestamp DESC LIMIT 20");
  while ($node = db_fetch_object($result)) {
    array_push($find, array("title" => check_output($node->title), "link" => (user_access($user, "book") ? "admin.php?mod=book&op=edit&id=$node->nid" : "node.php?id=$node->nid"), "user" => $node->userid, "date" => $node->timestamp));
  }
  return $find;
}

function book_search() {
  global $keys, $mod;
  print search_form($keys);
  print search_data($keys, $mod);
}

function book_toc($parent = 0, $offset = "", $toc = array()) {
  global $status;
  $result = db_query("SELECT n.*, b.* FROM node n LEFT JOIN book b ON n.nid = b.nid AND n.lid = b.lid WHERE n.type = 'book' AND n.status = '$status[posted]' AND b.parent = '$parent' ORDER BY b.weight");
  while ($node = db_fetch_object($result)) {
    $toc[$node->nid] = "$offset $node->title";
    if ($node->pid) $toc = book_toc($node->pid, "$offset-", $toc);
    $toc = book_toc($node->nid, "$offset-", $toc);
  }
  return $toc;
}

function book_form($edit = array()) {
  global $allowed_html, $PHP_SELF, $REQUEST_URI, $user;

  $output .= "<FORM ACTION=\"$REQUEST_URI\" METHOD=\"post\">\n";

  $output .= "<B>". t("Author") .":</B><BR>\n";
  $output .= "<INPUT TYPE=\"hidden\" NAME=\"edit[userid]\" VALUE=\"$edit[userid]\">\n";
  $output .= format_username(($edit[userid] ? $edit[userid] : $user->userid)) ."<P>\n";

  if ($edit[pid]) {
    $node = node_get_object("nid", $edit[pid]);
    $output .= "<B>". t("Parent") .":</B><BR>\n";
    $output .= "<A HREF=\"node.php?id=$node->id\">". check_output($node->title) ."</A><P>\n";
    $output .= "<INPUT TYPE=\"hidden\" NAME=\"edit[parent]\" VALUE=\"$edit[parent]\">\n";
    $output .= "<SMALL><I>". t("The parent subject or category the new page belongs in.") ."</I></SMALL><P>\n";
  }
  else {
    $output .= "<B>". t("Parent") .":</B><BR>\n";
    foreach (book_toc() as $key=>$value) $options2 .= "<OPTION VALUE=\"$key\"". ($edit[parent] == $key ? " SELECTED" : "") .">". check_select($value) ."</OPTION>";
    if (user_access($user, "book")) $options2 .= "<OPTION VALUE=\"0\"". ($edit[parent] == 0 ? " SELECTED" : "") .">&nbsp;</OPTION>";
    $output .= "<SELECT NAME=\"edit[parent]\">$options2</SELECT><BR>\n";
    $output .= "<SMALL><I>". t("The parent subject or category the new page belongs in.") ."</I></SMALL><P>\n";
  }

  $output .= "<B>". t("Subject") .":</B><BR>\n";
  $output .= "<INPUT TYPE=\"text\" NAME=\"edit[title]\" SIZE=\"50\" MAXLENGTH=\"128\" VALUE=\"". check_textfield($edit[title]) ."\"><P>\n";

  $output .= "<B>". t("Content") .":</B><BR>\n";
  $output .= "<TEXTAREA WRAP=\"virtual\" COLS=\"50\" ROWS=\"10\" NAME=\"edit[body]\" MAXLENGTH=\"20\">". check_textarea($edit[body]) ."</TEXTAREA><BR>\n";
  $output .= "<SMALL><I>". t("Allowed HTML tags") .": ". htmlspecialchars($allowed_html) .".</I></SMALL><P>\n";

  if ($edit[pid]) {
    $output .= "<B>". t("Log message") .":</B><BR>\n";
    $output .= "<TEXTAREA WRAP=\"virtual\" COLS=\"50\" ROWS=\"5\" NAME=\"edit[log]\" MAXLENGTH=\"20\">". check_textarea($edit[log]) ."</TEXTAREA><BR>\n";
    $output .= "<SMALL><I>". t("A brief explanation of your update.") ."</I></SMALL><P>\n";
  }

  if (user_access($user, "book")) {
    $output .= "<B>". t("Weight") .":</B><BR>\n";
    for ($count = 0; $count < 25; $count++) $options3 .= "<OPTION VALUE=\"$count\"". ($edit[weight] == $count ? " SELECTED" : "") .">$count</OPTION>";
    $output .= "<SELECT NAME=\"edit[weight]\">$options3</SELECT><BR>\n";
    $output .= "<SMALL><I>". t("The heavier nodes will sink and the lighter nodes will be positioned nearer the top.") ."</I></SMALL><P>\n";
  }

  if (!$edit) {
    $output .= "<INPUT TYPE=\"submit\" NAME=\"op\" VALUE=\"". t("Preview") ."\">\n";
  }
  else if (!$edit[title]) {
    $output .= "<FONT COLOR=\"red\">". t("Warning: you did not supply a title.") ."</FONT><P>\n";
    $output .= "<INPUT TYPE=\"submit\" NAME=\"op\" VALUE=\"". t("Preview") ."\">\n";
  }
  else {
    $output .= "<INPUT TYPE=\"submit\" NAME=\"op\" VALUE=\"". t("Preview") ."\">\n";
    $output .= "<INPUT TYPE=\"submit\" NAME=\"op\" VALUE=\"". t("Submit") ."\">\n";
  }

  $output .= "<INPUT TYPE=\"hidden\" NAME=\"edit[pid]\" VALUE=\"$edit[pid]\">\n";
  $output .= "<INPUT TYPE=\"hidden\" NAME=\"edit[nid]\" VALUE=\"$edit[nid]\">\n";

  $output .= "</FORM>\n";

  return $output;
}

function book_save($edit) {
  node_save(array_diff(array_merge($edit, array(nid => $edit[nid], type => "book")), array(userid => $edit[userid])));
}

function book_delete($id) {
  return ($node = node_del("nid", $id) ? "book page has been deleted" : "failed to delete book page: change status to 'dumped' first");
}

function book_tree($parent = "") {
  global $PHP_SELF, $status;

  $result = db_query("SELECT n.*, b.* FROM node n LEFT JOIN book b ON n.nid = b.nid AND n.lid = b.lid WHERE n.type = 'book' AND n.status = '$status[posted]' AND b.parent = '$parent' ORDER BY b.weight");

  $output .= "<UL>";
  while ($node = db_fetch_object($result)) {
    $output .= "<LI><A HREF=\"node.php?id=$node->nid\">". check_output($node->title) ."</A>";
    if ($PHP_SELF == "/admin.php") $output .= " <SMALL>(weight: $node->weight/$node->parent, status: $node->status) (<A HREF=\"admin.php?mod=book&op=edit&id=$node->nid\">edit</A>, <A HREF=\"admin.php?mod=book&op=delete&id=$node->nid\">delete</A>)</SMALL>\n";
    if ($node->pid) $output .= book_tree($node->pid);
    $output .= book_tree($node->nid);
  }
  $output .= "</UL>";
  return $output;
}

function book_list() {
  global $status;

  $result = db_query("SELECT n.*, b.* FROM node n LEFT JOIN book b ON n.nid = b.nid AND n.lid = b.lid WHERE n.type = 'book' AND n.status != '$status[expired]' ORDER BY n.timestamp DESC");

  $output .= "<TABLE BORDER=\"1\" CELLPADDING=\"2\" CELLSPACING=\"2\">\n";
  $output .= " <TR><TH>node</TH><TH>status</TH><TH>date</TH><TH COLSPAN=\"3\">operations</TH></TR>\n";
  while ($node = db_fetch_object($result)) {
    $output .= " <TR><TD><A HREF=\"node.php?id=$node->nid\">". check_output($node->title) ."</A></TD><TD>$node->status</TD><TD>". format_date($node->timestamp, "small") ."</TD><TD><A HREF=\"node.php?id=$node->nid\">view</A></TD><TD><A HREF=\"admin.php?mod=book&op=edit&id=$node->nid\">edit</A></TD><TD><A HREF=\"admin.php?mod=book&op=delete&id=$node->nid\">delete</A></TD>";
  }
  $output .= "</TABLE>\n";
  return $output;
}

function book_admin() {
  global $op, $id, $edit, $user;

  print "<SMALL><A HREF=\"admin.php?mod=book&op=add\">add new page</A> | <A HREF=\"admin.php?mod=book&op=search\">search book</A> | <A HREF=\"admin.php?mod=book&op=list\">list overview</A> | <A HREF=\"admin.php?mod=book\">tree overview</A></SMALL><HR>\n";

  switch ($op) {
    case "add":
      print book_form();
      break;
   case "delete":
      print book_delete($id);
      print book_tree();
      break;
   case "list":
      print book_list();
      break;
    case "edit":
      print book_form(node_get_array(nid, $id));
      break;
    case "search":
      book_search();
      break;
    case t("Preview"):
      book_view(new Book(($edit[nid] ? $edit[nid] : -1), ($edit[userid] ? $edit[userid] : $user->userid), $edit[title], $edit[body], $edit[parent], $edit[weight], ($edit[timestamp] ? $edit[timestamp] : time())), 0);
      print book_form($edit);
      break;
    case t("Submit"):
      book_save($edit);
      print book_tree();
      break;
    default:
      print book_tree();
  }
}

function book_page($id = 0) {
  global $theme;
  book_view(node_get_object("nid", $nid));
}

function book_user() {
  global $edit, $id, $op, $theme, $user;

  switch($op) {
    case "update":
      $node = node_get_object("nid", $id);
      $theme->box("Update a book page", book_form(array(nid => -1, pid => $id, title => $node->title, body => $node->body, parent => $node->parent)));
      break;
    case t("Preview"):
      book_view(new Book(($edit[nid] ? $edit[nid] : -1), $user->userid, $edit[title], $edit[body], $edit[parent], $edit[weight], ($edit[timestamp] ? $edit[timestamp] : time())), 0);
      $theme->box("Submit a book page", book_form($edit));
      break;
    case t("Submit"):
      book_save($edit);
      $theme->box(t("Submit a book page"), t("Thank you for your submission."));
      break;
    default:
      $theme->box("Submit a book page", book_form());
  }
}

?>
