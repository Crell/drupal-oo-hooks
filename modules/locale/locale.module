<?php
// $Id$

/**
 * @file
 * Enables administrators to manage the site interface languages.
 *
 * When enabled, the site interface can be displayed in different
 * languages. The setup of languages and translations is completely
 * we based. Gettext portable object files are supported.
 */

// ---------------------------------------------------------------------------------
// Hook implementations (needed on all page loads)

/**
 * Implementation of hook_help().
 */
function locale_help($section = "admin/help#locale") {
  switch ($section) {
    case 'admin/modules#description':
      return t('Enables the translation of the user interface to languages other than English.');
    case 'admin/locale':
    case 'admin/locale/language/overview':
      return t("<p>Drupal allows you to translate the interface to a language other than English. This page provides an overview of the installed languages. You can add more languages on the <a href=\"%add-language\">add language page</a>, or directly by <a href=\"%import\">importing a translation</a>. If there are multiple languages enabled, registered users will be able to set their preference. The site default will be used for users without their own settings, including anonymous visitors.</p><p>There are different approaches to translate the Drupal interface: either by <a href=\"%import\">importing</a> an existing translation, by <a href=\"%search\">translating everything</a> yourself, or by using a combination of these.</p>", array("%search" => url("admin/locale/string/search"), "%import" => url("admin/locale/language/import"), "%add-language" => url("admin/locale/language/add")));
    case 'admin/locale/language/add':
      return t("<p>You need to add all languages you would like to provide the site interface in. If you can't find the desired language in the quick add dropdown, then need to provide the proper language code yourself. The language code might be used to negotiate with browsers and present flags, so it is important to pick one that is standardised for the desired language. You can also add languages by <a href=\"%import\">importing translations</a> directly into a language not yet set up.</p>", array("%import" => url("admin/locale/language/import")));
    case 'admin/locale/language/import':
      return t("<p>This page allows you to import a translation provided in the gettext Portable Object (.po) format.  The easiest way to get your site translated is to grab an existing Drupal translation and to import it.  You can obtain translations from the <a href=\"%url\">Drupal translation page</a>. Note that importing a translation file might take a while.</p>", array('%url' => 'http://drupal.org/project/translations'));
    case 'admin/locale/language/export':
      return t("<p>This page allows you to export Drupal strings. The first option is to export a translation so it can be shared. The second option is to generate a translation template, which contains all Drupal strings, but without their translations. You can use this template to start a new translation using a specialized desktop application.</p>");
    case 'admin/locale/string/search':
      return t("<p>It is often more convenient to get the strings of your setup on the <a href=\"%export\">export page</a>, and start with a desktop Gettext translation editor though. Here you can search in the translated and untranslated strings, and the default English texts provided by Drupal.</p>", array("%export" => url("admin/locale/language/export")));

    case 'admin/help#locale':
      return t("
      <p>Most programs are written and documented in English, and primarily use English to interact with users. This is also true for a great deal of web sites. However, most people are less comfortable with English than with their native language, and would prefer to use their mother tongue as much as possible. Many people love to see their web site showing a lot less English, and far more of their own language. Therefore Drupal provides a framework to setup a multi-lingual web site, or to overwrite the default English texts.</p>
      <h3>How to interface translation works</h3>
      <p>Whenever Drupal encounters an interface string which needs to be displayed, it tries to translate it into the currently selected language. If a translation is not available, then the string is remembered, so you can look up untranslated strings easily.</p>
      <p>Drupal provides two options to translate these strings. First is the integrated web interface, where you can search for untranslated strings, and specify their translations via simple web forms. An easier, and much less time consuming method is to import translations already done for your language. This is achieved by the use of GNU gettext Portable Object files. These are editable with quite convenient desktop editors specifically architected for supporting your work with GNU Gettext files. The import feature allows you to add strings from such files into the site database. The export functionality enables you to share your translations with others, generating Portable Object files from your site strings.");
      break;

      // TODO: integrate a rewritten version of this help into the big help screen above
      /*
      "<p>To translate strings start at the <a href=\"%search\">search</a> page of the locale section in the administration pages. There you will see a list of the languages you have configured. Choose the appropriate settings and search for the strings you want to translate.</p>
      <p>At the locale page, users with the proper access rights will see the various texts that need translation on the left column of the table.</p>
      <p>Below the text you can see an example URI where this text shows up one your site or a file and the line number in the source code.  Chances are most of these texts will be used and displayed on more than one page, though only one example URI is presented.</p>
      <p>The second column displays the supported languages as defined in the configuration file.  See below for more information on how to support new languages.  If the symbol for a language is seen like <strike>this</strike>, it means that this entry still needs to be translated into that language.  If not, it has been translated already.</p>
      <p>To add or change a translation click the \"edit locale\" link in the third column, the \"operations\" column.  You'll be presented the original text and fields for translation in the supported languages.  Enter the translations and confirm by clicking the \"Save translations\" button.  The translations need not be accurate; they are for your site so you can choose what to show to your users.</p>
      <p>To delete a translation, click the \"delete locale\" link at the overview page and the translation will be immediately deleted without confirmation.  Deleting translations is convenient for removing texts that belonged to an obsolete module.</p>
      <p>In some texts special strings such as \"%a\" and \"%b\" show up.  Those get replaced by some string at run-time when Drupal dynamically generate pages.  You can find out which string this is by looking at the page where the text appears.  This is where the above mentioned URI and code line numbers can come in handy.</p>
      <h3>Uploading PO files</h3>
      <p>PO files are files containing translations as used by <a href=\"%gettext\">GNU gettext</a>.</p>
      <p>The Drupal project distributes user contributed PO files in a number of languages. These files can be obtained from the <a href=\"%translations\">Drupal translations</a> home page.</p>
      <p>If you want to provide a PO file for a not yet supported language or update an existing PO files, read about it in the <a href=\"%handbook\">Drupal handbook</a> home page.</p>
      <p>Once you got the appropriate PO file, all you have to do is to add the locale and upload it from the <a href=\"%addlocale\">manage locale</a> screen.</p>
      <p>Note that uploading and parsing the uploaded file can take quite some time, depending on the connection to the server and the server's power.</p>
       ", array("%search" => url("admin/locale/string/search"), "%addlocale" => url("admin/locale/languages/add"), "%translations" => 'http://www.Drupal.org/translations/', "%handbook" => 'http://www.Drupal.org/handbook/po-files', "%gettext" => 'http://www.gnu.org/software/gettext/gettext.html'));*/
  }
}

/**
 * Implementation of hook_menu().
 */
function locale_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $access = user_access('administer locales');

    // Main admin menu item
    $items[] = array('path' => 'admin/locale', 'title' => t('localization'),
      'callback' => 'locale_admin_manage', 'access' => $access);

    // Top level tabs
    $items[] = array('path' => 'admin/locale/language', 'title' => t('manage languages'),
      'access' => $access, 'weight' => -10, 'type' => MENU_DEFAULT_LOCAL_TASK);
    $items[] = array('path' => 'admin/locale/string/search', 'title' => t('manage strings'),
      'callback' => 'locale_admin_string', 'access' => $access, 'weight' => 10,
      'type' => MENU_LOCAL_TASK);

    // Manage languages subtabs
    $items[] = array('path' => 'admin/locale/language/overview', 'title' => t('list'),
      'callback' => 'locale_admin_manage', 'access' => $access, "weight" => 0,
      'type' => MENU_DEFAULT_LOCAL_TASK);
    $items[] = array('path' => 'admin/locale/language/add', 'title' => t('add language'),
      'callback' => 'locale_admin_manage_add', 'access' => $access, "weight" => 5,
      'type' => MENU_LOCAL_TASK);
    $items[] = array('path' => 'admin/locale/language/import', 'title' => t('import'),
      'callback' => 'locale_admin_import', 'access' => $access, 'weight' => 10,
      'type' => MENU_LOCAL_TASK);
    $items[] = array('path' => 'admin/locale/language/export', 'title' => t('export'),
      'callback' => 'locale_admin_export', 'access' => $access, 'weight' => 20,
      'type' => MENU_LOCAL_TASK);

    // Language related callbacks
    $items[] = array('path' => 'admin/locale/language/delete', 'title' => t('confirm'),
      'callback' => 'locale_admin_manage_delete_screen', 'access' => $access,
      'type' => MENU_CALLBACK);

    // String related callbacks
    $items[] = array('path' => 'admin/locale/string/edit', 'title' => t('edit'),
      'callback' => 'locale_admin_string', 'access' => $access, 'type' => MENU_CALLBACK);
    $items[] = array('path' => 'admin/locale/string/delete', 'title' => t('delete'),
      'callback' => 'locale_admin_string', 'access' => $access, 'type' => MENU_CALLBACK);
  }

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function locale_perm() {
  return array('administer locales');
}

/**
 * Implementation of hook_user().
 */
function locale_user($type, $edit, &$user, $category = NULL) {
  $languages = locale_supported_languages();
  if ($type == 'form' && $category == 'account' && count($languages['name']) > 1) {
    if ($user->language == '') {
      $user->language = key($languages['name']);
    }
    return array(array('title' => t('Interface language settings'), 'data' => form_radios(t("Language"), 'language', $user->language, $languages['name'], t("Selecting a different locale will change the interface language of the site."))));
  }
}

// ---------------------------------------------------------------------------------
// Locale core functionality (needed on all page loads)

/**
 * Provides interface translation services
 *
 * This function is called from t() to translate a string if needed.
 */
function locale($string) {
  global $locale;
  static $locale_t;

  // Store database cached translations in a static var
  if (!isset($locale_t)) {
    $cache = cache_get("locale:$locale");

    if ($cache == 0) {
      locale_refresh_cache();
      $cache = cache_get("locale:$locale");
    }
    $locale_t = unserialize($cache->data);
  }

  // We have the translation cached (if it is TRUE, then there is no
  // translation, so there is no point in checking the database)
  if (isset($locale_t[$string])) {
    $string = ($locale_t[$string] === TRUE ? $string : $locale_t[$string]);
  }

  // We don't have this translation cached, so get it from the DB
  else {
    $result = db_query("SELECT s.lid, t.translation FROM {locales_source} s INNER JOIN {locales_target} t ON s.lid = t.lid WHERE s.source = '%s' AND t.locale = '%s'", $string, $locale);
    // Translation found
    if ($trans = db_fetch_object($result)) {
      if (!empty($trans->translation)) {
        $locale_t[$string] = $trans->translation;
        $string = $trans->translation;
      }
    }

    // Either we have no such source string, or no translation
    else {
      $result = db_query("SELECT lid, source FROM {locales_source} WHERE source = '%s'", $string);
      // We have no such translation
      if ($obj = db_fetch_object($result)) {
        if ($locale) {
          db_query("INSERT INTO {locales_target} (lid, locale) VALUES (%d, '%s')", $obj->lid, $locale);
        }
      }
      // We have no such source string
      else {
        db_query("INSERT INTO {locales_source} (location, source) VALUES ('%s', '%s')", request_uri(), $string);
        if ($locale) {
          $lid = db_fetch_object(db_query("SELECT lid FROM {locales_source} WHERE source = '%s'", $string));
          db_query("INSERT INTO {locales_target} (lid, locale) VALUES (%d, '%s')", $lid->lid, $locale);
        }
      }
      // Clear locale cache in DB
      cache_clear_all("locale:$locale");
    }
  }

  return $string;
}

/**
 * Refreshes database stored cache of translations
 *
 * We only store short strings to improve performance and consume less memory.
 */
function locale_refresh_cache() {
  $languages = locale_supported_languages();

  foreach (array_keys($languages['name']) as $locale) {
    $result = db_query("SELECT s.source, t.translation, t.locale FROM {locales_source} s INNER JOIN {locales_target} t ON s.lid = t.lid WHERE t.locale = '%s' AND LENGTH(s.source) < 75", $locale);
    while ($data = db_fetch_object($result)) {
      $t[$data->source] = (empty($data->translation) ? TRUE : $data->translation);
    }
    cache_set("locale:$locale", serialize($t));
  }
}

/**
 * Returns list of languages supported on this site
 *
 * @param $reset Refresh cached language list
 * @param $getall Return all languages (even disabled ones)
 */
function locale_supported_languages($reset = FALSE, $getall = FALSE) {
  static $enabled = NULL;
  static $all = NULL;

  if ($reset) {
    unset($enabled); unset($all);
  }

  if (is_null($enabled)) {
    $enabled = $all = array();
    $all['name'] = $all['formula'] = $enabled['name'] = $enabled['formula'] = array();
    $result = db_query('SELECT locale, name, formula, enabled FROM {locales_meta} ORDER BY isdefault DESC, enabled DESC, name ASC');
    while ($row = db_fetch_object($result)) {
      $all['name'][$row->locale] = $row->name;
      $all['formula'][$row->locale] = $row->formula;
      if ($row->enabled) {
        $enabled['name'][$row->locale] = $row->name;
        $enabled['formula'][$row->locale] = $row->formula;
      }
    }
  }
  return $getall ? $all : $enabled;
}

/**
 * Returns plural form index for a specific number
 *
 * The index is computed from the formula of this language
 */
function locale_get_plural($count) {
  global $locale;
  static $locale_formula, $plurals = array();

  if (!isset($plurals[$count])) {
    if (!isset($locale_formula)) {
      $languages = locale_supported_languages();
      $locale_formula = $languages['formula'][$locale];
    }
    if ($locale_formula) {
      $n = $count;
      $plurals[$count] = @eval("return intval($locale_formula);");
      return $plurals[$count];
    }
    else {
      $plurals[$count] = -1;
      return -1;
    }
  }
  return $plurals[$count];
}

// ---------------------------------------------------------------------------------
// Language management functionality (administration only)

/**
 * Page handler for the language management screen
 */
function locale_admin_manage() {
  include_once 'includes/locale.inc';
  $edit = &$_POST['edit'];

  switch ($_POST['op']) {
    // Save changes to existing languages
    case t('Save configuration'):
      $languages = locale_supported_languages(FALSE, TRUE);
      foreach($languages['name'] as $key => $value) {
        if ($edit['sitedefault'] == $key) {
          $edit['enabled'][$key] = 1; // autoenable the default language
        }
        if ($key == 'en') {
          // Disallow name change for English locale
          db_query("UPDATE {locales_meta} SET isdefault = %d, enabled = %d WHERE locale = 'en'", ($edit['sitedefault'] == $key), $edit['enabled'][$key]);
        }
        else {
          db_query("UPDATE {locales_meta} SET name = '%s', isdefault = %d, enabled = %d WHERE locale = '%s'", $edit['name'][$key], ($edit['sitedefault'] == $key), $edit['enabled'][$key], $key);
        }
      }
      break;

    // Remove existing language
    case t('Delete'):
      $languages = locale_supported_languages(FALSE, TRUE);
      if (isset($languages['name'][$edit['langcode']])) {
        db_query("DELETE FROM {locales_meta} WHERE locale = '%s'", $edit['langcode']);
        db_query("DELETE FROM {locales_target} WHERE locale = '%s'", $edit['langcode']);
        drupal_set_message(t('%locale language removed.', array('%locale' => '<em>'. t($languages['name'][$edit['langcode']]) .'</em>')));
        watchdog('special', t('%locale language removed.', array('%locale' => '<em>'. $edit['langcode'] .'</em>')));
      }
      break;
  }
  print theme('page', _locale_admin_manage_screen());
}

/**
 * User interface for the language deletion confirmation screen
 */
function locale_admin_manage_delete_screen() {
  include_once 'includes/locale.inc';
  $langcode = arg(4);

  // Do not allow deletion of English locale
  if ($langcode == 'en') {
    drupal_goto('admin/locale/language/overview');
    return;
  }

  // For other locales, warn user that data loss is ahead
  $form = form_hidden('langcode', $langcode);
  $form .= form_submit(t('Delete'));
  $languages = locale_supported_languages(FALSE, TRUE);
  print theme('page', form(form_item(t("Delete language '%name'", array('%name' => t($languages['name'][$langcode]))), $form, t('Are you sure you want to delete the language and all data associated with it?')), 'POST', url('admin/locale/language/overview')));
}

/**
 * Page handler for the language addition screen
 */
function locale_admin_manage_add() {
  include_once 'includes/locale.inc';
  $edit = &$_POST['edit'];
  $isocodes = _locale_get_iso639_list();

  switch ($_POST['op']) {
    // Try to add new language
    case t('Add language'):
      // Check for duplicates
      if (db_num_rows(db_query("SELECT locale FROM {locales_meta} WHERE locale = '%s'", $edit['langcode'])) == 0) {

        // Set language name from the available list if needed
        if ($edit['langcode'] && !$edit['langname'] && isset($isocodes[$edit['langcode']])) {
          _locale_add_language($edit['langcode'], $isocodes[$edit['langcode']][0]);
          drupal_goto('admin/locale');
        }

        // Add language, if we have the details
        elseif ($edit['langcode'] && $edit['langname']) {
          _locale_add_language($edit['langcode'], $edit['langname']);
          drupal_goto('admin/locale');
        }

        // Seems like we have not received some data
        drupal_set_message(t('You need to specify both the language code and the English name of the new language.'), 'error');
      }
      else {
        drupal_set_message(t('The language %language (%code) is already set up.', array('%language' => '<em>'. $edit['langname'] .'</em>', '%code' => '<em>'. $edit['langcode'] .'</em>')), 'error');
      }
      break;
  }
  print theme('page', _locale_admin_manage_add_screen());
}

// ---------------------------------------------------------------------------------
// Gettext Portable Object import functionality (administration only)

/**
 * Page handler for the translation import screen
 */
function locale_admin_import() {
  include_once 'includes/locale.inc';
  $edit = &$_POST['edit'];
  switch ($_POST['op']) {
    case t('Import'):

      // Add language, if not yet supported
      $languages = locale_supported_languages(TRUE, TRUE);
      if (!isset($languages['name'][$edit['langcode']])) {
        $isocodes = _locale_get_iso639_list();
        _locale_add_language($edit['langcode'], $isocodes[$edit['langcode']][0], FALSE);
      }

      // Now import strings into the language
      $file = file_check_upload('file');
      if ($ret = _locale_import_po($file, $edit['langcode'], $edit['mode']) == FALSE) {
        watchdog('error', t('Translation import of %filename failed.', array('%filename' => "<em>$file->filename</em>")));
      }

      drupal_goto('admin/locale');
      break;
  }
  print theme('page', _locale_admin_import_screen());
}


// ---------------------------------------------------------------------------------
// Gettext Portable Object export functionality (administration only)

/**
 * Page handler for the translation export screen
 */
function locale_admin_export() {
  include_once 'includes/locale.inc';
  switch ($_POST['op']) {
    case t('Export'):
      _locale_export_po($_POST['edit']['langcode']);
      break;
  }
  print theme('page', _locale_admin_export_screen());
}


// ---------------------------------------------------------------------------------
// String search and editing functionality (administration only)

/**
 * Page handler for the string search and administration screen
 */
function locale_admin_string() {
  include_once 'includes/locale.inc';
  $op = ($_POST['op'] ? $_POST['op'] : arg(3));
  $edit =& $_POST['edit'];

  switch ($op) {
    case 'delete':
      $output .= _locale_string_delete(check_query(arg(4)));
      $output .= _locale_string_seek();
      break;
    case 'edit':
      $output .= _locale_string_edit(check_query(arg(4)));
      $output .= _locale_string_seek();
      break;
    case t('Search'):
    case 'search':
      $output = _locale_string_seek();
      $output .= _locale_string_seek_form();
      break;
    case t('Save translations'):
      $output .= _locale_string_save(check_query(arg(4)));
      drupal_goto('admin/locale/string/search');
      break;
    default:
  }
  print theme('page', $output);
}

?>
