<?php
// $Id$

function locale_help($section = "admin/help#locale") {
  $output = "";

  switch ($section) {
    case 'admin/help#locale':
      $output .= "<p>Most programs are written and documented in English, and use English to interact with users.  This is also true for a great deal of web sites.  However, most people are less comfortable with English than with their native language, and would prefer to use their mother tongue as much as possible.  Many people love see their web site showing a lot less English, and far more of their own language.</p>";
      $output .= "<p>Therefore Drupal provides a framework to setup a multi-lingual web site, or to overwrite the default English texts.  We explored the various alternatives to support internationalization (I18N) and decided to design the framework in such a way that the impact of internationalization on drupal's sources is minimized, modular and doesn't require a HTML or PHP wizard to maintain translations.  Maintaining translations had to be simple so it became as easy as filling out forms on the administration page.</p>";
      $output .= "<h3>How to translate texts</h3>";
      $output .= "<p>The actual translation starts at the %overview page of the locale section in the administration pages. In the menu on the left under \"localization\" you will see a list of the languages you have configured. Click on the name of the language to start translating. Looking at a page full of all the strings in the site can be a bit overwhelming, so Drupal allows you to limit the strings you are working on. If you want to limit based on translated strings click \"translated strings\", if you want to limit the string based on the untranslated strings click \"untranslated strings\". Both will take you to the same page. Once there enter the string pattern to limit on, choose the language to search for, and the status, weather translated, untranslated or both, finally where you want to look, modules, specific modules, or pages.</p>";
      $output .= "<p>At the locale page, users with the proper access rights will see the various texts that need translation on the left column of the table.</p>";
      $output .= "<p>Below the text you can see an example URI where this text shows up one your site.  Chances are most of these texts will be used and displayed on more than one page, though only one example URI is presented.</p>";
      $output .= "<p>The second column displays the supported languages as defined in the configuration file.  See below for more information on how to support new languages.  If the symbol for a language is seen like <strike>this</strike>, it means that this entry still needs to be translated into that language.  If not, it has been translated already.</p>";
      $output .= "<p>To add or change a translation click the \"edit locale\" link in the third column, the \"operations\" column.  You'll be presented the original text and fields for translation in the supported languages.  Enter the translations and confirm by clicking the \"Save translations\" button.  The translations need not be accurate; they are for your site so you can choose what to show to your users.</p>";
      $output .= "<p>To delete a translation, click the \"delete locale\" link at the overview page and the translation will be immediately deleted without confirmation.  Deleting translations is convenient for removing texts that belonged to an obsolete module.</p>";
      $output .= "<p>In some texts special strings such as \"%a\" and \"%b\" show up.  Those get replaced by some string at run-time when Drupal dynamically generate pages.  You can find out which string this is by looking at the page where the text appears.  This is where the above mentioned URI can come in handy.</p>";
      $output .= "<h3>How to add new languages</h3>";
      $output .= "<p>Adding a new language requires you to edit your configuration file and your SQL database.  Assuming you want to support Dutch (ISO 639 code: \"nl\") and French (ISO 639 code: \"fr\"), you add the following line to your configuration file's <code>\$languages</code>-variable:</p>";
  $output .= "<pre>
    \$languages = array(\"nl\" => \"Dutch / Nederlands\", \"fr\" => \"French / Francais\");
  </pre>";

      $output .= "<p>Note that the default language must come first and that if you want to overwrite the default text you can add an entry for English (ISO 639 code: \"en\"):</p>";
      $output .= "<pre>
    \$languages = array(\"en\" => \"English\", \"nl\" => \"Dutch / Nederlands\", \"fr\" => \"French / Francais\");
  </pre>";
      $output .= "<p>After having edited your configuration file, make sure your SQL table \"locales\" has the required database fields setup to host your new translations.  You can add the required rows to your \"locales\" table from the MySQL prompt:</p>";
      $output .= "<pre>
    mysql> ALTER TABLE {locales} ADD en TEXT DEFAULT '' NOT NULL;
    mysql> ALTER TABLE {locales} ADD nl TEXT DEFAULT '' NOT NULL;
    mysql> ALTER TABLE {locales} ADD fr TEXT DEFAULT '' NOT NULL;
  </pre>";
      $output = t($output,  array("%overview" => l(t("overview"), "admin/locale")));
      break;
    case 'admin/system/modules#description':
      $output = t("Enables the translation of the user interface to languages other than English.");
      break;
    case 'admin/locale':
      $output = t("The locale module handles translations into new languages.  It also enables you to add jargon, slang or other special language as fits the web site.  For each language you want to support, a line needs to be added to your configuration file.");
      break;
    case 'admin/locale/search':
      $output = t("Search the localization database. ('*' can be used as a wildcard)");
      break;
    case 'admin/locale/translated':
      $output = t("Start by searching the translated strings.");
      break;
    case 'admin/locale/untranslated':
      $output = t("Start by searching the untranslated strings.");
      break;
  }

  return $output;
}

function locale_perm() {
  return array("administer locales");
}

function locale_link($type) {
  global $languages;

  if ($type == "system") {
    if (user_access("administer locales")) {

      menu("admin/locale", t("localization"), NULL, 5);
      menu("admin/locale/search", t("search string"), "locale_admin", 8);
      menu("admin/locale/help", t("help"), "locale_help", 9);
      menu("admin/locale/edit", t("edit string"), "locale_admin", 0, 1); // hidden menu
      menu("admin/locale/delete", t("delete string"), "locale_admin", 0, 1); // hidden menu

      foreach ($languages as $key => $value) {
        menu("admin/locale/$key", "$value", NULL);
        menu("admin/locale/$key/translated", t("translated strings"), "locale_admin");
        menu("admin/locale/$key/untranslated", t("untranslated strings"), "locale_admin");
      }
    }
  }
}

function locale_user($type, &$edit, &$user) {
  global $languages;
  if ($type == "edit_form" && count($languages) > 1) {
    $output = form_select(t("Language"), "language", $user->language, $languages, t("Selecting a different language will change the language of the site."));
  }
  return $output;
}

function locale_delete($lid) {
  db_query("DELETE FROM {locales} WHERE lid = %d", $lid);
  locale_refresh_cache();

  return t("deleted string");
}

function locale_save($lid) {
  $edit =& $_POST["edit"];
  foreach ($edit as $key=>$value) {
    db_query("UPDATE {locales} SET $key = '%s' WHERE lid = %d", $value, $lid);
  }
  locale_refresh_cache();
  // delete form data so it will remember where it came from
  $edit = '';

  return t("saved string");
}

function locale_refresh_cache() {
  global $languages;

  foreach (array_keys($languages) as $locale) {
    $result = db_query("SELECT string, %s FROM {locales} ", $locale);
    while ($data = db_fetch_object($result)) {
      if (empty($data->$locale)) {
        $t[$data->string] = $data->string;
      }
      else {
        $t[$data->string] = $data->$locale;
      }
    }
    cache_set("locale:$locale", serialize($t));
  }
}

function locale_edit($lid) {
  global $languages;

  $result = db_query("SELECT * FROM {locales} WHERE lid = '$lid'");
  if ($translation = db_fetch_object($result)) {

    $form .= form_item(t("Original text"), wordwrap(drupal_specialchars($translation->string, 0)));

    foreach ($languages as $code=>$language) {
      $form .= (strlen($translation->string) > 30) ? form_textarea($language, $code, $translation->$code, 50, 10) : form_textfield($language, $code, $translation->$code, 50, 128);
    }

    $form .= form_submit(t("Save translations"));

    return form($form);
  }
}

function locale_languages($translation) {
  global $languages;

  foreach ($languages as $key => $value) {
    $output .= ($translation->$key) ? "<a href=\"#\" title=\"". $translation->$key ."\">$key</a> " : "<strike>$key</strike> ";
  }

  return $output;
}

function locale_seek_query() {
  $fields = array("string", "language", "status");
  if (is_array($_REQUEST["edit"])) {
    foreach ($_REQUEST["edit"] as $key => $value) {
      if (!empty($value) && in_array($key, $fields)) {
        $query->$key = $value;
      }
    }
  }
  else {
    foreach ($_REQUEST as $key => $value) {
      if (!empty($value) && in_array($key, $fields)) {
        $query->$key = strpos(",", $value) ? explode(",", $value) : $value;
      }
    }
  }
  return $query;
}

function locale_seek() {
  global $id, $languages;
  $op = $_POST["op"];
  $query = locale_seek_query();

  if ($query) {

    if ($query->status) {
      switch ($query->language) {
        case "all":
          foreach ($languages as $key=>$value) {
            $tmp[] = $key . (check_query($query->status) == 1 ? " !=" : " =") ." ''";
          }
          $sql[] = implode(" AND ", $tmp);
          break;
        case "any":
          foreach ($languages as $key=>$value) {
            $tmp[] = $key . (check_query($query->status) == 1 ? " !=" : " =") ." ''";
          }
          $sql[] = "(". implode(" OR ", $tmp) .")";
          break;
        default:
          $sql[] = check_query($query->language) . (check_query($query->status) == 1 ? " !=" : " =") ." ''";
      }
    }

    if ($query->string) {
      $string_query[] = "string LIKE '%". check_query($query->string) ."%'";
      if ($query->status != 2) {
        if (strlen($query->language) == 2) {
          $string_query[] = check_query($query->language) ." LIKE '%". check_query($query->string) ."%'";
        }
        else {
          foreach ($languages as $key=>$value) {
            $string_query[] = check_query($key) ." LIKE '%". check_query($query->string) ."%'";
          }
        }
      }
      $sql[] = "(". implode(" OR ", $string_query) .")";
    }

    $result = pager_query("SELECT * FROM {locales} ". (count($sql) ? " WHERE ". implode(" AND ", $sql) : "") ." ORDER BY string", 50);

    $header = array(t("string"), (($query->status != 2 && strlen($query->language) == 2) ? t("translated string") : t("languages")), array("data" => t("operations"), "colspan" => "2"));
    while ($locale = db_fetch_object($result)) {
      $rows[] = array("$locale->string<br /><small><i>$locale->location</i></small>", array("data" => (($query->status != 2 && strlen($query->language) == 2) ? $locale->{$query->language} : locale_languages($locale)), "align" => "center"), array("data" => l(t("edit locale"), "admin/locale/edit/$locale->lid"), "nowrap" => "nowrap"), array("data" => l(t("delete locale"), "admin/locale/delete/$locale->lid"), "nowrap" => "nowrap"));
    }

    $request = array();
    if (count($query)) {
      foreach ($query as $key => $value) {
        $request[$key] = (is_array($value)) ? implode(",", $value) : $value;
      }
    }

    if ($pager = pager_display(NULL, 50, 0, "admin", $request)) {
      $rows[] = array(array("data" => "$pager", "colspan" => "5"));
    }

    $output .= table($header, $rows);

  }

  return $output;
}

function locale_seek_form() {
  global $languages;
  $edit =& $_POST["edit"];
  $form .= form_textfield(t("Strings to search for"), "string", $edit["string"], 30, 30, t("Leave blank to show all strings."));
  $form .= form_select(t("Language"), "language", ($edit["language"] ? $edit["language"] : key($languages)), array_merge(array("any" => t("Any language"), "all" => t("All languages")), $languages), t("In which language must the string be translated/untranslated (see status)?"));
  $form .= form_select(t("Status"), "status", $edit["status"], array(2 => t("Untranslated"), 1 => t("Translated"), 0 => t("All")));
  $form .= form_submit(t("Search"));

  $output .= form($form);

  return $output;
}

function locale_admin() {
  $op = $_POST["op"];
  $edit =& $_POST["edit"];

  if (user_access("administer locales")) {
    locale_admin_initialize();

    if (empty($op)) {
      $op = arg(2);
    }

    switch ($op) {
      case "delete":
        $output = status(locale_delete(check_query(arg(3))));
        $output .= locale_seek();
        break;
      case "edit":
        $output = locale_edit(check_query(arg(3)));
        break;
      case "search":
        if (locale_seek_query()) {
          $output = locale_seek();
        }
        $output .= locale_seek_form();
        break;
      case t("Search"):
        $output = locale_seek();
        $output .= locale_seek_form();
        break;
      case t("Save translations"):
        $output = status(locale_save(check_query(arg(3))));
        $output .= locale_seek();
        break;
      default:
        if (arg(3) == "translated") {
          $edit["status"] = 1;
          $edit["language"] = arg(2);
        }
        else {
          $edit["status"] = 2;
          $edit["language"] = arg(2);
        }
        $output = locale_seek();
        $output .= locale_seek_form();
    }
    return $output;
  }
  else {
    return message_access();
  }
}

function locale_admin_initialize() {
  /*
  ** This function inserts common strings into the locale table (eg.
  ** names of months and days).  We use $revision and a stored variable
  ** to track if the locale table is up-to-date.
  */

  $revision = 1;

  if (variable_get("locale_initialize_revision", 0) < $revision) {
    variable_set("locale_initialize_revision", $revision);
    for ($i = 1; $i <= 12; $i++) {
      $stamp = mktime(0, 0, 0, $i, 1, 1971);
      t(date("F", $stamp));
      t(date("M", $stamp));
    }

    for ($i = 0; $i <= 7; $i++) {
      $stamp = $i * 86400;
      t(date("D", $stamp));
      t(date("l", $stamp));
    }
  }
}

function locale($string) {
  global $locale;
  static $locale_t;

  if (!isset($locale_t)) {
    $cache = cache_get("locale:$locale");

    if ($cache == 0) {
      locale_refresh_cache();
      $cache = cache_get("locale:$locale");
    }
    $locale_t = unserialize($cache->data);
  }

  if (is_array($locale_t) && array_key_exists($string, $locale_t)) {
    $string = $locale_t[$string];
  }
  else {
    $result = db_query("SELECT lid, $locale FROM {locales} WHERE string = '%s'", $string);
    if (!db_fetch_object($result)) {
      db_query("INSERT INTO {locales} (string, location) VALUES ('%s', '%s')", $string, request_uri());
      cache_clear_all("locale:$locale");
    }
  }

  return $string;
}

?>
