<?php
// $Id$

function locale_help() {
 ?>
  <p>Normally programs are written and documented in English, and use English to interact with users.  This is true for a great deal of websites.  However, most people are less comfortable with English than with their own native language, and would prefer to use their mother tongue as much as possible.  Many people love see their website showing a lot less of English, and far more of their own language.</p>
  <p>Therefore drupal provides a framework to setup a multi-lingual website, or to overwrite the default texts in English.  We explored the various alternatives to support internationalization and decided to design the framework in such a way that the impact of internationalization on drupal's sources is minimized, modular and that it doesn't require a HTML or PHP wizard to maintain translations.  Maintaining translations had to be simple so it became as easy as filling out forms on the administration page.</p>

  <h3>How to translate texts</h3>

  <p>The actual translation starts at the "overview" of the locale page of the administration pages.  To allow a user to maintain the translations, he obviously needs access to the locale module.  See the account documentation for more information on roles and permissions.</p>
  <p>At the locale page, users with the proper access rights will see the various texts that need translation on the left column of the table.</p>
  <p>Below the text you can see an URI where this text shows up one your site.  Changes are most of these texts will be used and displayed on more than one page, though only one example URI is presented.</p>
  <p>The second column displays the supported languages as defined in the configuration file.  See below for more information on how to support new languages.  If the symbol for a language is seen like <strike>this</strike>, it means that this entry still needs to be translated into that language.  If not, it has been translated already.</p>
  <p>To add or change a translation click the "edit locale" link in the third column, the "operations" column.  You'll be presented the original text and fields for translation in the supported languages.  Enter the translations and confirm by clicking the "Save translations" button.  The translations need not be accurate; they are for your site so you can choose what to show to your users.</p>
  <p>To delete a translation, click the "delete locale" link at the overview page and the translation will be immediately deleted without confirmation.  Deleting translations is convenient for removing texts that belonged to an obsolete module.</p>
  <p>In some texts special strings such as "%a" and "%b" show up.  Those get replaced by some string at run-time when Drupal dynamically generate pages.  You can find out which string this is by looking at the page where the text appears.  This is where the above mentioned URI can come in handy.</p>

  <h3>How to add new languages</h3>

  <p>Adding a new language requires you to edit your configuration file and to edit your SQL database.  Assuming you want to support Dutch (ISO 639 code: "nl") and French (ISO 639 code: "fr"), you add the following line to your configuration file's <code>$languages</code>-variable:</p>
  <pre>
    $languages = array("nl" => "Dutch / Nederlands", "fr" => "French / Francais");
  </pre>
  <p>Note that the default language must come first and that if you want to overwrite the default text you can add an entry for English (ISO 639 code: "en"):</p>
  <pre>
    $languages = array("en" => "English", "nl" => "Dutch / Nederlands", "fr" => "French / Francais");
  </pre>
  <p>After having edited your configuration file, make sure your SQL table "locales" has the required database fields setup to host your new translations.  You can add the required rows to your "locales" table from the MySQL prompt:</p>
  <pre>
    mysql> ALTER TABLE locales ADD en TEXT DEFAULT '' NOT NULL;
    mysql> ALTER TABLE locales ADD nl TEXT DEFAULT '' NOT NULL;
    mysql> ALTER TABLE locales ADD fr TEXT DEFAULT '' NOT NULL;
  </pre>
 <?php
}

function locale_perm() {
  return array("administer locales");
}

function locale_link($type) {
  if ($type == "admin" && user_access("administer locales")) {
    $links[] = la(t("locales"), array("mod" => "locale"));
  }

  return $links ? $links : array();
}

function locale_conf_options() {
  return form_select("Locale support", "locale", variable_get("locale", 0), array("Disabled", "Enabled"), "Disable locale support if your site does not require translation or internationalization support.");
}

function locale_delete($lid) {
  db_query("DELETE FROM locales WHERE lid = '$lid'");
  locale_refresh_cache();
}

function locale_save($lid) {
  global $edit;
  foreach ($edit as $key=>$value) {
    db_query("UPDATE locales SET $key = '%s' WHERE lid = '$lid'", $value);
  }
  locale_refresh_cache();
  // delete form data so it will remember where it came from
  $edit = '';
}

function locale_refresh_cache() {
  global $languages;

  foreach (array_keys($languages) as $locale) {
    $result = db_query("SELECT string, %s FROM locales", $locale);
    while ($data = db_fetch_object($result)) {
      $t[$data->string] = $data->$locale;
    }
    cache_set("locale:$locale", serialize($t));
  }
}

function locale_edit($lid) {
  global $languages;

  $result = db_query("SELECT * FROM locales WHERE lid = '$lid'");
  if ($translation = db_fetch_object($result)) {
    $form .= form_item(t("Original text"), "<pre>". wordwrap(check_output($translation->string)) ."</pre>");
    foreach ($languages as $code=>$language) $form .= (strlen($translation->string) > 30) ? form_textarea($language, $code, $translation->$code, 50, 10) : form_textfield($language, $code, $translation->$code, 50, 128);
    $form .= form_submit("Save translations");

    return form($form);
  }
}

function locale_languages($translation) {
  global $languages;

  foreach ($languages as $key=>$value) {
    $output .= ($translation->$key) ? "<a href=\"#\" title=\"".check_output($translation->$key)."\">$key</a> " : "<strike>$key</strike> ";
  }

  return $output;
}

function locale_links($translation) {
  global $languages;

  foreach ($languages as $key=>$value) {
    if ($translation) {
      $output .= la(t("translated '$key' strings"), array("mod" => "locale", "op" => "translated", "language" => $key))." | ";
    }
    else {
      $output .= la(t("untranslated '$key' strings"), array("mod" => "locale", "op" => "untranslated", "language" => $key))." | ";
    }
  }

  return $output;
}

function locale_seek() {
  global $id, $edit, $languages, $op, $locale_settings;

  if ($op != 'overview' && !$edit && session_is_registered("locale_settings")) {
    $edit = $locale_settings;
  }
  else {
    $locale_settings = $edit;
    session_register("locale_settings");
  }

  if ($op != 'Search' || is_array($edit)) {

    if ($edit["status"]) {
      switch ($edit["language"]) {
        case "all":
          foreach ($languages as $key=>$value) {
            $tmp[] = $key . (check_query($edit["status"]) == 1 ? " !=" : " =") ." ''";
          }
          $query[] = implode(" && ", $tmp);
          break;
        case "any":
          foreach ($languages as $key=>$value) {
            $tmp[] = $key . (check_query($edit["status"]) == 1 ? " !=" : " =") ." ''";
          }
          $query[] = "(". implode(" || ", $tmp) .")";
          break;
        default:
          $query[] = check_query($edit["language"]) . (check_query($edit["status"]) == 1 ? " !=" : " =") ." ''";
      }
    }

    if ($edit["module"]) {
      $query[] = "location LIKE '%mod=". (check_query($edit["module"]) != "all" ? check_query($edit["module"]) : "") ."%'";
    }

    if ($edit["string"]) {
      $string_query[] = "string LIKE '%". check_query($edit["string"]) ."%'";
      if ($edit["status"] != 2) {
        if (strlen($edit["language"]) == 2) {
          $string_query[] = check_query($edit["language"]). " LIKE '%". check_query($edit["string"]) ."%'";
        }
        else {
          foreach ($languages as $key=>$value) {
            $string_query[] = check_query($key). " LIKE '%". check_query($edit["string"]) ."%'";
          }
        }
      }
      $query[] = "(" . implode(" || ", $string_query) . ")";
    }

    $result = db_query("SELECT * FROM locales". (count($query) ? " WHERE ". implode(" && ", $query) : ""). " ORDER BY string");

    $output .= "<table border=\"1\" cellpadding=\"2\" cellspacing=\"2\">\n";
    $output .= " <tr><th>string</th>";

    if ($edit["status"] != 2 && strlen($edit["language"]) == 2) {
      $output .= "<th>translated string</th>";
    }
    else {
      $output .= "<th>languages</th>";
    }

    $output .= "<th colspan=\"2\">operations</th></tr>\n";

    while ($locale = db_fetch_object($result)) {
      $output .= " <tr><td>". check_output($locale->string) ."<br /><small><i>". check_output($locale->location) ."</i></small></td>";

      if ($edit["status"] != 2 && strlen($edit["language"]) == 2) {
        $output .= "<td>". check_output($locale->$edit["language"]) ."</td>";
      }
      else {
        $output .= "<td align=\"center\">". check_output(locale_languages($locale)) ."</td>";
      }

      $output .= "<td nowrap=\"nowrap\">".la(t("edit locale"), array("mod" => "locale", "op" => "edit", "id" => $locale->lid))."</td><td nowrap=\"nowrap\">".la(t("delete locale"), array("mod" => "locale", "op" => "delete", "id" => $locale->lid))."</td></tr>";
    }
    $output .= "</table>\n";
  }

  reset($languages);

  $form .= form_textfield("String", "string", $edit["string"], 30, 30, "Leave blank to show all strings. This is treated as a regular expression.");
  $form .= form_select("Language", "language", ($edit["language"] ? $edit["language"] : key($languages)), array_merge(array("any" => "Any language", "all" => "All languages"), $languages), "In which language must the string be translated/untranslated (see status)?");
  $form .= form_select("Status", "status", $edit["status"], array(2 => "Untranslated", 1 => "Translated", 0 => "All"));
  $form .= form_select("Module", "module", $edit["module"], array_merge(array("0" => "All modules + pages", "all" => "All modules"), module_list()));
  $form .= form_submit("Search");

  $output .= form($form);

  return $output;
}

function locale_admin() {
  global $id, $edit, $op, $language;

  if (!variable_get("locale", 0)) {
    print status("locale disabled.");
  }
  else if (user_access("administer locales")) {
    print "<small>". locale_links(1) . locale_links(0) .la(t("search"), array("mod" => "locale", "op" => "Search"))." | ".la(t("overview"), array("mod" => "locale", "op" => "overview"))." | ".la(t("help"), array("mod" => "locale", "op" => "help"))."</small><hr />\n";

    switch ($op) {
      case "delete":
        locale_delete(check_query($id));
        print locale_seek();
        break;
      case "help":
        print locale_help();
        break;
      case "edit":
        print locale_edit(check_query($id));
        break;
      case "Search":
        print locale_seek();
        break;
      case "translated":
        $edit["status"] = 1;
        $edit["language"] = $language;
        print locale_seek();
        break;
      case "untranslated":
        $edit["status"] = 2;
        $edit["language"] = $language;
        print locale_seek();
        break;
      case "Save translations":
        print locale_save(check_query($id));
      default:
        print locale_seek();
    }
  }
  else {
    print message_access();
  }
}

function locale($string) {
  global $locale;
  static $locale_t;

  if (variable_get("locale", 0)) {
    if (!isset($locale_t)) {
      $locale_t = unserialize(cache_get("locale:$locale"));
    }

    if ($locale_t[$string] != "") {
      $string = check_output($locale_t[$string]);
    }
    else {
      $result = db_query("SELECT lid, $locale FROM locales WHERE string = '%s'", $string);
      if (!db_fetch_object($result)) {
        db_query("INSERT INTO locales (string, location) VALUES ('%s', '%s')", $string, getenv("PATH_INFO"));
      }
    }
  }

  return $string;
}

?>
