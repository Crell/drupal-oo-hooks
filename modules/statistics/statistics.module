<?php
// $Id$

/**
 * @file
 * Logs access statistics for your site.
 */

/**
 * Implementation of hook_help().
 */
function statistics_help($section) {
  switch ($section) {
    case 'admin/help#statistics':
      return t("
      <h3>Introduction</h3>
      <p>The statistics module keeps track of numerous statistics for your site but be warned, statistical collection does cause a little overhead, thus everything comes <strong>disabled</strong> by default.</p>
      <p>The module counts how many times, and from where -- using HTTP referrer -- each of your posts is viewed. Once we have that count the module can do the following with it:
      <ul>
      <li>The count can be displayed in the node's link section next to \"# comments\".</li>
      <li>A configurable block can be added which can display a configurable number of the day's top stories, the all time top stories, and the last stories read.</li>
      <li>A configurable user page can be added, which can display the day's top stories, the all time top stories, and the last stories read.  You can individually configure how many posts are displayed in each section.</li>
      </ul>
      <p>Notes on using the statistics:</p>
      <ul>
      <li>If you enable the view counters for content, this adds 1 database query for each node that is viewed (2 queries if it's the first time the node has ever been viewed).</li>
      <li>If you enable the access log, this adds 1 database query for each page that Drupal displays.  Logged information includes:  HTTP referrer (if any), node being accessed (if any), user ID (if any), the IP address of the user, and the time the page was viewed.</li>
      </ul>
      <p>As with any new module, the statistics module needs to be <a href=\"%modules\">enabled</a> before you can use it.  Also refer to the <a href=\"%permissions\">permissions section</a>, as this module supports four separate permissions.</p>
      <h3><a href=\"%referers\">referrers log</a></h3>
      <p>This admin page shows you site-wide referrer statistics.  You can see <em>'all'</em> statistics, <em>'external'</em> statistics or <em>'internal'</em> statistics.  Default is 'all'.</p>
      <h3><a href=\"%access\">access log</a></h3>
      <p>This admin page gives you an at-a-glance look at your most popular content.  It is useful for understanding what content on your Drupal site is the most popular.  Also on this page are links to the referrer statistics for each listed node.</p>
      <h3>Configuring the statistics module</h3>
      <p>There are some configuration options added to the main <a href=\"%configuration\">administer &raquo; settings &raquo; statistics</a> section:</p>
      <ul>
      <li><em>enable access log</em> -- allows you to turn the access log on and off.  This log is used to store data about every page accessed, such as the remote host's IP address, where they came from (referrer), what node they've viewed, and their user name.  Enabling the log adds one database call per page displayed by Drupal.</li>
      <li><em>discard access logs older than</em> -- allows you to configure how long an access log entry is saved, after which time it is deleted from the database table. To use this you need to run \"cron.php\"</li>
      <li><em>enable node view counter</em> -- allows you to turn on and off the node-counting functionality of this module.  If it is turned on, an extra database query is added for each node displayed, which increments a counter.</li>
      <li><em>display node view counters</em> -- allows you to globally disable the displaying of node view counters.  Additionally, a user group must have 'access statistics' permissions to view the counters.</li>
      </ul>
      <h3>Popular content block</h3>
      <p>This module creates a block that can display the day's top viewed content, the all time top viewed content, and the last content viewed.  Each of these links can be enabled or disabled individually, and the number of posts displayed for each can be configured with a drop down menu.  If you disable all sections of this block, it will not appear.</p>
      <p>Don't forget to <a href=\"%block\">enable the block</a>.</p>
      <h3>Popular content page</h3>
      <p>This module creates a user page that can display summaries of the day's most popular viewed content, the all time most popular content, and the last content viewed.  Each of these summaries can be enabled or disabled individually, and the number of posts displayed for each can be configured with a drop down menu.  You can also assign a name for the automatically generated link to the user page.  If no name is set, the link will not be displayed.</p>
      <h3>Permissions</h3><p>This module has four permissions that need to be configured in the <a href=\"%permissions\">permissions section</a>.</p>
      <ul>
      <li><em>access statistics</em> - enable for user roles that get to see view counts for individual content.  (This does not define access to the block)</li>
      <li><em>administer statistics module</em> - enable for user roles that get to configure the statistics module.</li><li><em>administer statistics</em> - enable for user roles that get to view the referrer statistics.</li>
      </ul>
      <p>If '<em>administer statistics</em>' and '<em>access statistics</em>' are both enabled, the user will see a link from each node to that node's referrer statistics (if enabled).</p>",
      array('%modules' => url('admin/modules'), '%permissions' => url('admin/user/configure/permission'), '%referer' => url('admin/logs/hits/referrers'), '%access' => url('admin/logs/access'), '%configuration' => url('admin/settings/statistics'), '%block' => url('admin/block')));
    case 'admin/modules#description':
      return t('Logs access statistics for your site.');
    case 'admin/settings/statistics':
      return t('Settings for the statistical information that Drupal will keep about the site. See <a href="%statistics">site statistics</a> for the actual information.', array('%statistics' => url('admin/logs/hits')));
    case 'admin/logs/hits/posts':
      return t('This page gives you an at-a-glance look at your most popular content.');
    case 'admin/logs/hits/pages':
      return t('This page shows access statistics for each page of your website.');
    case 'admin/logs/hits/users':
      return t('This page shows access statistics for each user of your website.');
    case 'admin/logs/hits/hostnames':
      return t('This page shows access statistics for each hostname visiting your website.');
    case 'admin/logs/referrers':
      return t('This page shows your site-wide referrer statistics.  You can optionally view just the "external referrers" or the "internal referrers". Referrers are web pages, both local and on other sites, that point to your web site.');
    case 'admin/logs/referrers/internal':
      return t('This page shows you only "internal referrers". These are links pointing to your web site from within your web site.');
    case 'admin/logs/referrers/external':
      return t('This page shows you only "external referrers". These are links pointing to your web site from outside your web site.');
    case strstr($section, 'admin/logs/hits'):
      return t("This page shows you who is accessing your web site.  You can see the hostnames and referrers.  For example, it is easy to inspect a user's navigation history/trail by clicking on <em>track user</em>.");
  }
}

/**
 * Implementation of hook_exit().
 *
 * This is where statistics are gathered on page accesses.
 */
function statistics_exit() {
  global $user, $recent_activity;

  if (variable_get('statistics_count_content_views', 0)) {
    // We are counting content views.
    if ((arg(0) == 'node') && arg(1)) {
      // A node has been viewed, so update the node's counters.
      db_query('UPDATE {node_counter} SET daycount = daycount + 1, totalcount = totalcount + 1, timestamp = %d WHERE nid = %d', time(), arg(1));
      // If we affected 0 rows, this is the first time viewing the node.
      if (!db_affected_rows()) {
        // We must create a new row to store counters for the new node.
        db_query('INSERT INTO {node_counter} (nid, daycount, totalcount, timestamp) VALUES(%d, 1, 1, %d)', arg(1), time());
      }
    }
  }
  if ((variable_get('statistics_enable_access_log', 0)) && (module_invoke('throttle', 'status') < 5)) {
    // Statistical logs are enabled.
    $referrer = referer_uri();
    $hostname = $_SERVER['REMOTE_ADDR'];
    $path = (drupal_get_path_alias($_GET['q'])) ? drupal_get_path_alias($_GET['q']) : $_GET['q'];

    // Log this page access.
    db_query("INSERT INTO {accesslog} (title, path, url, hostname, uid, timestamp) values('%s', '%s', '%s', '%s', %d, %d)", drupal_get_title(), $path, $referrer, $hostname, $user->uid, time());
  }
}

/**
 * Implementation of hook_perm().
 *
 * The following permissions are defined:
 * - "administer statistics module": full administrative control of module
 * - "administer statistics": view statistics / referrer log
 * - "access statistics": see how many times individual nodes have been
 *   viewed (if enabled)
 */
function statistics_perm() {
  return array('administer statistics module', 'administer statistics', 'access statistics');
}

/**
 * Implementation of hook_link().
 */
function statistics_link($type, $node = 0, $main = 0) {
  global $id;

  $links = array();

  if ($type != 'comment' && user_access('access statistics') && variable_get('statistics_display_counter', 0)) {
    $statistics = statistics_get($node->nid);
    if ($statistics) {
      if (user_access('administer statistics')) {
        $links[] = l(format_plural($statistics['totalcount'], '1 read', '%count reads'), 'admin/logs/hits/page/'. urlencode($node->title));
      }
      else {
        $links[] = format_plural($statistics['totalcount'], '1 read', '%count reads');
      }
    }
  }

  if ($type == 'page' && user_access('access content')) {
    $userlink = variable_get('statistics_userpage_link', '');
    if ($userlink) {
      $links[] = l(t($userlink), 'statistics', array('title' => t("View this site's most popular content.")));
    }
  }

  return $links;
}

/**
 * Implementation of hook_menu().
 */
function statistics_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array('path' => 'statistics', 'title' => t('most popular content'),
      'callback' => 'statistics_page',
      'access' => user_access('access content'),
      'type' => MENU_SUGGESTED_ITEM);

    $access = user_access('administer statistics module') || user_access('administer statistics');
    $items[] = array('path' => 'admin/logs/hits', 'title' => t('hits'),
      'callback' => 'statistics_admin_displaylog', 'access' => $access,
      'weight' => 3);
    $items[] = array('path' => 'admin/logs/hits/posts', 'title' => t('posts'),
      'callback' => 'statistics_admin_content', 'access' => $access,
      'weight' => 1);
    $items[] = array('path' => 'admin/logs/hits/pages', 'title' => t('pages'),
      'callback' => 'statistics_top_titles', 'access' => $access,
      'weight' => 1);
    $items[] = array('path' => 'admin/logs/hits/users', 'title' => t('users'),
      'callback' => 'statistics_top_users', 'access' => $access,
      'weight' => 2);
    $items[] = array('path' => 'admin/logs/hits/hostnames',
      'title' => t('hostnames'), 'callback' => 'statistics_top_hostnames',
      'access' => $access, 'weight' => 3);
    $items[] = array('path' => 'admin/logs/referrers',
      'title' => t('referrers'), 'callback' => 'statistics_top_referrers',
      'access' => $access, 'weight' => 4);
    $items[] = array('path' => 'admin/logs/referrers/internal',
      'title' => t('internal'), 'access' => $access);
    $items[] = array('path' => 'admin/logs/referrers/external',
      'title' => t('external'), 'access' => $access);
  }

  return $items;
}

/**
 * Menu callback; presents the "Access logs" page.
 *
 * @param $type
 *   - "user":  display accesses for a particular user.
 *   - "title": display accesses of a particular title.
 *   - "host":  display accesses originated at a given IP.
 *   - "all":   display all accesses.
 *
 * @param $value
 *   The user, host, or node to filter by.
 */
function statistics_admin_displaylog($type = 'all', $id = 0) {
  switch ($type) {
    case 'user':
      if ($id) {
        // retrieve recent access logs for specific user $id
        $user = user_load(array('uid' => $id));
        $page_title = t('Recent hits for "%username"', array('%username' => $user->name));
        $sql = 'SELECT title, path, url, hostname, uid, timestamp FROM {accesslog} WHERE uid = \''. check_query($id) ."'";
      }
      else {
        // retrieve recent access logs for all users (not guests)
        $page_title = t('Recent hits for all users');
        $sql = 'SELECT title, path, url, hostname, uid, MAX(timestamp) AS timestamp FROM {accesslog} WHERE uid <> 0 GROUP BY uid, title, path, url, hostname';
      }
      break;
    case 'page':
      // retrieve recent access logs for title $id
      $page_title = t('Recent hits for "%title"', array('%title' => $id));
      $sql = 'SELECT title, path, url, hostname, uid, timestamp FROM {accesslog} WHERE title = \''. check_query($id) ."'";
      break;
    case 'host':
      // retrieve recent access logs for hostname $id
      $page_title = t('Recent hits for "%hostname"', array('%hostname' => $id));
      $sql = 'SELECT title, path, url, hostname, uid, timestamp, title FROM {accesslog} WHERE hostname = \''. check_query($id) ."'";
      break;
    case 'all':
    default:
      // retrieve all recent access logs
      $page_title = t('Recent hits');
      $sql = 'SELECT title, path, url, hostname, uid, timestamp FROM {accesslog}';
  }

  $header = array(
    array('data' => t('Timestamp'), 'field' => 'timestamp', 'sort' => 'desc'),
    array('data' => t('Page'), 'field' => 'title'),
    array('data' => t('User'), 'field' => 'uid'),
    array('data' => t('Hostname'), 'field' => 'hostname'),
    array('data' => t('Referrer'), 'field' => 'url'),
    array('data' => t('Operations'), 'colspan' => '3')
  );

  $sql .= tablesort_sql($header);

  $result = pager_query($sql, 50);
  while ($log = db_fetch_object($result)) {

    // display title if possible, otherwise display path
    if ($log->title)
      $title = l(_statistics_column_width($log->title), $log->path, array('title' => $log->path));
    else
      $title = '('. l(_statistics_column_width($log->path), $log->path, array('title' => $log->path)) .')';

    // display url if possible, constructing our own link as may not be local
    if ($log->url)
      $url = "<a href=\"$log->url\" title=\"$log->url\">". _statistics_column_width($log->url) .'</a>';
    else
      $url = message_na();

    $user = user_load(array('uid' => $log->uid));
    $rows[] = array(array('data' => format_date($log->timestamp, 'small'), 'nowrap' => 'nowrap'), $title, format_name($user), $log->hostname ? $log->hostname : message_na(), $url, ($user->uid ? l(t('track user'), "admin/logs/hits/user/$user->uid") : ''), ($log->title ? l(t('track title'), 'admin/logs/hits/page/'. urlencode($log->title)) : ''), ($log->hostname ? l(t('track host'), "admin/logs/hits/host/$log->hostname") : ''));
  }

  if ($pager = theme('pager', NULL, 50, 0, tablesort_pager())) {
    $rows[] = array(array('data' => $pager, 'colspan' => 8));
  }

  $output = theme('table', $header, $rows);
  print theme('page', $output, $page_title);
}

/**
 * Menu callback; presents the "Top pages" page.
 */
function statistics_top_titles() {
  $sql = "SELECT title, path, MAX(timestamp) AS last_hit, COUNT(title) AS hits FROM {accesslog} WHERE title <> '' GROUP BY title, path";
  $sql_cnt = "SELECT COUNT(DISTINCT(title)) FROM {accesslog} WHERE title <> ''";
  $describe = t('Top pages in the past %interval');

  $page_title = strtr($describe, array('%interval' => format_interval(variable_get('statistics_flush_accesslog_timer', 259200))));

  $header = array(
    array('data' => t('Page'), 'field' => 'title'),
    array('data' => t('Path'), 'field' => 'path'),
    array('data' => t('Hits'), 'field' => 'hits', 'sort' => 'desc'),
    array('data' => t('Last hit'), 'field' => 'last_hit'),
    array('data' => t('Operations'))
  );
  $sql .= tablesort_sql($header);
  $result = pager_query($sql, 50, 0, $sql_cnt);

  while ($title = db_fetch_object($result)) {
    $rows[] = array(l(_statistics_column_width($title->title, '_title', 56), $title->path), _statistics_column_width($title->path, '_title', 56), $title->hits, format_date($title->last_hit, 'small'), ($title->title ? l(t('track title'), 'admin/logs/hits/page/'. urlencode($title->title)) : ''));
  }
  if ($pager = theme('pager', NULL, 50, 0, tablesort_pager())) {
    $rows[] = array(array('data' => $pager, 'colspan' => 5));
  }

  $output = theme('table', $header, $rows);
  print theme('page', $output, $page_title);
}

/**
 * Menu callback; presents the "Top users" page.
 */
function statistics_top_users() {
  $sql = "SELECT uid, hostname, MAX(timestamp) AS last_hit, COUNT(uid) AS hits FROM {accesslog} GROUP BY uid, hostname";
  $sql_cnt = "SELECT COUNT(DISTINCT(uid)) FROM {accesslog}";
  $describe = t('Top users in the past %interval');

  $page_title = strtr($describe, array('%interval' => format_interval(variable_get('statistics_flush_accesslog_timer', 259200))));

  $header = array(
    array('data' => t('User'), 'field' => 'user'),
    array('data' => t('Hostname'), 'field' => 'hostname'),
    array('data' => t('Hits'), 'field' => 'hits', 'sort' => 'desc'),
    array('data' => t('Last hit'), 'field' => 'last_hit'),
    array('data' => t('Operations'), 'colspan' => 2)
  );
  $sql .= tablesort_sql($header);
  $result = pager_query($sql, 50, 0, $sql_cnt);

  while ($u = db_fetch_object($result)) {
    $user = user_load(array('uid' => $u->uid));
    $rows[] = array(format_name($user), $u->hostname, $u->hits, format_date($u->last_hit, 'small'), ($u->uid ? l(t('track user'), "admin/logs/hits/user/$user->uid") : ''), ($u->hostname ? l(t('track host'), "admin/logs/hits/host/$u->hostname") : ''));
  }
  if ($pager = theme('pager', NULL, 50, 0, tablesort_pager())) {
    $rows[] = array(array('data' => $pager, 'colspan' => 6));
  }

  $output = theme('table', $header, $rows);
  print theme('page', $output, $page_title);
}

/**
 * Menu callback; presents the "Top hostnames" page.
 */
function statistics_top_hostnames() {
  $sql = "SELECT hostname, uid, MAX(timestamp) AS last_hit, COUNT(hostname) AS hits FROM {accesslog} GROUP BY hostname, uid";
  $sql_cnt = "SELECT COUNT(DISTINCT(hostname)) FROM {accesslog}";
  $describe = t('Top hostnames in the past %interval');

  $page_title = strtr($describe, array('%interval' => format_interval(variable_get('statistics_flush_accesslog_timer', 259200))));

  $header = array(
    array('data' => t('Hostname'), 'field' => 'hostname'),
    array('data' => t('User'), 'field' => 'user'),
    array('data' => t('Hits'), 'field' => 'hits', 'sort' => 'desc'),
    array('data' => t('Last hit'), 'field' => 'last_hit'),
    array('data' => t('Operations'), 'colspan' => 2)
  );
  $sql .= tablesort_sql($header);
  $result = pager_query($sql, 50, 0, $sql_cnt);

  while ($hostname = db_fetch_object($result)) {
    $user = user_load(array('uid' => $hostname->uid));
    $rows[] = array($hostname->hostname, format_name($user), $hostname->hits, format_date($hostname->last_hit, 'small'), ($hostname->hostname ? l(t('track host'), "admin/logs/hits/host/$hostname->hostname") : ''), ($hostname->uid ? l(t('track user'), "admin/logs/hits/user/$hostname->uid") :''));
  }
  if ($pager = theme('pager', NULL, 50, 0, tablesort_pager())) {
    $rows[] = array(array('data' => $pager, 'colspan' => 3));
  }

  $output = theme('table', $header, $rows);
  print theme('page', $output, $page_title);
}

/**
 * Menu callback; presents the "Top referrers" page.
 *
 * @param $view
 *   - "internal": Only display internal links.
 *   - "external": Only display links from off-site.
 *   - "all": Display all referrers.
 */
function statistics_top_referrers($view = 'all') {
  if ($view == 'all') {
    $query = "SELECT url, MAX(timestamp) AS last_hit, COUNT(url) AS hits FROM {accesslog} WHERE url <> '' GROUP BY url";
    $query_cnt = "SELECT COUNT(DISTINCT(url)) FROM {accesslog} WHERE url <> ''";
    $describe = t('Top referrers in the past %interval');
  }
  elseif ($view == 'internal') {
    $query = "SELECT url, MAX(timestamp) AS last_hit, COUNT(url) AS hits FROM {accesslog} WHERE url LIKE '%". check_query($_SERVER['HTTP_HOST']) ."%' GROUP BY url";
    $query_cnt = "SELECT COUNT(DISTINCT(url)) FROM {accesslog} WHERE url <> '' AND url LIKE '%". check_query($_SERVER['HTTP_HOST']) ."%'";
    $describe = t('Top internal referrers in the past %interval');
  }
  else {
    /* default to external */
    $query = "SELECT url, MAX(timestamp) AS last_hit, COUNT(url) AS hits FROM {accesslog} WHERE url NOT LIKE '%". check_query($_SERVER['HTTP_HOST']) ."%' AND url <> '' GROUP BY url";
    $query_cnt = "SELECT COUNT(DISTINCT(url)) FROM {accesslog} WHERE url <> '' AND url NOT LIKE '%". check_query($_SERVER['HTTP_HOST']) ."%'";
    $describe = t('Top external referrers in the past %interval');
  }

  $title = strtr($describe, array('%interval' => format_interval(variable_get('statistics_flush_accesslog_timer', 259200))));

  $header = array(
    array('data' => t('Url'), 'field' => 'url'),
    array('data' => t('Hits'), 'field' => 'hits', 'sort' => 'desc'),
    array('data' => t('Last hit'), 'field' => 'last_hit')
  );
  $query .= tablesort_sql($header);

  $result = pager_query($query, 50, 0, $query_cnt);

  while ($referrer = db_fetch_object($result)) {
    $rows[] = array('<a href="'. $referrer->url .'">'. _statistics_column_width($referrer->url, '_refer', 75) .'</a>', $referrer->hits, format_date($referrer->last_hit, 'small'));
  }
  if ($pager = theme('pager', NULL, 50, 0, tablesort_pager())) {
    $rows[] = array(array('data' => $pager, 'colspan' => 3));
  }

  $output .= theme('table', $header, $rows);

  print theme('page', $output, $title);
}

/**
 * Menu callback; presents the "Most Popular Content" page.
 */
function statistics_admin_content() {
  $header = array(
    array('data' => t('Post'), 'field' => 'n.title'),
    array('data' => t('Today'), 'field' => 's.daycount', 'sort' => 'desc'),
    array('data' => t('All time'), 'field' => 's.totalcount'),
    array('data' => t('Last hit'), 'field' => 's.timestamp'),
    array('data' => t('Operations'))
  );
  $sql = 'SELECT s.nid, s.daycount, s.totalcount, s.timestamp, n.title FROM {node_counter} s INNER JOIN {node} n ON s.nid = n.nid';
  $sql .= tablesort_sql($header);
  $result = pager_query($sql, 20); // WHERE s.%s <> '0'

  while ($nid = db_fetch_object($result)) {
    $rows[] = array(l($nid->title, 'node/'. $nid->nid, array('title' => t('View this posting.'))), $nid->daycount, $nid->totalcount, format_date($nid->timestamp, 'small'), l(t('track title'), 'admin/logs/hits/page/'. urlencode($nid->title)));
  }
  if ($pager = theme('pager', NULL, 20, 0, tablesort_pager())) {
    $rows[] = array(array('data' => $pager, 'colspan' => 5));
  }

  $output = theme('table', $header, $rows);
  print theme('page', $output, t('Top posts'));
}

/**
 * Implementation of hook_settings().
 */
function statistics_settings() {
  // access log settings:
  $group = form_radios(t('Enable access log'), 'statistics_enable_access_log', variable_get('statistics_enable_access_log', 0), array('1' => t('Enabled'), '0' => t('Disabled')), t('Log each page access.  Required for referrer statistics.'));

  $period = drupal_map_assoc(array(3600, 10800, 21600, 32400, 43200, 86400, 172800, 259200, 604800, 1209600, 2419200, 4838400, 9676800), 'format_interval');
  $group .= form_select(t('Discard access logs older than'), 'statistics_flush_accesslog_timer', variable_get('statistics_flush_accesslog_timer', 259200), $period, t('Older access log entries (including referrer statistics) will be automatically discarded.  Requires crontab.'));
  $output = form_group(t('Access log settings'), $group);

  // count content views settings
  $group = form_radios(t('Count content views'), 'statistics_count_content_views', variable_get('statistics_count_content_views', 0), array('1' => t('Enabled'), '0' => t('Disabled')), t('Increment a counter each time content is viewed.'));
  $group .= form_radios(t('Display counter values'), 'statistics_display_counter', variable_get('statistics_display_counter', 0), array('1' => t('Enabled'), '0' => t('Disabled')), t('Display how many times given content has been viewed.  User must have the "access statistics" permissions to be able to view these counts.'));
  $output .= form_group(t('Content viewing counter settings'), $group);

  // Popular content block settings
  $numbers = array('0' => t('Disabled')) + drupal_map_assoc(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 25, 30, 40));
  $group = form_select(t("Number of day's top views to display"), 'statistics_block_top_day_num', variable_get('statistics_block_top_day_num', 0), $numbers, t('How many content items to display in "day" list.  Requires enabled content viewing counters.'));
  $group .= form_select(t('Number of all time views to display'), 'statistics_block_top_all_num', variable_get('statistics_block_top_all_num', 0), $numbers, t('How many content items to display in "all time" list.  Requires enabled content viewing counters.'));
  $group .= form_select(t('Number of most recent views to display'), 'statistics_block_top_last_num', variable_get('statistics_block_top_last_num', 0), $numbers, t('How many content items to display in "recently viewed" list.  Requires enabled content viewing counters.'));
  $output .= form_group(t('"Popular content" block settings'), $group);

  // Popular content page settings
  $numbers = array('0' => t('Disabled')) + drupal_map_assoc(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 25));
  $group = form_textfield(t('Name for link to user page'), 'statistics_userpage_link', variable_get('statistics_userpage_link', ''), 20, 40, t("This node generates a user page listing your site's most popular content.  If you specify a name here, a link to the \"Popular content\" page will be added automatically."));
  $group .= form_select(t("Number of day's top views to display"), 'statistics_userpage_day_cnt', variable_get('statistics_userpage_day_cnt', 0), $numbers, t('How many content items to display in the "day" list.  Requires enabled content viewing counters.'));
  $group .= form_select(t('Number of all time top views to display'), 'statistics_userpage_all_cnt', variable_get('statistics_userpage_all_cnt', 0), $numbers, t('How many content items to display in the "all time" list.  Requires enabled content viewing counters.'));
  $group .= form_select(t('Number of most recent views to display'), 'statistics_userpage_last_cnt', variable_get('statistics_userpage_last_cnt', 0), $numbers, t('How many posts to display in the "recently viewed" list.  Requires enabled content viewing counters.'));
  $output .= form_group(t('"Popular content" page settings'), $group);

  return $output;
}

/**
 * Saves the values entered in the "config statistics" administration form.
 */
function statistics_save_statistics($edit) {
  variable_set('statistics_display_counter', $edit['statistics_display_counter']);
}

/**
 * Implementation of hook_cron().
 */
function statistics_cron() {
  $statistics_timestamp = variable_get('statistics_day_timestamp', '');

  if ((time() - $statistics_timestamp) >= 86400) {
    /* reset day counts */
    db_query('UPDATE {node_counter} SET daycount = 0');
    variable_set('statistics_day_timestamp', time());
  }

  /* clean expired access logs */
  db_query('DELETE FROM {accesslog} WHERE '. time() .' - timestamp > '. variable_get('statistics_flush_accesslog_timer', 259200));
}

/**
 * Returns all time or today top or last viewed node(s).
 *
 * @param $dbfield
 *   one of
 *   - 'totalcount': top viewed content of all time.
 *   - 'daycount': top viewed content for today.
 *   - 'timestamp': last viewed node.
 *
 * @param $dbrows
 *   number of rows to be returned.
 *
 * @return
 *   A query result containing n.nid, n.title, u.uid, u.name of the selected node(s)
 *   or FALSE if the query could not be executed correctly.
 */
function statistics_title_list($dbfield, $dbrows) {
  return db_query_range("SELECT s.nid, n.title, u.uid, u.name FROM {node_counter} s INNER JOIN {node} n ON s.nid = n.nid INNER JOIN {users} u ON n.uid = u.uid WHERE %s <> '0' AND n.status = 1 ORDER BY %s DESC", 's.'. $dbfield, 's.'. $dbfield, 0, $dbrows);
}

/**
 * Retrieves a node's "view statistics".
 *
 * @param $nid
 *   node ID
 *
 * @return
 *   An array with three entries: [0]=totalcount, [1]=daycount, [2]=timestamp
 *   - totalcount: count of the total number of times that node has been viewed.
 *   - daycount: count of the total number of times that node has been viewed "today".
 *     For the daycount to be reset, cron must be enabled.
 *   - timestamp: timestamp of when that node was last viewed.
 */
function statistics_get($nid) {

  if ($nid > 0) {
    /* retrieves an array with both totalcount and daycount */
    $statistics = db_fetch_array(db_query('SELECT totalcount, daycount, timestamp FROM {node_counter} WHERE nid = %d', $nid));
  }

  return $statistics;
}

/**
 * Implementation of hook_block().
 */
function statistics_block($op = 'list', $delta = 0) {
  if ($op == 'list') {
    if (variable_get('statistics_count_content_views', 0)) {
      $blocks[0]['info'] = t('Popular content');
    }
    return $blocks;
  }
  else if (user_access('access content')) {
    switch ($delta) {
      case 0:
        $content = array();

        $daytop = variable_get('statistics_block_top_day_num', 0);
        if ($daytop) {
          $content[] = node_title_list(statistics_title_list('daycount', $daytop), t("Today's:"));
        }

        $alltimetop = variable_get('statistics_block_top_all_num', 0);
        if ($alltimetop) {
          $content[] = node_title_list(statistics_title_list('totalcount', $alltimetop), t('All time:'));
        }

        $lasttop = variable_get('statistics_block_top_last_num', 0);
        if ($lasttop) {
          $content[] = node_title_list(statistics_title_list('timestamp', $lasttop), t('Last viewed:'));
        }
        $output = implode($content, '<br />');

        $block['subject'] = variable_get('statistics_block_top_title', t('Popular content'));
        $block['content'] = $output;
        break;
    }

    return $block;
  }
}

/**
 * Menu callback; presents the "Top Nodes" summary page.
 */
function statistics_page() {
  $output = '';

  // build day's most popular content list if enabled
  if ($displaycount = variable_get('statistics_userpage_day_cnt', 0)) {
    $table = '<table border="0" cellpadding="4" cellspacing="4" style="width: 100%;">';
    $table .= statistics_summary('daycount', $displaycount);
    $table .= '</table>';

    $output .= theme('box', t("Day's most popular content:"), $table, 'main');
  }

  // build all time most popular content list if enabled
  if ($displaycount = variable_get('statistics_userpage_all_cnt', 0)) {
    $table = '<table border="0" cellpadding="4" cellspacing="4" style="width: 100%;">';
    $table .= statistics_summary('totalcount', $displaycount);
    $table .= '</table>';

    $output .= theme('box', t('All time most popular content:'), $table, 'main');
  }

  // build last viewed content list if enabled
  if ($displaycount = variable_get('statistics_userpage_last_cnt', 0)) {
    $table = '<table border="0" cellpadding="4" cellspacing="4" style="width: 100%;">';
    $table .= statistics_summary('timestamp', $displaycount);
    $table .= '</table>';

    $output .= theme('box', t('Last viewed content:'), $table, 'main');
  }

  print theme('page', $output);
}

function statistics_summary($dbfield, $dbrows) {
  /* valid dbfields: totalcount, daycount, timestamp */

  $output = '';
  $result = db_query_range('SELECT n.nid, n.title FROM {node_counter} s INNER JOIN {node} n ON s.nid = n.nid ORDER BY %s DESC', $dbfield, 0, $dbrows);
  while ($nid = db_fetch_array($result)) {
    $content = node_load(array('nid' => $nid['nid']));
    $links = link_node($content, 1);

    // Filter and prepare node teaser
    if (node_hook($content, 'view')) {
      node_invoke($content, 'view', TRUE, FALSE);
    }
    else {
      $content = node_prepare($content, TRUE);
    }

    $output .= '<tr><td><strong>'. l($nid['title'], 'node/'. $nid['nid'], array('title' => t('View this posting.'))) .'</strong></td><td style="text-align: right;"><small>'. t('Submitted by %a on %b', array('%a' => format_name($content), '%b' => format_date($content->created, 'large'))) .'</small></td></tr>';
    $output .= '<tr><td colspan="2"><div style="margin-left: 20px;">'. $content->teaser .'</div></td></tr>';
    $output .= '<tr><td style="text-align: right;" colspan="2">[ '. theme('links', $links) .' ]<br /><br /></td></tr>';
  }

  return $output;
}

/**
 * It is possible to adjust the width of columns generated by the
 * statistics module.  Currently this has to be done manually, by
 * updating the appropriate variable.  There are several recognized variables:
 * 'statistics_column_width', 'statistics_column_width_refer', and
 * 'statistics_column_width_title'
 */
function _statistics_column_width($column, $type = "", $default = 26) {
  $max_width = variable_get("statistics_column_width$type", $default);
  return (strlen($column) > $max_width ? substr($column, 0, $max_width) . '...' : $column);
}

/**
 * Implementation of hook_nodeapi().
 */
function statistics_nodeapi(&$node, $op, $arg = 0) {
  switch ($op) {
    case 'delete':
    // clean up statistics table when node is deleted
    db_query('DELETE FROM {node_counter} WHERE nid = %d', $node->nid);
  }
}

?>
