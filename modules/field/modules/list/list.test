<?php
// $Id$

class ListFieldTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name'  => 'List field',
      'description'  => "Test the List field type.",
      'group' => 'Field Types'
    );
  }

  function setUp() {
    parent::setUp('field_test');

    $this->card_1 = array(
      'field_name' => 'card_1',
      'type' => 'list',
      'cardinality' => 1,
      'settings' => array(
        'allowed_values' => "1|One\n2|Two\n3|Three\n",
      ),
    );
    $this->card_1 = field_create_field($this->card_1);

    $this->instance_1 = array(
      'field_name' => $this->card_1['field_name'],
      'object_type' => 'test_entity',
      'bundle' => 'test_bundle',
      'widget' => array(
        'type' => 'options_buttons',
      ),
    );
    $this->instance_1 = field_create_instance($this->instance_1);
  }

  /**
   * Test that allowed values can be updated and that the updates are
   * reflected in generated forms.
   */
  function testUpdateAllowedValues() {
    // All three options appear.
    $entity = field_test_create_stub_entity();
    $form = drupal_get_form('field_test_entity_form', $entity);
    $this->assertTrue(!empty($form['card_1'][LANGUAGE_NONE][1]), t('Option 1 exists'));
    $this->assertTrue(!empty($form['card_1'][LANGUAGE_NONE][2]), t('Option 2 exists'));
    $this->assertTrue(!empty($form['card_1'][LANGUAGE_NONE][3]), t('Option 3 exists'));

    // Removed options do not appear.
    $this->card_1['settings']['allowed_values'] = "2|Two";
    field_update_field($this->card_1);
    $entity = field_test_create_stub_entity();
    $form = drupal_get_form('field_test_entity_form', $entity);
    $this->assertTrue(empty($form['card_1'][LANGUAGE_NONE][1]), t('Option 1 does not exist'));
    $this->assertTrue(!empty($form['card_1'][LANGUAGE_NONE][2]), t('Option 2 exists'));
    $this->assertTrue(empty($form['card_1'][LANGUAGE_NONE][3]), t('Option 3 does not exist'));

    // Completely new options appear.
    $this->card_1['settings']['allowed_values'] = "10|Update\n20|Twenty";
    field_update_field($this->card_1);
    $form = drupal_get_form('field_test_entity_form', $entity);
    $this->assertTrue(empty($form['card_1'][LANGUAGE_NONE][1]), t('Option 1 does not exist'));
    $this->assertTrue(empty($form['card_1'][LANGUAGE_NONE][2]), t('Option 2 does not exist'));
    $this->assertTrue(empty($form['card_1'][LANGUAGE_NONE][3]), t('Option 3 does not exist'));
    $this->assertTrue(!empty($form['card_1'][LANGUAGE_NONE][10]), t('Option 10 exists'));
    $this->assertTrue(!empty($form['card_1'][LANGUAGE_NONE][20]), t('Option 20 exists'));

    // Options are reset when a new field with the same name is created.
    field_delete_field($this->card_1['field_name']);
    unset($this->card_1['id']);
    $this->card_1['settings']['allowed_values'] = "1|One\n2|Two\n3|Three\n";
    $this->card_1 = field_create_field($this->card_1);
    $this->instance_1 = array(
      'field_name' => $this->card_1['field_name'],
      'object_type' => 'test_entity',
      'bundle' => 'test_bundle',
      'widget' => array(
        'type' => 'options_buttons',
      ),
    );
    $this->instance_1 = field_create_instance($this->instance_1);
    $entity = field_test_create_stub_entity();
    $form = drupal_get_form('field_test_entity_form', $entity);
    $this->assertTrue(!empty($form['card_1'][LANGUAGE_NONE][1]), t('Option 1 exists'));
    $this->assertTrue(!empty($form['card_1'][LANGUAGE_NONE][2]), t('Option 2 exists'));
    $this->assertTrue(!empty($form['card_1'][LANGUAGE_NONE][3]), t('Option 3 exists'));
  }
  
}

/**
* List module UI tests.
*/
class ListFieldUITestCase extends FieldUITestCase {
  public static function getInfo() {
    return array(
      'name' => 'List field UI tests',
      'description' => 'Test the List field UI functionality.',
      'group' => 'Field types',
    );
  }

  /**
   * Tests that allowed values are properly validated in the UI.
   */
  function testAllowedValues() {
    $element_name = "field[settings][allowed_values]";

    //Test 'List' field type.
    $admin_path = $this->createListFieldAndEdit('list');
    //Check that non-integer keys are rejected.
    $edit = array($element_name => "1.1|one\n");
    $this->drupalPost($admin_path, $edit, t('Save settings'));
    $this->assertText("keys must be integers", t('Form vaildation failed.'));

    // Test 'List (number)' field type.
    $admin_path = $this->createListFieldAndEdit('list_number');
    //Check that non-numeric keys are rejected.
    $edit = array($element_name => "1|one\nB|two");
    $this->drupalPost($admin_path, $edit, t('Save settings'));
    $this->assertText("each key must be a valid integer or decimal", t('Form vaildation failed.'));

    //Test 'List (text)' field type.
    $admin_path = $this->createListFieldAndEdit('list_text');
    //Check that over long keys are rejected.
    $edit = array($element_name => "1|one\n" . $this->randomName(255) . "|two");
    $this->drupalPost($admin_path, $edit, t('Save settings'));
    $this->assertText("each key must be a string less than 255 characters", t('Form vaildation failed.'));
    
    // Test 'List (boolean)' field type.
    $admin_path = $this->createListFieldAndEdit('list_boolean');    
    // Check that invalid option keys are rejected.
    $edit = array($element_name => "1|one\n2|two");
    $this->drupalPost($admin_path, $edit, t('Save settings'));
    $this->assertText("keys must be either 0 or 1", t('Form vaildation failed.'));
    
    //Check that missing option causes failure.
    $edit = array($element_name => "1|one");
    $this->drupalPost($admin_path, $edit, t('Save settings'));
    $this->assertText("two values are required", t('Form vaildation failed.'));    
  }
  
  /**
   * Helper function to create list field of a given type and get the edit page.
   * 
   * @param string $type
   *   'list', 'list_boolean', 'list_number', or 'list_text'
   */
  private function createListFieldAndEdit($type) {
    // Create a test field and instance.
    $field_name = 'test_' . $type;
    $field = array(
      'field_name' => $field_name,
      'type' => $type,
    );
    field_create_field($field);
    $instance = array(
      'field_name' => $field_name,
      'object_type' => 'node',
      'bundle' => $this->type,
    );
    field_create_instance($instance);

    $admin_path = 'admin/structure/types/manage/' . $this->hyphen_type . '/fields/' . $field_name;
    return $admin_path;
  }
  
}

