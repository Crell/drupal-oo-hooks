<?php
// $Id$
/**
 * @file
 * Attach custom data fields to Drupal objects.
 */

/*
 * Load all public Field API functions. Drupal currently has no
 * mechanism for auto-loading core APIs, so we have to load them on
 * every page request.
 */
module_load_include('inc', 'field', 'field.crud');
module_load_include('inc', 'field', 'field.default');
module_load_include('inc', 'field', 'field.info');
module_load_include('inc', 'field', 'field.multilingual');
module_load_include('inc', 'field', 'field.attach');
module_load_include('inc', 'field', 'field.form');

/**
 * @defgroup field Field API
 * @{
 * Attach custom data fields to Drupal objects.
 *
 * The Field API allows custom data fields to be attached to Drupal
 * objects and takes care of storing, loading, editing, and rendering
 * field data. Any object type (node, user, etc.) can use the Field
 * API to make itself "fieldable" and thus allow fields to be attached
 * to it. Other modules can provide a user interface for managing custom
 * fields via a web browser as well as a wide and flexible variety of
 * data type, form element, and display format capabilities.
 *
 * - @link field_structs Data structures: Field, Instance, Bundle @endlink.
 *
 * - @link field_types Field Types API @endlink. Defines field types,
 *   widget types, and display formatters. Field modules use this API
 *   to provide field types like Text and Node Reference along with the
 *   associated form elements and display formatters.
 *
 * - @link field_crud Field CRUD API @endlink. Create, updates, and
 *   deletes fields, bundles (a.k.a. "content types"), and instances.
 *   Modules use this API, often in hook_install(), to create
 *   custom data structures.
 *
 * - @link field_attach Field Attach API @endlink. Connects object
 *   types to the Field API. Field Attach API functions load, store,
 *   generate Form API structures, display, and perform a variety of
 *   other functions for field data connected to individual objects.
 *   Fieldable object types like node and user use this API to make
 *   themselves fieldable.
 *
 * - @link field_info Field Info API @endlink. Exposes information
 *   about all fields, instances, widgets, and related information
 *   defined by or with the Field API.
 *
 * - @link field_storage Field Storage API @endlink. Provides a
 *   pluggable back-end storage system for actual field data. The
 *   default implementation, field_sql_storage.module, stores field data
 *   in the local SQL database.
 *
 * - @link field_purge Field API bulk data deletion @endlink. Cleans
 *   up after bulk deletion operations such as field_delete_field()
 *   and field_delete_instance().
 */

/**
 * Value for $field['cardinality'] property to indicate it can hold an
 * unlimited number of values.
 */
define('FIELD_CARDINALITY_UNLIMITED', -1);

/**
 * TODO
 */
define('FIELD_BEHAVIOR_NONE', 0x0001);
/**
 * TODO
 */
define('FIELD_BEHAVIOR_DEFAULT', 0x0002);
/**
 * TODO
 */
define('FIELD_BEHAVIOR_CUSTOM', 0x0004);

/**
 * Age argument for loading the most recent version of an object's
 * field data with field_attach_load().
 */
define('FIELD_LOAD_CURRENT', 'FIELD_LOAD_CURRENT');
/**
 * Age argument for loading the version of an object's field data
 * specified in the object with field_attach_load().
 */
define('FIELD_LOAD_REVISION', 'FIELD_LOAD_REVISION');

/**
 * @name Field query flags
 * @{
 * Flags for field_attach_query().
 */

/**
 * Limit argument for field_attach_query() to request all available
 * objects instead of a limited number.
 */
define('FIELD_QUERY_NO_LIMIT', 'FIELD_QUERY_NO_LIMIT');

/**
 * Cursor return value for field_attach_query() to indicate that no
 * more data is available.
 */
define('FIELD_QUERY_COMPLETE', 'FIELD_QUERY_COMPLETE');

/**
 * @} End of "Field query flags".
 */

/**
 * Base class for all exceptions thrown by Field API functions.
 *
 * This class has no functionality of its own other than allowing all
 * Field API exceptions to be caught by a single catch block.
 */
class FieldException extends Exception {}

/**
 * Exception class thrown by hook_field_update_forbid().
 */
class FieldUpdateForbiddenException extends FieldException {}

/**
 * Implements hook_flush_caches().
 */
function field_flush_caches() {
  return array('cache_field');
}

/**
 * Implements hook_help().
 */
function field_help($path, $arg) {
  switch ($path) {
    case 'admin/help#field':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Field module allows custom data fields to be attached to Drupal <em>objects</em> (content nodes, users, taxonomy vocabularies, etc.) and takes care of storing, loading, editing, and rendering field data. Most users will not interact with the Field module directly, but will instead use the <a href="@field-ui-help">Field UI module</a> user interface. Module developers can use the Field API to make new objects "fieldable" and thus allow fields to be attached to their objects. For more information, see the online handbook entry for <a href="@field">Field module</a>.', array('@field-ui-help' => url('admin/help/field_ui'), '@field' => 'http://drupal.org/handbook/modules/field')) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Enabling field types') . '</dt>';
      $output .= '<dd>' . t('The Field module provides the infrastructure for fields and field attachment; the field types and input widgets themselves are provided by additional modules. Some of the modules are required; the optional modules can be enabled from the <a href="@modules">Modules administration page</a>. Drupal core includes the following field type modules: Number (required), Text (required), List (required), Taxonomy (optional), Image (optional), and File (optional); the required Options module provides input widgets for other field modules. Additional fields and widgets may be provided by contributed modules, which you can find in the <a href="@contrib">contributed module section of Drupal.org</a>. Currently enabled field and input widget modules:', array('@modules' => url('admin/modules'), '@contrib' => 'http://drupal.org/project/modules', '@options' => url('admin/help/options')));

      // Make a list of all widget and field modules currently enabled, in
      // order by displayed module name (module names are not translated).
      $items = array();
      $info = system_get_info('module');
      $modules = array_merge(module_implements('field_info'), module_implements('field_widget_info'));
      $modules = array_unique($modules);
      sort($modules);
      foreach ($modules as $module) {
        $display = $info[$module]['name'];
        if (module_hook($module, 'help')) {
          $items['items'][] = l($display, 'admin/help/' . $module);
        }
        else {
          $items['items'][] = $display;
        }
      }
      $output .= theme('item_list', $items) . '</dd>';
      $output .= '<dt>' . t('Managing field data storage') . '</dt>';
      $output .= '<dd>' . t('Developers of field modules can either use the default <a href="@sql-store">Field SQL storage module</a> to store data for their fields, or a contributed or custom module developed using the <a href="@storage-api">field storage API</a>.', array('@storage-api' => 'http://api.drupal.org/api/group/field_storage/7', '@sql-store' => url('admin/help/field_sql_storage'))) . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_theme().
 */
function field_theme() {
  $path = drupal_get_path('module', 'field') . '/theme';
  $items = array(
    'field' => array(
      'template' => 'field',
      'render element' => 'element',
      'path' => $path,
    ),
    'field_multiple_value_form' => array(
      'render element' => 'element',
    ),
  );

  return $items;
}

/**
 * Implements hook_cron().
 *
 * Purges some deleted Field API data, if any exists.
 */
function field_cron() {
  $limit = variable_get('field_purge_batch_size', 10);
  field_purge_batch($limit);
}

/**
 * Implements hook_modules_installed().
 */
function field_modules_installed($modules) {
  field_cache_clear();
}

/**
 * Implements hook_modules_uninstalled().
 */
function field_modules_uninstalled($modules) {
  module_load_include('inc', 'field', 'field.crud');
  foreach ($modules as $module) {
    // TODO D7: field_module_delete is not yet implemented
    // field_module_delete($module);
  }
}

/**
 * Implements hook_modules_enabled().
 */
function field_modules_enabled($modules) {
  foreach ($modules as $module) {
    field_associate_fields($module);
  }
  field_cache_clear();
}

/**
 * Implements hook_modules_disabled().
 */
function field_modules_disabled($modules) {
  foreach ($modules as $module) {
    db_update('field_config')
      ->fields(array('active' => 0))
      ->condition('module', $module)
      ->execute();
    db_update('field_config')
      ->fields(array('storage_active' => 0))
      ->condition('storage_module', $module)
      ->execute();
    field_cache_clear(TRUE);
  }
}

/**
 * Allows a module to update the database for fields and columns it controls.
 *
 * @param string $module
 *   The name of the module to update on.
 */
function field_associate_fields($module) {
  // Associate field types.
  $field_types =(array) module_invoke($module, 'field_info');
  foreach ($field_types as $name => $field_info) {
    watchdog('field', 'Updating field type %type with module %module.', array('%type' => $name, '%module' => $module));
    db_update('field_config')
      ->fields(array('module' => $module, 'active' => 1))
      ->condition('type', $name)
      ->execute();
  }
  // Associate storage backends.
  $storage_types = (array) module_invoke($module, 'field_storage_info');
  foreach ($storage_types as $name => $storage_info) {
    watchdog('field', 'Updating field storage %type with module %module.', array('%type' => $name, '%module' => $module));
    db_update('field_config')
      ->fields(array('storage_module' => $module, 'storage_active' => 1))
      ->condition('storage_type', $name)
      ->execute();
  }
}

/**
 * Helper function to get the default value for a field on an object.
 *
 * @param $obj_type
 *   The type of $object; e.g. 'node' or 'user'.
 * @param $object
 *   The object for the operation.
 * @param $field
 *   The field structure.
 * @param $instance
 *   The instance structure.
 * @param $langcode
 *   The field language to fill-in with the default value.
 */
function field_get_default_value($obj_type, $object, $field, $instance, $langcode = NULL) {
  $items = array();
  if (!empty($instance['default_value_function'])) {
    $function = $instance['default_value_function'];
    if (function_exists($function)) {
      $items = $function($obj_type, $object, $field, $instance, $langcode);
    }
  }
  elseif (!empty($instance['default_value'])) {
    $items = $instance['default_value'];
  }
  return $items;
}

/**
 * Helper function to filter out empty field values.
 *
 * @param $field
 *   The field definition.
 * @param $items
 *   The field values to filter.
 *
 * @return
 *   The array of items without empty field values. The function also renumbers
 *   the array keys to ensure sequential deltas.
 */
function _field_filter_items($field, $items) {
  $function = $field['module'] . '_field_is_empty';
  function_exists($function);
  foreach ((array) $items as $delta => $item) {
    // Explicitly break if the function is undefined.
    if ($function($item, $field)) {
      unset($items[$delta]);
    }
  }
  return array_values($items);
}

/**
 * Helper function to sort items in a field according to
 * user drag-n-drop reordering.
 */
function _field_sort_items($field, $items) {
  if (($field['cardinality'] > 1 || $field['cardinality'] == FIELD_CARDINALITY_UNLIMITED) && isset($items[0]['_weight'])) {
    usort($items, '_field_sort_items_helper');
    foreach ($items as $delta => $item) {
      if (is_array($items[$delta])) {
        unset($items[$delta]['_weight']);
      }
    }
  }
  return $items;
}

/**
 * Sort function for items order.
 * (copied form element_sort(), which acts on #weight keys)
 */
function _field_sort_items_helper($a, $b) {
  $a_weight = (is_array($a) && isset($a['_weight'])) ? $a['_weight'] : 0;
  $b_weight = (is_array($b) && isset($b['_weight'])) ? $b['_weight'] : 0;
  if ($a_weight == $b_weight) {
    return 0;
  }
  return ($a_weight < $b_weight) ? -1 : 1;
}

/**
 * Same as above, using ['_weight']['#value']
 */
function _field_sort_items_value_helper($a, $b) {
  $a_weight = (is_array($a) && isset($a['_weight']['#value'])) ? $a['_weight']['#value'] : 0;
  $b_weight = (is_array($b) && isset($b['_weight']['#value'])) ? $b['_weight']['#value'] : 0;
  if ($a_weight == $b_weight) {
    return 0;
  }
  return ($a_weight < $b_weight) ? -1 : 1;
}

/**
 * Registry of pseudo-field components in a given bundle.
 *
 * @param $obj_type
 *   The type of $object; e.g. 'node' or 'user'.
 * @param $bundle
 *   The bundle name.
 * @return
 *   The array of pseudo-field elements in the bundle.
 */
function field_extra_fields($obj_type, $bundle) {
  $info = &drupal_static(__FUNCTION__, array());

  if (empty($info)) {
    $info = (array) module_invoke_all('field_extra_fields');
    drupal_alter('field_extra_fields', $info);

    // Add saved weights. The array is keyed by object type, bundle and
    // element name.
    $extra_weights = variable_get('field_extra_weights', array());
    foreach ($extra_weights as $obj_type_name => $bundles) {
      foreach ($bundles as $bundle_name => $weights) {
        foreach ($weights as $key => $value) {
          if (isset($info[$obj_type_name][$bundle_name][$key])) {
            $info[$obj_type_name][$bundle_name][$key]['weight'] = $value;
          }
        }
      }
    }
  }

  return isset($info[$obj_type][$bundle]) ? $info[$obj_type][$bundle]: array();
}

/**
 * Retrieve the user-defined weight for a 'pseudo-field' component.
 *
 * @param $obj_type
 *   The type of $object; e.g. 'node' or 'user'.
 * @param $bundle
 *   The bundle name.
 * @param $pseudo_field
 *   The name of the 'pseudo-field'.
 * @return
 *   The weight for the 'pseudo-field', respecting the user settings stored by
 *   field.module.
 */
function field_extra_field_weight($obj_type, $bundle, $pseudo_field) {
  $extra = field_extra_fields($obj_type, $bundle);
  if (isset($extra[$pseudo_field])) {
    return $extra[$pseudo_field]['weight'];
  }
}

/**
 * Pre-render callback to adjust weights of non-field elements on objects.
 */
function _field_extra_weights_pre_render($elements) {
  if (isset($elements['#extra_fields'])) {
    foreach ($elements['#extra_fields'] as $key => $value) {
      // Some core 'fields' use a different key in node forms and in 'view'
      // render arrays. Ensure that we are not on a form first.
      if (!isset($elements['#build_id']) && isset($value['view']) && isset($elements[$value['view']])) {
        $elements[$value['view']]['#weight'] = $value['weight'];
      }
      elseif (isset($elements[$key])) {
        $elements[$key]['#weight'] = $value['weight'];
      }
    }
  }
  return $elements;
}

/**
 * Clear the field info and field data caches.
 */
function field_cache_clear() {
  cache_clear_all('*', 'cache_field', TRUE);
  field_info_cache_clear();
}

/**
 * Like filter_xss_admin(), but with a shorter list of allowed tags.
 *
 * Used for items entered by administrators, like field descriptions,
 * allowed values, where some (mainly inline) mark-up may be desired
 * (so check_plain() is not acceptable).
 */
function field_filter_xss($string) {
  return filter_xss($string, _field_filter_xss_allowed_tags());
}

/**
 * List of tags allowed by field_filter_xss().
 */
function _field_filter_xss_allowed_tags() {
  return array('a', 'b', 'big',  'code', 'del', 'em', 'i', 'ins',  'pre', 'q', 'small', 'span', 'strong', 'sub', 'sup', 'tt', 'ol', 'ul', 'li', 'p', 'br', 'img');
}

/**
 * Human-readable list of allowed tags, for display in help texts.
 */
function _field_filter_xss_display_allowed_tags() {
  return '<' . implode('> <', _field_filter_xss_allowed_tags()) . '>';
}

/**
 * Format a field item for display.
 *
 * TODO D7 : do we still need field_format ?
 * - backwards compatibility of templates - check what fallbacks we can propose...
 * - was used by Views integration in CCK in D6 - do we need now?
 * At least needs a little rehaul/update...
 *
 * Used to display a field's values outside the context of the $node, as
 * when fields are displayed in Views, or to display a field in a template
 * using a different formatter than the one set up on the 'Manage display' tab
 * for the node's context.
 *
 * @param $field
 *   Either a field array or the name of the field.
 * @param $item
 *   The field item(s) to be formatted (such as $node->field_foo[0],
 *   or $node->field_foo if the formatter handles multiple values itself)
 * @param $formatter_type
 *   The name of the formatter type to use.
 * @param $node
 *   Optionally, the containing node object for context purposes and
 *   field-instance options.
 *
 * @return
 *   A string containing the contents of the field item(s) sanitized for display.
 *   It will have been passed through the necessary check_plain() or check_markup()
 *   functions as necessary.
 */
function field_format($obj_type, $object, $field, $item, $formatter_type = NULL, $formatter_settings = array()) {
  if (!is_array($field)) {
    $field = field_info_field($field);
  }

  if (field_access('view', $field, $obj_type, $object)) {
    $field_type = field_info_field_types($field['type']);

    // We need $field, $instance, $obj_type, $object to be able to display a value...
    list(, , $bundle) = entity_extract_ids($obj_type, $object);
    $instance = field_info_instance($obj_type, $field['field_name'], $bundle);

    $display = array(
      'type' => $formatter_type ? $formatter_type : $field_type['default_formatter'],
      'settings' => $formatter_settings,
    );
    $display['settings'] += field_info_formatter_settings($display['type']);

    if ($display['type'] !== 'hidden') {
      $theme = $formatter['module'] . '_formatter_' . $display['type'];

      $element = array(
        '#theme' => $theme,
        '#field_name' => $field['field_name'],
        '#object_type' => $obj_type,
        '#bundle' => $bundle,
        '#formatter' => $display['type'],
        '#settings' => $display['settings'],
        '#object' => $object,
        '#object_type' => $obj_type,
        '#delta' => isset($item['#delta']) ? $item['#delta'] : NULL,
      );

      if (field_behaviors_formatter('multiple values', $display) == FIELD_BEHAVIOR_DEFAULT) {
        // Single value formatter.

        // hook_field('sanitize') expects an array of items, so we build one.
        $items = array($item);
        $function = $field['module'] . '_field_sanitize';
        if (function_exists($function)) {
          $function($obj_type, $object, $field, $instance, $items);
        }

        $element['#item'] = $items[0];
      }
      else {
        // Multiple values formatter.
        $items = $item;
        $function = $field['module'] . '_field_sanitize';
        if (function_exists($function)) {
          $function($obj_type, $object, $field, $instance, $items);
        }

        foreach ($items as $delta => $item) {
          $element[$delta] = array(
            '#item' => $item,
            '#weight' => $delta,
          );
        }
      }

      return theme($theme, $element);
    }
  }
}

/**
 * Returns a renderable array for the value of a single field in an object.
 *
 * The resulting output is a fully themed field with label and multiple values.
 *
 * This function can be used by third-party modules that need to output an
 * isolated field.
 * - Do not use inside node (or other entities) templates, use
 *   render($content[FIELD_NAME]) instead.
 * - Do not use to display all fields in an object, use
 *   field_attach_prepare_view() and field_attach_view() instead.
 *
 * The function takes care of invoking the prepare_view steps. It also respects
 * field access permissions.
 *
 * @param $obj_type
 *   The type of $object; e.g. 'node' or 'user'.
 * @param $object
 *   The object containing the field to display. Must at least contain the id
 *   key and the field data to display.
 * @param $field_name
 *   The name of the field to display.
 * @param $display
 *   Can be either:
 *   - The name of a view mode. The field will be displayed according to the
 *     display settings specified for this view mode in the $instance
 *     definition for the field in the object's bundle.
 *     If no display settings are found for the view mode, the settings for
 *     the 'full' view mode will be used.
 *   - An array of display settings, as found in the 'display' entry of
 *     $instance definitions. The following kay/value pairs are allowed:
 *     - label: (string) Position of the label. The default 'field' theme
 *       implementation supports the values 'inline', 'above' and 'hidden'.
 *       Defaults to 'above'.
 *     - type: (string) The formatter to use. Defaults to the
 *       'default_formatter' for the field type, specified in
 *       hook_field_info(). The default formatter will also be used if the
 *       requested formatter is not available.
 *     - settings: (array) Settings specific to the formatter. Defaults to the
 *       formatter's default settings, specified in
 *       hook_field_formatter_info().
 *     - weight: (float) The weight to assign to the renderable element.
 *       Defaults to 0.
 * @param $langcode
 *   (Optional) The language the field values are to be shown in. The site's
 *   current language fallback logic will be applied no values are available
 *   for the language. If no language is provided the current language will be
 *   used.
 * @return
 *   A renderable array for the field value.
 */
function field_view_field($obj_type, $object, $field_name, $display = array(), $langcode = NULL) {
  $output = array();

  if ($field = field_info_field($field_name)) {
    if (is_array($display)) {
      // When using custom display settings, fill in default values.
      $display = _field_info_prepare_instance_display($field, $display);
    }
    else {
      // When using a view mode, make sure we have settings for it, or fall
      // back to the 'full' view mode.
      list(, , $bundle) = entity_extract_ids($obj_type, $object);
      $instance = field_info_instance($obj_type, $field_name, $bundle);
      if (!isset($instance['display'][$display])) {
        $display = 'full';
      }
    }

    // Hook invocations are done through the _field_invoke() functions in
    // 'single field' mode, to reuse the language fallback logic.
    $options = array('field_name' => $field_name, 'language' => field_multilingual_valid_language($langcode, FALSE));
    $null = NULL;
    list($id) = entity_extract_ids($obj_type, $object);

    // First let the field types do their preparation.
    _field_invoke_multiple('prepare_view', $obj_type, array($id => $object), $display, $null, $options);
    // Then let the formatters do their own specific massaging.
    _field_invoke_multiple_default('prepare_view', $obj_type, array($id => $object), $display, $null, $options);
    // Build the renderable array.
    $result = _field_invoke_default('view', $obj_type, $object, $display, $null, $options);

    // Invoke hook_field_attach_view_alter() to tet other modules alter the
    // renderable array, as in a full field_attach_view() execution.
    $context = array(
      'obj_type' => $obj_type,
      'object' => $object,
      'view_mode' => '_custom',
      'langcode' => $langcode,
    );
    drupal_alter('field_attach_view', $result, $context);

    if (isset($result[$field_name])) {
      $output = $result[$field_name];
      $output['#attached']['css'][] = drupal_get_path('module', 'field') . '/theme/field.css';
    }
  }

  return $output;
}

/**
 * Determine whether a field has any data.
 *
 * @param $field
 *   A field structure.
 * @return
 *   TRUE if the field has data for any object; FALSE otherwise.
 */
function field_has_data($field) {
  $results = field_attach_query($field['id'], array(), array('limit' => 1));
  return !empty($results);
}

/**
 * Determine whether the user has access to a given field.
 *
 * @param $op
 *   The operation to be performed. Possible values:
 *   - "edit"
 *   - "view"
 * @param $field
 *   The field on which the operation is to be performed.
 * @param $obj_type
 *   The type of $object; e.g. 'node' or 'user'.
 * @param $object
 *   (optional) The object for the operation.
 * @param $account
 *   (optional) The account to check, if not given use currently logged in user.
 * @return
 *   TRUE if the operation is allowed;
 *   FALSE if the operation is denied.
 */
function field_access($op, $field, $obj_type, $object = NULL, $account = NULL) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }

  foreach (module_implements('field_access') as $module) {
    $function = $module . '_field_access';
    $access = $function($op, $field, $obj_type, $object, $account);
    if ($access === FALSE) {
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * Helper function to extract the bundle name of from a bundle object.
 *
 * @param $obj_type
 *   The type of $object; e.g. 'node' or 'user'.
 * @param $bundle
 *   The bundle object (or string if bundles for this object type do not exist
 *   as standalone objects).
 * @return
 *   The bundle name.
 */
function field_extract_bundle($obj_type, $bundle) {
  if (is_string($bundle)) {
    return $bundle;
  }

  $info = entity_get_info($obj_type);
  if (is_object($bundle) && isset($info['bundle keys']['bundle']) && isset($bundle->{$info['bundle keys']['bundle']})) {
    return $bundle->{$info['bundle keys']['bundle']};
  }
}

/**
 * Theme preprocess function for field.tpl.php.
 *
 * @see field.tpl.php
 */
function template_preprocess_field(&$variables) {
  $element = $variables['element'];

  // @todo Convert to using drupal_html_class() after benchmarking the impact of
  //   doing so.
  $field_type_css = strtr($element['#field_type'], '_', '-');
  $field_name_css = strtr($element['#field_name'], '_', '-');

  // Prepare an $items variable that the template can simply loop on.
  // Filter out non-children properties that might have been added if the
  // renderable array has gone through form_builder().
  $items = array_intersect_key($element, array_flip(element_children($element)));

  $additions = array(
    'object' => $element['#object'],
    'view_mode' => $element['#view_mode'],
    'items' => $items,
    'field_type' => $element['#field_type'],
    'field_name' => $element['#field_name'],
    'field_type_css' => $field_type_css,
    'field_name_css' => $field_name_css,
    'label' => check_plain($element['#title']),
    'label_display' => $element['#label_display'],
    'label_hidden' => $element['#label_display'] == 'hidden',
    'field_language' => $element['#language'],
    'field_translatable' => $element['#field_translatable'],
    'classes_array' => array(
      'field',
      'field-name-' . $field_name_css,
      'field-type-' . $field_type_css,
      'field-label-' . $element['#label_display'],
    ),
    'theme_hook_suggestions' => array(
      'field',
      'field__' . $element['#field_name'],
      'field__' . $element['#bundle'],
      'field__' . $element['#field_name'] . '__' . $element['#bundle'],
    ),
  );
  $variables = array_merge($variables, $additions);

  // Initialize attributes for each item.
  $variables['item_attributes_array'] = array();
  foreach ($variables['items'] as $delta => $item) {
    $variables['item_attributes_array'][$delta] = array();
  }
}

/**
 * Theme process function for field.tpl.php.
 *
 * @see field.tpl.php
 */
function template_process_field(&$variables) {
  // Flatten out attributes for each item.
  foreach ($variables['items'] as $delta => $item) {
    $variables['item_attributes'][$delta] = drupal_attributes($variables['item_attributes_array'][$delta]);
  }
}
/**
 * @} End of "defgroup field"
 */
