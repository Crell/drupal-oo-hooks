<?php
// $Id$

function forum_system($field){
  $system["description"] = t("Enable threaded discussions about general topics.");
  return $system[$field];
}

function forum_node($field) {
  $info["name"] = t("discussion forum");
  $info["description"] = t("A forum is a threaded discussion, enabling users to communicate about a particular topic.");

  return $info[$field];
}

function forum_access($op, $node) {
  if ($op == "view") {
    return $node->status;
  }
  if ($op == "create") {
    return user_access("post content");
  }
}

function forum_perm() {
  return array("post forum topics without approval");
}

function forum_conf_options() {
  foreach (taxonomy_get_vocabularies("forum") as $vid => $voc) {
    $vocs[$vid] = $voc->name;
  }
  $output .= "<a name=\"image_nav_vocabulary\"></a>";
  $output .= form_select("Forum vocabulary", "forum_nav_vocabulary", variable_get("forum_nav_vocabulary", ""), $vocs, t("The taxonomy vocabulary that will be used as the navigation tree."));
  $output .= _taxonomy_term_select("Containers", "forum_containers", variable_get("forum_containers", array()), variable_get("forum_nav_vocabulary", ""), t("You can choose forums which will not have topics, but will be just containers for other forums."), 1, t("<none>"));

  $output .= form_textfield("Topic icons path", "forum_topic_icon_path", variable_get("forum_topic_icon_path", "images/forum/topics/"), 30, 255, "The path to the topic icons.  Leave blank to disable icons.");
  $output .= form_textfield("Folder icons path", "forum_folder_icon_path", variable_get("forum_folder_icon_path", "images/forum/folder/"), 30, 255, "The path to the <b>default</b>, <b>hot</b>, <b>new</b>, <b>hot & new</b>, and <b>closed</b> folder icons.  Leave blank to disable icons.");
  $number = array(5 => 5, 10 => 10, 15 => 15, 20 => 20, 25 => 25, 30 => 30, 35 => 35, 40 => 40, 50 => 50, 60 => 60, 80 => 80, 100 => 100, 10000=>10000);
  $output .= form_select("Hot topic threshold", "forum_hot_topic", variable_get("forum_hot_topic", 15), $number, "The number of posts a topic must have to be considered <b>hot</b>.");
  $number = array(10 => 10, 25 => 25, 50 => 50, 75 => 75, 100 => 100);
  $output .= form_select("Topics per page", "forum_per_page", variable_get("forum_per_page", 25), $number, "The default number of topics displayed per page; links to browse older messages are automatically being displayed.");
  $forder = array(1 => "Date - newest first", 2 => "Date - oldest first", 3 => "Posts - most active first", 4=> "Posts - least active first");
  $output .= form_select("Default order", "forum_order", variable_get("forum_order", 1), $forder, "The default display order for topics.");
  $output .= form_textfield("Number of topics in block", "forum_block_num", variable_get("forum_block_num", "5"), 5, 5, "The number of topics in the <b>Forum topics</b>-block.  To enable the block, click ". la("here", array("mod" => "block")) .".");
  $output .= form_select("Internal caching", "forum_cache", variable_get("forum_cache", 0), array("disabled", "enabled"), "Cache internal datastructures for both anonymous and autheticated users.  When enabled, the forum data won't be 100% up to date with regards regard to the number of posts, the number of replies and the last topic being posted.  Enable when you have busy forum.");

  return $output;
}

function forum_save($op, $node) {
  if ($op == "approve") {
    return array("status" => 1);
  }

  if ($op == "create") {
    if (user_access("post forum topics without approval")) {
      $moderation = array("body" => filter($node->body), "moderate" => 0, "status" => 1);
    } else {
      $moderation = array("body" => filter($node->body), "moderate" => 1, "status" => 0);
    }
    return array_merge($moderation, array("tid", "icon_num", "shadow"));
  }

  if ($op == "decline") {
    return array("status" => 0);
  }

  if ($op == "update") {
    // if she changed the term, we could have to leave a shadow
    $old_terms = explode(",", $node->old_container);
    foreach ($node->taxonomy as $term) {
      if ($term && (!in_array($term, $old_terms)) && $node->shadow) {
        $shadow = $term;
        break;
      }
    }
    return array("body" => filter($node->body), "tid", "icon_num", "shadow" => $shadow, "old_container");
  }
}

function forum_load($node) {
  $forum = db_fetch_object(db_query("SELECT * FROM forum WHERE nid = '%d' AND shadow = 0", $node->nid));

  return $forum;
}

function forum_block($op = "list", $delta = 0) {
  if ($op == "list") {
    $blocks[0]["info"] = t("Forum topics");
  }
  else {
    if (user_access("access content")) {
      if (variable_get("forum_cache", 0)) {
        $content = cache_get("forum:block");
      }

      if (!$content) {
        $content = "<b>". t("Active forum topics:") ."</b><br />";
        $result = db_query("SELECT n.nid, n.title, n.body, GREATEST(n.created, MAX(c.timestamp)) AS sort FROM node n, forum f LEFT JOIN comments c ON c.nid = n.nid WHERE n.type = 'forum' AND n.nid = f.nid AND f.shadow = 0 AND n.status = 1 GROUP BY n.nid ORDER BY sort DESC LIMIT ". variable_get("forum_block_num", "5"));
        while ($node = db_fetch_object($result)) {
          $content .= "- ". l(check_output($node->title), array("id" => $node->nid), "node", "", array("title" => substr(strip_tags($node->body), 0, 100)."...")) ."<br />";
        }

        $content .= "<br />";
        $content .= "<b>". t("New forum topics:") ."</b><br />";
        $result = db_query("SELECT n.nid, n.title, n.body FROM node n LEFT JOIN forum f ON n.nid = f.nid WHERE n.type = 'forum' ORDER BY n.nid DESC LIMIT ". variable_get("forum_block_num", "5"));
        while ($node = db_fetch_object($result)) {
          $content .= "- ". l(check_output($node->title), array("id" => $node->nid), "node", "", array("title" => substr(strip_tags($node->body), 0, 100)."...")) ."<br />";
        }

        if ($content) {
          $content .= "<div align=\"right\">". lm(t("more"), array("mod" => "forum")) ."</div>";
        }

        cache_set("forum:block", $content, time() + 60 * 3);
      }

      $blocks["subject"] = t("Forum topics");
      $blocks["content"] = $content;
    }
  }

  return $blocks;
}

function forum_link($type, $node) {
  if ($type == "page" && user_access("access content")) {
    $links[] = lm(t("forum"), array("mod" => "forum"));
  }

  if ($type == "menu.create" && user_access("post content")) {
    // I had complains that having this link leads people not to choose a forum, and always post in the first forum.
    #$links[] = lm(t("create forum topic"), array("mod" => "node", "op" => "add", "type" => "forum"), "", array("title" => t("Start a new forum topic.")));
  }

  if ($type == "node" && $node->type == "forum") {
    // get previous and next topic

    $sql = "SELECT n.nid, title, body, GREATEST(n.created, MAX(c.timestamp)) AS date_sort, COUNT(c.nid) AS num_comments FROM node n, term_node t, forum f LEFT JOIN comments c ON c.nid = n.nid WHERE n.nid = t.nid AND n.nid = f.nid AND t.tid = '%d' AND f.shadow = 0 AND n.status = 1 GROUP BY n.nid ORDER BY ". _forum_get_topic_order(isset($user->sortby) ? $user->sortby : variable_get("forum_order",1));

    $terms = array_keys(taxonomy_node_get_terms_by_vocabulary($node->nid, variable_get("forum_nav_vocabulary", "")));
    $result = db_query($sql, $terms[0]);

    while ($topic = db_fetch_object($result)) {
      if ($stop == 1) {
        $next->nid = $topic->nid;
        $next->title = $topic->title;
        $next->body = $topic->body;
        break;
      }
      if ($topic->nid == $node->nid) {
        $stop = 1;
      }
      else {
        $prev->nid = $topic->nid;
        $prev->title = $topic->title;
        $prev->body = $topic->body;
      }
    }

    if ($prev) {
      $links[] = l(t("previous forum topic"), array("id" => $prev->nid), "node", "", array("title" => $prev->title .": ". substr(strip_tags($prev->body), 0, 100)."..."));
    }

    if ($next) {
      $links[] = l(t("next forum topic"), array("id" => $next->nid), "node", "", array("title" => $next->title .": ". substr(strip_tags($next->body), 0, 100)."..."));
    }
  }

  return $links ? $links : array();
}

function forum_view($node, $main = 0) {
  global $theme;

  $term_data = array_shift(taxonomy_node_get_terms($node->nid));
  if (!$term_data) {
    // we are previewing
    $term_data = taxonomy_get_term($node->taxonomy[0]);
  }
  $voc = taxonomy_get_vocabulary($term_data->vid);

  $output .= "<p>"._forum_get_icon($node)." ".lm(check_output($voc->name), array("mod" => "forum"))." : ".lm(check_output($term_data->name), array("mod" => "forum", "tid" => $term_data->tid));

  $output .= " / <b>". check_output($node->title) ."</b><br>".t("%a by %b", array("%a" => format_date($node->created), "%b" => format_name($node)))."</p><p>". check_output($node->body, 1) ."</p>";
  $output .= "<p>". $theme->links(link_node($node, $main)) ."</p>";

  #$theme->box(t("Discussion forum"), $output);

  $node->title = _forum_get_icon($node)." ".lm(check_output($voc->name), array("mod" => "forum"))." : ".lm(check_output($term_data->name), array("mod" => "forum", "tid" => $term_data->tid)) . " / <b>". check_output($node->title) ."</b>";

  $theme->node($node, $main);
}

function forum_form(&$node, &$help, &$error) {
  global $tid;
  if ($node->nid) {
    if ($node->taxonomy) {
      $tid = $node->taxonomy;
    } else {
      // editing: load category from taxonomy
      $tid = implode(",", array_keys(taxonomy_node_get_terms($node->nid)));
    }
    //$output .= implode("<p>", taxonomy_node_form("forum", $node));
    $output .= "<input type=\"hidden\" name=\"edit[old_container]\" value=\"".implode(",", array_keys(taxonomy_node_get_terms($node->nid)))."\">";
    $output .= form_checkbox(t("Leave shadow?"), "shadow", 1, 1, t("If you move this topic, you can leave a link in the old forum to the new forum."));
  } else {
    if ($node->taxonomy) {
      $tid = $node->taxonomy;
    }
  }

  $output .= _taxonomy_term_select("Forum", "taxonomy", $tid, variable_get("forum_nav_vocabulary", ""), "", 0, "", variable_get("forum_containers", array()));

  if ($icon_path = variable_get("forum_topic_icon_path", "images/forum/topics/")) {
    if ($node->icon) {
      // we are editing post
      if ($dir = @opendir($icon_path)) {
        $icon_num = 0;
        while($icon = readdir($dir)) {
          if ($icon == '.' || $icon == '..') {continue;}
          if ($node->icon == $icon) {$checked = "checked";} else {$checked = "";}
          $radio .= "<input type=\"radio\" name=\"edit[icon_num]\" value=\"$icon_num\" $checked><img src=\"$icon_path$icon\"> \n";
          $icon_num++;
        }
        closedir($dir);
      }
    }
    else {
      if ($dir = @opendir($icon_path)) {
        $icon_num = 0;
        while($icon = readdir($dir)) {
          if ($icon == '.' || $icon == '..') {continue;}
          if ($node->icon_num == $icon_num) {$checked = "checked";} else {$checked = "";}
          $radio .= "<input type=\"radio\" name=\"edit[icon_num]\" value=\"$icon_num\" $checked><img src=\"$icon_path$icon\"> \n";
          $icon_num++;
        }
        closedir($dir);
      }
    }
    $output .= form_item(t("Topic icon"), $radio);
  }
  $output .= form_textarea("Body", "body", $node->body, 60, 10);

  return $output;
}

function forum_insert($node) {
  $node->icon = _forum_decode_icon($node);
  if (!$node->shadow) {
    db_query("INSERT INTO forum (nid, icon) VALUES ('%d', '%s')", $node->nid, $node->icon);
  } else {
    // we created a shadow, a link to a moved topic in a new forum
    db_query("INSERT INTO forum (nid, icon, shadow) VALUES ('%d', '%s', '%d')", $node->nid, $node->icon, $node->shadow);
  }

  if (variable_get("forum_cache", 0)) {
    cache_clear();
  }
}

function forum_update($node) {
  $node->icon = _forum_decode_icon($node);
  db_query("UPDATE forum SET icon = '%s' WHERE nid = '%d'", $node->icon, $node->nid);
  if ($node->shadow) {
    // insert in old forum a new topic, with link to new forum
    $node->nid = "";
    $node->type = "forum";
    $node->status = 1;
    $node->taxonomy = array($node->old_container);
    node_submit($node);
  }
}

function _forum_decode_icon($node) {
  // to prevent malicious users
  if ($icon_path = variable_get("forum_topic_icon_path", "images/forum/topics/")) {
    if ($dir = @opendir($icon_path)) {
      $icon_num = 0;
      while($icon = readdir($dir)) {
        if ($icon == '.' || $icon == '..') {continue;}
        if ($icon_num == $node->icon_num) {$myicon = $icon;}
        $icon_num++;
      }
      closedir($dir);
    }
  }
  return $myicon;
}

function forum_delete(&$node) {
  db_query("DELETE FROM forum WHERE nid = '%d'", $node->nid);
}

function _forum_num_comments($nid) {
  $value = db_fetch_object(db_query("SELECT COUNT(cid) AS count FROM comments WHERE nid = '%d' AND status = 0", $nid));
  return ($value) ? $value->count : 0;
}

function _forum_last_comment($nid) {
  $value = db_fetch_object(db_query("SELECT timestamp FROM comments WHERE nid = '%d' AND status = 0 ORDER BY timestamp DESC LIMIT 1", $nid));
  return ($value) ? format_date($value->timestamp, "small") : "&nbsp;";
}

function _forum_last_reply($nid) {
  $value = db_fetch_object(db_query("SELECT c.timestamp, u.name, u.uid FROM comments c LEFT JOIN users u ON c.uid = u.uid WHERE c.nid = '%d' AND c.status = 0 ORDER BY c.timestamp DESC LIMIT 1", $nid));
  return $value;
}

function _forum_format($topic) {
  if ($topic) {
    return "<small>". format_date($topic->timestamp, "small")."<br>".t("by")." ". format_name($topic) ."</small>";
  }
  else {
    return message_na();
  }
}

function forum_get_forums($tid = 0) {
  global $user;

  if (!$tid) {
    $tid = 0;
  }

  if (variable_get("forum_cache", 0)) {
    $forums = unserialize(cache_get("forum:$tid"));
  }

  if (!$forums) {
    $forums = array();
    taxonomy_get_tree(variable_get("forum_nav_vocabulary", ""), $_forums, $tid);
    $n = 0;
    foreach ($_forums as $forum) {
      if (in_array($forum->tid, variable_get("forum_containers", array()))) {
        $forum->container = 1;
      }
      else {
        $forum->num_topics = _forum_num_topics($forum->tid);
        $forum->num_posts = _forum_num_replies($forum->tid) + $forum->num_topics;
        $forum->last_post = _forum_last_post($forum->tid);
      }
      $forums[$forum->tid] = $forum;
      $n++;
    }

    if (variable_get("forum_cache", 0)) {
      cache_set("forum:$tid", serialize($forums), time()+60*10);
    }
  }

  if ($user->uid && $forums) {
    foreach (_forum_topics_read($user->uid) as $tid => $old) {
      if ($forums[$tid]) {
        $forums[$tid]->old_topics = $old;
      }
    }
  }

  return $forums;
}

function forum_get_parents($tid) {
  if ($tid) {
    $parents[] = taxonomy_get_term($tid);
  }
  $n = 0;
  while ($parent = taxonomy_get_parents($parents[$n]->tid)) {
    $parents = array_merge($parents, $parent);
    $n++;
  }
  return $parents;
}

function _forum_num_topics($term) {
  $value = db_fetch_object(db_query("SELECT COUNT(n.nid) AS count FROM node n, term_node r, forum f WHERE r.tid = '%d' AND n.nid = r.nid AND n.nid = f.nid AND n.status = 1 AND n.type = 'forum' AND f.shadow = 0", $term));
  return ($value) ? $value->count : 0;
}

function _forum_num_replies($term) {
  $value = db_fetch_object(db_query("SELECT COUNT(*) AS count FROM comments c, term_node r, node n WHERE r.tid = '%d' AND n.nid = r.nid AND n.nid = c.nid AND n.status = 1 AND c.status = 0 AND n.type = 'forum'", $term));
  return ($value) ? $value->count : 0;
}

function _forum_topics_read($uid) {
  $result = db_query("SELECT tid, count(*) AS c FROM history h, term_node r, node n WHERE r.nid = h.nid AND n.nid = h.nid AND n.type = 'forum' AND n.status = 1 AND h.uid = '%d' GROUP BY tid", $uid);

  while ($obj = db_fetch_object($result)) {
    $topics_read[$obj->tid] = $obj->c;
  }

  return $topics_read ? $topics_read : array();
}

function _forum_last_post($term) {
  $topic = db_fetch_object(db_query("SELECT n.nid, n.created AS timestamp, u.name AS name, u.uid AS uid FROM node n, term_node r LEFT JOIN users u ON n.uid = u.uid WHERE r.tid = '%d' AND n.nid = r.nid AND n.type = 'forum' AND n.status = 1 ORDER BY timestamp DESC LIMIT 1", $term));

  $reply = db_fetch_object(db_query("SELECT n.nid, c.timestamp, u.name AS name, u.uid AS uid FROM term_node r, node n LEFT JOIN comments c ON n.nid = c.nid LEFT JOIN users u ON c.uid = u.uid WHERE r.tid = '%d' AND n.nid = r.nid AND n.type = 'forum' AND n.status = 1 AND c.status = 0 ORDER BY c.timestamp DESC LIMIT 1", $term));

  $value = ($topic->timestamp > $reply->timestamp) ? $topic : $reply;

  return $value;
}

function forum_get_topics($tid, $sortby, $forum_per_page, $offset) {
  global $user;

  $term = taxonomy_get_term($tid);
  $voc = taxonomy_get_vocabulary($term->vid);

  $sql_sortby = _forum_get_topic_order($sortby);

  $sql = "
    SELECT n.nid, title, users.name AS name, users.uid AS uid, n.created AS timestamp, GREATEST(n.created, MAX(c.timestamp)) AS date_sort, COUNT(c.nid) AS num_comments, icon, n.comment AS comment_mode, shadow FROM node n, term_node r LEFT JOIN users ON n.uid = users.uid LEFT JOIN comments c ON c.nid = n.nid LEFT JOIN forum f ON n.nid = f.nid WHERE n.nid = r.nid AND r.tid = '%d' AND n.status = 1 AND n.type = 'forum' GROUP BY n.nid ORDER BY $sql_sortby";

  $result = db_query($sql, $tid);
  $topic_num = db_num_rows($result);

  $n = 0;
  while ($topic = db_fetch_object($result)) {
    if ($n < $offset) {
      $n++;
      continue;
    }

    $history = _forum_user_last_visit($topic->nid);
    // folder is new if topic is new or there are new comments since last visit
    if ($topic->shadow > 0) {
      $topic->new = 0;
    }
    else {
      if (!$history && $user->uid) {
        $topic->new_replies = 0;
        $topic->new = 1;
      }
      else {
        $comments = db_result(db_query("SELECT COUNT(c.nid) FROM node n LEFT JOIN comments c ON n.nid = c.nid WHERE n.nid = '$topic->nid' AND c.status = 0 AND timestamp > '$history' GROUP BY n.nid"));

        $topic->new_replies = $comments ? $comments : 0;
        if ($topic->new_replies) {
          $topic->new = 1;
        }
        else {
          $topic->new = 0;
        }
      }
    }

    $topic->last_reply = _forum_last_reply($topic->nid);
    $topics[] = $topic;

    $n++;
    if ($n == ($forum_per_page + $offset)) {
      break;
    }
  }

  return array($topics, $topic_num);
}

function _forum_first_new($tid) {
  global $user;
  $result = db_query("SELECT r.nid FROM node n, history h, term_node r WHERE n.type = 'forum' AND n.status = 1 AND h.nid = n.nid AND r.nid = h.nid AND r.tid = '%d' AND h.uid = '%d'   ", $tid, $user->uid);
  while ($r = db_fetch_object($result)) {
    $read[] = $r->nid;
  }

  if ($read) {
    $nid = db_result(db_query("SELECT r.nid AS c FROM node n LEFT JOIN term_node r ON r.nid = n.nid WHERE n.type = 'forum' AND n.status = 1 AND r.tid = '%d' AND NOT (r.nid IN (".implode(",", $read).")) ORDER BY created LIMIT 1", $tid));
  }

  return $nid ? $nid : 0;
}

function forum_page() {
  global $theme, $tid, $sortby, $forum_per_page, $offset, $op, $user;

  if (user_access("access content")) {
    if ($op == "Update settings") {
      $user = user_save($user, array("sortby" => $sortby, "forum_per_page" => $forum_per_page));
    }

    if ($op == "first_new") {
      if ($nid = _forum_first_new($tid)) {
        drupal_goto(drupal_url(array("id" => $nid), "node"));
      }
    }

    if (empty($sortby)) {
      $sortby = isset($user->sortby) ? $user->sortby : variable_get("forum_order",1);
    }
    if (empty($forum_per_page)) {
      $forum_per_page = isset($user->forum_per_page) ? $user->forum_per_page : variable_get("forum_per_page", 25);
    }
    if (empty($offset)) {
      $offset = 0;
    }

    $forums = forum_get_forums($tid);
    $parents = forum_get_parents($tid);
    if ($tid && !in_array($tid, variable_get("forum_containers", array()))) {
      list($topics, $topic_num) = forum_get_topics($tid, $sortby, $forum_per_page, $offset);
    }

    theme_invoke("forum_render", $forums, $topics, $topic_num, $parents, $tid, $sortby, $forum_per_page, $offset);
  }
  else {
    $theme->header();
    $theme->box(t("Access denied"), message_access());
    $theme->footer();
  }
}

/**
*** render functions
**/

function forum_render($forums, $topics, $topic_num, $parents, $tid, $sortby, $forum_per_page, $offset) {
  // forum list, topics list, topic browser and "add new topic" link
  global $theme;

  $output .= theme_invoke("forum_forum_list", $forums, $parents, $tid);
  if ($tid && !in_array($tid, variable_get("forum_containers", array()))) {
    $output .= theme_invoke("forum_topic_list", $topics, $topic_num, $sortby, $forum_per_page, $offset);
  }

  $theme->header();
  $theme->box(t("Discussion forum"), $output);
  if ($tid && !in_array($tid, variable_get("forum_containers", array()))) {
    $theme->box(t("Control panel"), theme_invoke("forum_topic_browser", $sortby, $forum_per_page, $offset));
  }
  $theme->footer();
}

function forum_forum_list($forums, $parents, $tid) {
  global $user;
  if ($parents) {
    foreach($parents as $p) {
      if ($tid != $p->tid) {
        $t[] = lm($p->name, array("mod" => "forum", "tid" => $p->tid));
      }
      else {
        $t[] = $p->name;
      }
    }
  }
  $t[] = lm(t("Discussion forum"), array("mod" => "forum"));

  $output .= "<table border=\"0\" cellpadding=\"5\" width=\"100%\">\n";
  $output .= " <tr><th colspan=\"3\" align=\"left\">".implode(" : ", array_reverse($t)) ."</th>";
  if ($forums) {
    $output .= "<th>". t("topics") ."</th><th>". t("posts") ."</th><th>". t("last post") ."</th></tr>";


    foreach ($forums as $forum) {
      if ($forum->container) {
        $output .= " <tr><td colspan=\"5\">". lm(check_output($forum->name), array("mod" => "forum", "tid" => $forum->tid))."<br /><small>". ($forum->description ? check_output($forum->description, 1) : "") ."</small></td></tr>";
      } else {
        if ($user->uid) $new_topics = $forum->num_topics - $forum->old_topics;
        $icon = _forum_get_folder_icon($new_topics);
        $output .= " <tr><td>&nbsp;</td><td>$icon</td>";
        $output .= "<td><table border=\"0\"><tr><td width=\"". ($forum->depth * 20) ."\">&nbsp;</td><td>".lm(check_output($forum->name), array("mod" => "forum", "tid" => $forum->tid))."<div style=\"padding-top: 5px;\">". check_output($forum->description, 1);

        $links = array();
        if ($forum->last_post) {
          $links[] = l(t("the most recent topic"), array("id" => $forum->last_post->nid));
        }
        if ($new_topics) {
          $links[] = lm(t("the first new topic"), array("mod" => "forum", "op" => "first_new", "tid" => $forum->tid));
        }

        if ($links) {
          $output .= "<br />Jump to: ". implode(", ", $links);
        }

        $output .= "</div></td></tr></table></td>";
        $output .= "<td align=\"center\">".$forum->num_topics.($new_topics ? "<br>(".t("%a new", array("%a" => $new_topics)).")" : "")."</td><td align=\"center\">".$forum->num_posts."</td><td align=\"center\">"._forum_format($forum->last_post)."</td></tr>";
      }
    }
  }
  $output .= "</table>\n";

  return $output;
}

function forum_topic_browser() {
  global $tid, $sortby, $forum_per_page, $offset;

  if (empty($sortby)) {
    $sortby = variable_get("forum_order",1);
  }
  if (empty($forum_per_page)) {
    $forum_per_page = variable_get("forum_per_page", 25);
  }

  $forum_per_page_options = array(10, 25, 50, 75, 100);
  foreach ($forum_per_page_options as $value) {
    $options .= " <option value=\"$value\"". ($forum_per_page == $value ? " selected=\"selected\"" : "") .">".t("%a topics per page", array("%a" => $value))."</option>\n";
  }

  $output .= "<select name=\"forum_per_page\">$options</select>\n";

  $options = "";
  $sortby_options = array(1 => t("Date - newest first"), 2 => t("Date - oldest first"), 3 => t("Posts - most active first"), 4=> t("Posts - least active first"));
  foreach ($sortby_options as $key => $value) {
    $options .= " <option value=\"$key\"". ($sortby == $key ? " selected=\"selected\"" : "") .">$value</option>\n";
  }

  $output .= "\n<select name=\"sortby\">$options</select>\n";
  $output .= form_hidden("tid", $tid);
  $output .= form_submit(t("Update settings"));
  return form(form_item(t("Topic viewing options"), $output, t("Select your preferred way to display the topics and click 'Update settings'.")));
}

function forum_topic_list($topics, $num_topics, $sortby, $forum_per_page, $offset) {
  global $theme, $id, $status, $tid, $user;

  $output .= "<div style=\"margin-left: 20px; margin-top: 5px; margin-bottom: 10px;\">" .t("%a topics, %b topics per page, page %c of %d", array("%a" => $num_topics, "%b" => $forum_per_page, "%c" => ceil(($offset + 1)/$forum_per_page), "%d" => ceil($num_topics/$forum_per_page))) ."</div>";

  if ($topics) {
    $output .= "<table border=\"0\" cellpadding=\"5\" cellspacing=\"5\" width=\"100%\">\n";
    $output .= " <tr><th>&nbsp;</th><th>&nbsp;</th><th>". t("topic") ."</th><th>". t("replies") ."</th><th>". t("posted") ."</th><th>". t("last reply") ."</th></tr>";

    foreach ($topics as $topic) {
      // folder is new if topic is new or there are new comments since last visit
      if ($topic->shadow) {
        $output .= "
          <tr>
            <td>"._forum_get_folder_icon($topic->new, $topic->num_comments, $topic->comment_mode)."</td>
            <td>"._forum_get_icon($topic)."</td>
            <td valign=\"top\">". check_output($topic->title) ."</td>
            <td align=\"center\" valign=\"top\" colspan=\"3\">".lm(t("This topic has been moved"), array("mod" => "forum", "tid" => $topic->shadow))."</td>
          </tr>";
      }
      else {
        $output .= "
          <tr>
            <td>"._forum_get_folder_icon($topic->new, $topic->num_comments, $topic->comment_mode)."</td>
            <td>"._forum_get_icon($topic)."</td>
            <td valign=\"top\">".l(check_output($topic->title), array("id" => $topic->nid))."</td>
            <td align=\"center\" valign=\"top\" nowrap=\"nowrap\">".$topic->num_comments.($topic->new_replies ? " (".t("%a new", array("%a" => $topic->new_replies)).")" : "")."</td>
            <td align=\"center\">"._forum_format($topic)."</td>
            <td align=\"center\">"._forum_format($topic->last_reply)."</td>
          </tr>";
      }
    }

    $output .= "</table></blockquote>\n";
  }
  $output .= "<hr />";
  $output .= "<table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\"><tr>";

  if ($offset > 0) {
    $output .= "<td width=\"33%\"><div align=\"left\" style=\"font-style: bold;\">". lm(t("previous topics"), array("mod" => "forum", "tid" => $tid, "offset" => ($offset-$forum_per_page))) ."</div></td>";
  }
  else {
    $output .= "<td width=\"33%\">&nbsp;</td>";
  }

  if (user_access("post content")) {
    $output .= "<td width=\"33%\"><div align=\"center\" style=\"font-style: bold;\">". lm(t("start new topic"), array("mod" => "node", "op" => "add", "type" => "forum", "tid" => $tid)) ."</div></td>";
  }

  if (count($topics) >= $forum_per_page) {
    $output .= "<td width=\"33%\"><div align=\"right\" style=\"font-style: bold;\">". lm(t("next topics"), array("mod" => "forum", "tid" => $tid, "offset" => ($offset+$forum_per_page))) ."</div></td>";
  }
  else {
    $output .= "<td width=\"33%\">&nbsp;</td>";
  }

  $output .= "</tr></table>";

  return $output;
}


function _forum_get_icon($node) {
  if (variable_get("forum_topic_icon_path", "images/topics/") && $node->icon) {
    return "<img src=\"".variable_get("forum_topic_icon_path", "images/forum/topics/"). check_output($node->icon)."\">";
  }
  else {
    return "&nbsp;";
  }
}

function _forum_get_folder_icon($new_posts, $num_posts = 0, $comment_mode = 0) {
  // "folder" icon because it's generally rendered as a folder
  global $theme;

  $base_path = variable_get("forum_folder_icon_path", "images/forum/folder");
  if ($base_path) {
    if ($num_posts > variable_get("forum_hot_topic", 15)) {
      $icon = $new_posts ? "hot_new" : "hot";
    }
    else {
      $icon = $new_posts ? "new" : "default";
    }

    if ($comment_mode == 1) {
      $icon = "closed";
    }

    if ($theme->bbs_icons) {
      $file = $theme->bbs_icons[$icon];
    }
    else {
      // default
      $file = $base_path."/".$icon.".gif";
    }

    return "<img src=\"$file\">";
  }
  else {
    return "&nbsp;";
  }
}

function _forum_user_last_visit($nid) {
  global $user;
  static $history;
  if (!$history) {
    $result = db_query("SELECT nid, timestamp FROM history WHERE uid = '%d'", $user->uid);
    while ($t = db_fetch_object($result)) {
      $history[$t->nid] = $t->timestamp;
    }
  }
  return $history[$nid] ? $history[$nid] : 0;
}

function _forum_get_topic_order($sortby) {
  switch ($sortby) {
    case 1:
      return "date_sort DESC";
      break;
    case 2:
      return "date_sort ASC";
      break;
    case 3:
      return "num_comments DESC";
      break;
    case 4:
      return "num_comments ASC";
      break;
  }
}

function forum_help() {
  ?>
  <h4>Containers</h4>
  By designating a forum as a Container, users are not allowed to post into that forum. The forum will be visible on the forum listing page, so it acts as a section delimiter if you will. This is useful if you have a lots of forums which are nested. For example,
<br /><br />
Marketing<br />
-- Market research<br />
-- Brand management<br />
<br />
Sales<br />
-- Closing the deal<br />
-- Avoiding ear and throat pain<br />
<br />
If you don't want people posting into the Marketing or Sales folders, you designate them as Containers.<br />
<br />
<h4>Icons</h4>
To disable icons, set the icon paths as blank in Admin -> Site Configuration -> Forum<br />
<br />
All files in the icon directory are assumed to be images. Usually it is best to use GIF or JPG files as icons.
You may use images of whatever size you wish, but it is customary to use 15x15 or 16x16.


  <?php
}

?>