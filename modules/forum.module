<?php
// $Id$

function forum_system($field){
  $system["description"] = t("Enable threaded discussions about general topics.");
  $system["admin_help"] = t("Forums are threaded discussions based on the taxonomy system so you must first define a <a href=\"%taxonomy-create\">taxonomy</a> of type \"forum\" to place the forum tree in. Then <a href=\"%taxonomy\">add terms</a> to this taxonomy. Each term becomes the name of a forum. If you define a term as a \"Container\" (See below) the term is not a forum itself, but rather holds forms. This lets you group your forums.", array("%taxonomy-create" => url("admin/taxonomy/add/vocabulary"), "%taxonomy" => url("admin/taxonomy")));
  return $system[$field];
}

function forum_node($field) {
  $info["name"] = t("forum topic");
  $info["description"] = t("A forum is a threaded discussion, enabling users to communicate about a particular topic.");

  return $info[$field];
}

function forum_access($op, $node) {
  if ($op == "view") {
    return $node->status;
  }
  if ($op == "create") {
    return user_access("create forum topics");
  }
}

function forum_perm() {
  return array("create forum topics");
}

function forum_settings() {

  if (module_exist("taxonomy")) {
    $vocs[0] = "<". t("none") .">";
    foreach (taxonomy_get_vocabularies("forum") as $vid => $voc) {
      $vocs[$vid] = $voc->name;
    }

    if ($voc) {
      $output .= form_textarea(t("Explanation or submission guidelines"), "forum_help", variable_get("forum_help", ""), 70, 5, t("This text will be displayed at the top of the forum submission form.  Useful for helping or instructing your users."));
      $output .= form_select(t("Forum vocabulary"), "forum_nav_vocabulary", variable_get("forum_nav_vocabulary", ""), $vocs, t("The taxonomy vocabulary that will be used as the navigation tree."));
      $output .= _taxonomy_term_select(t("Containers"), "forum_containers", variable_get("forum_containers", array()), variable_get("forum_nav_vocabulary", ""), t("You can choose forums which will not have topics, but will be just containers for other forums."), 1, t("<none>"));

      $output .= form_textfield(t("Topic icons path"), "forum_topic_icon_path", variable_get("forum_topic_icon_path", ""), 30, 255, t("The path to the topic icons.  Leave blank to disable icons."));
      $output .= form_textfield(t("Folder icons path"), "forum_folder_icon_path", variable_get("forum_folder_icon_path", ""), 30, 255,t( "The path to the <b>default</b>, <b>hot</b>, <b>new</b>, <b>hot & new</b>, and <b>closed</b> folder icons.  Leave blank to disable icons."));
      $number = array(5 => 5, 10 => 10, 15 => 15, 20 => 20, 25 => 25, 30 => 30, 35 => 35, 40 => 40, 50 => 50, 60 => 60, 80 => 80, 100 => 100, 10000=>10000);
      $output .= form_select(t("Hot topic threshold"), "forum_hot_topic", variable_get("forum_hot_topic", 15), $number, t("The number of posts a topic must have to be considered <b>hot</b>."));
      $number = array(10 => 10, 25 => 25, 50 => 50, 75 => 75, 100 => 100);
      $output .= form_select(t("Topics per page"), "forum_per_page", variable_get("forum_per_page", 25), $number, t("The default number of topics displayed per page; links to browse older messages are automatically being displayed."));
      $forder = array(1 => t("Date - newest first"), 2 => t("Date - oldest first"), 3 => t("Posts - most active first"), 4=> t("Posts - least active first"));
      $output .= form_select(t("Default order"), "forum_order", variable_get("forum_order", 1), $forder, t("The default display order for topics."));
      $output .= form_textfield(t("Number of topics in block"), "forum_block_num", variable_get("forum_block_num", "5"), 5, 5, t("The number of topics in the <b>Forum topics</b>-block.  To enable the block, click ". l("here", "admin/block") ."."));
    }
    else {
      $output .= _forum_message_taxonomy();
    }
  }
  else {
    $output .= _forum_message_taxonomy();
  }

  return $output;
}

function forum_taxonomy($op, $type, $object) {
  if ($type == "vocabulary" && ($op == "insert" || $op == "update")) {
    if (variable_get("forum_nav_vocabulary", "") == "" && in_array("forum", $object["nodes"])) {
      // since none is already set, silently set this vocabulary as the navigation vocabulary
      variable_set("forum_nav_vocabulary", $object["vid"]);
    }
  }
}

function forum_load($node) {
  $forum = db_fetch_object(db_query("SELECT * FROM forum WHERE nid = %d", $node->nid));

  return $forum;
}

function forum_block($op = "list", $delta = 0) {
  if ($op == "list") {
    $blocks[0]["info"] = t("Forum topics");
  }
  else {
    if (user_access("access content")) {
      $cache = cache_get("forum:block");

      if (empty($cache)) {
        unset($items);
        $content = node_title_list(db_query_range("SELECT n.nid, n.title, u.uid, u.name, GREATEST(n.created, MAX(c.timestamp)) AS sort FROM node n LEFT JOIN forum f ON n.nid = f.nid LEFT JOIN comments c ON n.nid = c.nid LEFT JOIN users u ON n.uid = u.uid WHERE n.type = 'forum' AND n.nid = f.nid AND n.status = 1 GROUP BY n.nid, n.title, n.created, u.uid, u.name ORDER BY sort DESC", 0, variable_get("forum_block_num", "5")), t("Active forum topics:"));

        unset ($items);
        $content .= node_title_list(db_query_range("SELECT n.nid, n.title, u.uid, u.name FROM node n LEFT JOIN forum f ON n.nid = f.nid LEFT JOIN users u ON n.uid = u.uid WHERE n.type = 'forum' ORDER BY n.nid DESC", 0, variable_get("forum_block_num", "5")), t("New forum topics:"));

        if ($content) {
          $content .= "<div id=\"forum_more\" style=\"text-align: right;\">". l(t("more"), "forum", array("title" => t("Read the latest forum topics."))) ."</div>";
        }

        cache_set("forum:block", $content, time() + variable_get("cache_clear", 120));
      }
      else {
        $content = $cache->data;
      }

      $blocks["subject"] = t("Forum topics");
      $blocks["content"] = $content;
    }
  }

  return $blocks;
}

function forum_link($type, $node = 0, $main = 0) {
  global $user;

  $links = array();

  if ($type == "page" && user_access("access content")) {
    $links[] = l(t("forum"), "forum");
  }

  if (!$main && $type == "node" && $node->type == "forum") {
    // get previous and next topic

    $result = db_query("SELECT n.nid, n.title, n.body, GREATEST(n.created, MAX(c.timestamp)) AS date_sort, COUNT(c.nid) AS num_comments FROM node n LEFT JOIN forum f ON n.nid = f.nid LEFT JOIN comments c ON n.nid = c.nid WHERE n.nid = f.nid AND f.tid = %d AND n.status = 1 GROUP BY n.nid, n.title, n.body, n.created ORDER BY ". _forum_get_topic_order(isset($user->sortby) ? $user->sortby : variable_get("forum_order",1)), $node->tid);

    while ($topic = db_fetch_object($result)) {
      if ($stop == 1) {
        $next->nid = $topic->nid;
        $next->title = $topic->title;
        $next->body = $topic->body;
        break;
      }
      if ($topic->nid == $node->nid) {
        $stop = 1;
      }
      else {
        $prev->nid = $topic->nid;
        $prev->title = $topic->title;
        $prev->body = $topic->body;
      }
    }

    if ($prev) {
      $links[] = l(t("previous forum topic"), "node/view/$prev->nid", array("title" => $prev->title .": ". substr(strip_tags($prev->body), 0, 100)."..."));
    }

    if ($next) {
      $links[] = l(t("next forum topic"), "node/view/$next->nid", array("title" => $next->title .": ". substr(strip_tags($next->body), 0, 100)."..."));
    }
  }

  return $links;
}

function forum_view($node, $main = 0) {


  $term_data = array_shift(taxonomy_node_get_terms($node->nid));
  if (!$term_data) {
    // we are previewing
    $term_data = taxonomy_get_term($node->taxonomy[0]);
  }
  $voc = taxonomy_get_vocabulary($term_data->vid);

  if (!$main) {
    $node->title = _forum_get_icon($node) ." ". l($voc->name, "forum") ." : ". l($term_data->name, "forum/$term_data->tid") ." / <b>$node->title</b>";
  }

  $node->teaser = check_output($node->teaser);
  $node->body = check_output($node->body);

  theme("node", $node, $main);
}

function forum_validate(&$node) {
  // Make sure all fields are set properly:
  $node->icon = $node->icon ? $node->icon : "";
  $node->shadow = $node->shadow ? $node->shadow : 0;
  $node->tid = $node->tid ? $node->tid : 0;
  // We use the validate hook to remember the old taxonomy terms:
  if ($node->tid) {
    $node->taxonomy = array_keys(taxonomy_node_get_terms($node->nid));
    if (!in_array($node->tid[0], $node->taxonomy)) {
      $node->taxonomy[] = $node->tid[0];
    }
  }
}

function forum_form(&$node, &$help, &$error) {
  if ($node->tid) {
    // editing
    $tid = $node->tid;
  }
  else {
    // new topic
    $tid = arg(3);
  }

  // outputs the compose guidelines
  $help = variable_get("forum_help", "");

  $output .= _taxonomy_term_select(t("Forum"), "tid", $tid, variable_get("forum_nav_vocabulary", ""), "", 0, "", variable_get("forum_containers", array()));

  if ($node->nid) {
    // if editing, give option to leave shadows
    $output .= form_checkbox(t("Leave shadow copy"), "shadow", 1, $node->shadow, t("If you move this topic, you can leave a link in the old forum to the new forum."));
  }

  if ($icon_path = variable_get("forum_topic_icon_path", "")) {
    if ($node->icon) {
      // we are editing post
      if ($dir = @opendir($icon_path)) {
        $icon_num = 0;
        while($icon = readdir($dir)) {
          if ($icon == '.' || $icon == '..') {continue;}
          if ($node->icon == $icon) {$checked = "checked";} else {$checked = "";}
          $radio .= "<input type=\"radio\" name=\"edit[icon_num]\" value=\"$icon_num\" $checked /><img src=\"$icon_path$icon\" alt=\"\" title=\"\" /> \n";
          $icon_num++;
        }
        closedir($dir);
      }
    }
    else {
      if ($dir = @opendir($icon_path)) {
        $icon_num = 0;
        while($icon = readdir($dir)) {
          if ($icon == '.' || $icon == '..') {continue;}
          if ($node->icon_num == $icon_num) {$checked = "checked";} else {$checked = "";}
          $radio .= "<input type=\"radio\" name=\"edit[icon_num]\" value=\"$icon_num\" $checked /><img src=\"$icon_path$icon\" alt=\"\" title=\"\" /> \n";
          $icon_num++;
        }
        closedir($dir);
      }
    }
    $output .= form_item(t("Topic icon"), $radio);
  }
  $output .= form_textarea(t("Body"), "body", $node->body, 60, 10);

  return $output;
}

function forum_insert($node) {
  $node->icon = _forum_decode_icon($node);
  db_query("INSERT INTO forum (nid, icon, shadow, tid) VALUES (%d, '%s', %d, %d)", $node->nid, $node->icon, $node->shadow, $node->tid[0]);
}

function forum_update($node) {
  $node->icon = _forum_decode_icon($node);
  db_query("UPDATE forum SET icon = '%s', shadow = %d, tid = %d WHERE nid = %d", $node->icon, $node->shadow, $node->tid[0], $node->nid);
}

function _forum_decode_icon($node) {
  // to prevent malicious users
  if ($icon_path = variable_get("forum_topic_icon_path", "")) {
    if ($dir = @opendir($icon_path)) {
      $icon_num = 0;
      while($icon = readdir($dir)) {
        if ($icon == '.' || $icon == '..') {continue;}
        if ($icon_num == $node->icon_num) {$myicon = $icon;}
        $icon_num++;
      }
      closedir($dir);
    }
  }
  return $myicon;
}

function forum_delete(&$node) {
  db_query("DELETE FROM forum WHERE nid = %d", $node->nid);
}

function _forum_num_comments($nid) {
  $value = db_fetch_object(db_query("SELECT COUNT(cid) AS count FROM comments WHERE nid = %d AND status = 0", $nid));
  return ($value) ? $value->count : 0;
}

function _forum_last_comment($nid) {
  $value = db_fetch_object(db_query_range("SELECT timestamp FROM comments WHERE nid = %d AND status = 0 ORDER BY timestamp DESC", $nid, 0, 1));
  return ($value) ? format_date($value->timestamp, "small") : "&nbsp;";
}

function _forum_last_reply($nid) {
  $value = db_fetch_object(db_query_range("SELECT c.timestamp, u.name, u.uid FROM comments c LEFT JOIN users u ON c.uid = u.uid WHERE c.nid = %d AND c.status = 0 ORDER BY c.timestamp DESC", $nid, 0, 1));
  return $value;
}

function _forum_format($topic) {
  if ($topic) {
    return "<small>". t("%date<br />by %author", array("%date" => format_date($topic->timestamp, "small"), "%author" => format_name($topic))) ."</small>";
  }
  else {
    return message_na();
  }
}

function forum_get_forums($tid = 0) {
  global $user;

  if (!$tid) {
    $tid = 0;
  }

  $cache = cache_get("forum:$tid");

  if (empty($cache)) {
    $forums = array();
    $_forums = taxonomy_get_tree(variable_get("forum_nav_vocabulary", ""), $tid);
    $n = 0;
    foreach ($_forums as $forum) {
      if (in_array($forum->tid, variable_get("forum_containers", array()))) {
        $forum->container = 1;
      }
      else {
        $forum->num_topics = _forum_num_topics($forum->tid);
        $forum->num_posts = _forum_num_replies($forum->tid) + $forum->num_topics;
        $forum->last_post = _forum_last_post($forum->tid);
      }
      $forums[$forum->tid] = $forum;
      $n++;
    }

    cache_set("forum:$tid", serialize($forums), time() + variable_get("cache_clear", 120));
  }
  else {
    $forums = unserialize($cache->data);
  }

  if ($user->uid && $forums) {
    foreach (_forum_topics_read($user->uid) as $tid => $old) {
      if ($forums[$tid]) {
        $forums[$tid]->old_topics = $old;
      }
    }
  }
  return $forums;
}

function forum_get_parents($tid) {
  if ($tid) {
    $parents[] = taxonomy_get_term($tid);
  }
  $n = 0;
  while ($parent = taxonomy_get_parents($parents[$n]->tid)) {
    $parents = array_merge($parents, $parent);
    $n++;
  }

  return $parents;
}

function _forum_num_topics($term) {
  $value = db_fetch_object(db_query("SELECT COUNT(n.nid) AS count FROM node n LEFT JOIN forum f ON n.nid = f.nid WHERE f.tid = %d AND n.nid = f.nid AND n.status = 1 AND n.type = 'forum'", $term));
  return ($value) ? $value->count : 0;
}

function _forum_num_replies($term) {
  $value = db_fetch_object(db_query("SELECT COUNT(*) AS count FROM comments c LEFT JOIN node n ON n.nid = c.nid LEFT JOIN forum f ON n.nid = f.nid WHERE f.tid = %d AND n.nid = f.nid AND n.nid = c.nid AND n.status = 1 AND c.status = 0 AND n.type = 'forum'", $term));
  return ($value) ? $value->count : 0;
}

function _forum_topics_read($uid) {
  $result = db_query("SELECT tid, count(*) AS c FROM history h LEFT JOIN node n ON n.nid = h.nid LEFT JOIN forum f ON n.nid = f.nid WHERE f.nid = n.nid AND n.nid = h.nid AND n.type = 'forum' AND n.status = 1 AND h.uid = %d GROUP BY tid", $uid);

  while ($obj = db_fetch_object($result)) {
    $topics_read[$obj->tid] = $obj->c;
  }

  return $topics_read ? $topics_read : array();
}

function _forum_last_post($term) {
  $topic = db_fetch_object(db_query_range("SELECT n.nid, n.created AS timestamp, u.name AS name, u.uid AS uid FROM forum f LEFT JOIN node n ON n.nid = f.nid LEFT JOIN users u ON n.uid = u.uid WHERE f.tid = %d AND n.nid = f.nid AND n.type = 'forum' AND n.status = 1 ORDER BY timestamp DESC", $term, 0, 1));

  $reply = db_fetch_object(db_query_range("SELECT n.nid, c.timestamp, u.name AS name, u.uid AS uid FROM forum f LEFT JOIN node n ON n.nid = f.nid LEFT JOIN comments c ON n.nid = c.nid LEFT JOIN users u ON c.uid = u.uid WHERE f.tid = %d AND n.nid = f.nid AND n.type = 'forum' AND n.status = 1 AND c.status = 0 ORDER BY c.timestamp DESC", $term, 0, 1));

  $value = ($topic->timestamp > $reply->timestamp) ? $topic : $reply;

  return $value;
}

function forum_get_topics($tid, $sortby, $forum_per_page) {
  global $user;

  $term = taxonomy_get_term($tid);
  $voc = taxonomy_get_vocabulary($term->vid);

  $sql_sortby = _forum_get_topic_order($sortby);

  // show topics with the correct tid, or in the forum but with shadow = 1
  $sql = "SELECT n.nid, n.title, u.name AS name, u.uid AS uid, n.created AS timestamp, GREATEST(n.created, MAX(c.timestamp)) AS date_sort, COUNT(c.nid) AS num_comments, f.icon, n.comment AS comment_mode, f.tid FROM node n LEFT JOIN term_node r ON n.nid = r.nid LEFT JOIN users u ON n.uid = u.uid LEFT JOIN comments c ON n.nid = c.nid LEFT JOIN forum f ON n.nid = f.nid WHERE n.nid = r.nid AND ((r.tid = '".check_query($tid)."' AND f.shadow = 1) OR f.tid = '".check_query($tid)."') AND n.status = 1 AND n.type = 'forum' GROUP BY n.nid, n.title, u.name, u.uid, n.created, n.comment, f.tid, f.icon ORDER BY $sql_sortby";

  $sql_count = "SELECT COUNT(DISTINCT(n.nid)) FROM node n LEFT JOIN forum f ON n.nid = f.nid LEFT JOIN term_node r ON n.nid = r.nid WHERE n.nid = r.nid AND ( (r.tid = '".check_query($tid)."' AND f.shadow = 1) OR f.tid = '".check_query($tid)."') AND n.status = 1 AND n.type = 'forum'";

  $result = pager_query($sql, $forum_per_page, 0, $sql_count);
  $topic_num = db_num_rows($result);

  $n = 0;
  while ($topic = db_fetch_object($result)) {
    if ($user->uid) {
      $history = _forum_user_last_visit($topic->nid);
      // folder is new if topic is new or there are new comments since last visit
      if ($topic->shadow > 0) {
        $topic->new = 0;
      }
      else {
        if (!$history && $user->uid) {
          $topic->new_replies = 0;
          $topic->new = 1;
        }
        else {
          $comments = db_result(db_query("SELECT COUNT(c.nid) FROM node n LEFT JOIN comments c ON n.nid = c.nid WHERE n.nid = '$topic->nid' AND n.status = 1 AND c.status = 0 AND timestamp > '$history' GROUP BY n.nid"));

          $topic->new_replies = $comments ? $comments : 0;
          if ($topic->new_replies) {
            $topic->new = 1;
          }
          else {
            $topic->new = 0;
          }
        }
      }
     }
     else {
      // you're not logged in eh?
      $topic->new_replies = 0;
      $topic->new = 0;
     }

    $topic->last_reply = _forum_last_reply($topic->nid);
    $topics[] = $topic;
  }

  return $topics;
}

function _forum_new($tid) {
  global $user;
  $result = db_query("SELECT n.nid FROM node n, history h, forum f WHERE n.type = 'forum' AND n.status = 1 AND h.nid = n.nid AND f.nid = h.nid AND f.tid = %d AND h.uid = %d", $tid, $user->uid);
  while ($r = db_fetch_object($result)) {
    $read[] = $r->nid;
  }

  $nid = db_result(db_query_range("SELECT n.nid FROM node n LEFT JOIN forum f ON n.nid = f.nid WHERE n.type = 'forum' AND f.nid = n.nid AND n.status = 1 AND f.tid = %d ".($read ? "AND NOT (n.nid IN (".implode(",", $read).")) " : "") ."ORDER BY created", $tid, 0, 1));

  return $nid ? $nid : 0;
}

function _forum_message_taxonomy() {
  return t("For the forums to work, the taxonomy module has to be installed and enabled.  When activated, a taxonomy vocubulary needs to be created, bound to the forum module.  The vocabulary's terms define the forums.");
}

function forum_page() {
  global $sortby, $forum_per_page, $from, $user;

  $op = $_POST["op"];

  if (user_access("access content")) {
    if (module_exist("taxonomy")) {
      $tid = arg(1);
      if ($op == t("Update settings") && $user->uid) {
        $user = user_save($user, array("sortby" => $sortby, "forum_per_page" => $forum_per_page));
      }

      if (arg(2) == "new") {
        if ($nid = _forum_new($tid)) {
          drupal_goto(url("node/view/$nid"));
        }
      }

      if (empty($sortby)) {
        $sortby = isset($user->sortby) ? $user->sortby : variable_get("forum_order",1);
      }

      if (empty($forum_per_page)) {
        $forum_per_page = isset($user->forum_per_page) ? $user->forum_per_page : variable_get("forum_per_page", 25);
      }

      $offset = ($from / $forum_per_page) + 1;

      $forums = forum_get_forums($tid);

      $parents = forum_get_parents($tid);
      if ($tid && !in_array($tid, variable_get("forum_containers", array()))) {
        $topics = forum_get_topics($tid, $sortby, $forum_per_page);
      }

      theme("forum_theme_display", $forums, $topics, $parents, $tid, $sortby, $forum_per_page, $offset);
    }
    else {
      theme("header");
      theme("box", t("Warning"), _forum_message_taxonomy());
      theme("footer");
    }
  }
  else {
    theme("header");
    theme("box", t("Access denied"), message_access());
    theme("footer");
  }
}

/*
** Theme functions
*/

function forum_theme_display($forums, $topics, $parents, $tid, $sortby, $forum_per_page, $offset) {
  // forum list, topics list, topic browser and "add new topic" link


  $output .= theme("forum_theme_list", $forums, $parents, $tid);
  if ($tid && !in_array($tid, variable_get("forum_containers", array()))) {
    $output .= theme("forum_theme_topic_list", $tid, $topics, $sortby, $forum_per_page, $offset);
  }

  theme("header");
  theme("box", t("Discussion forum"), $output);
  if ($tid && !in_array($tid, variable_get("forum_containers", array()))) {
    theme("box", t("Control panel"), theme("forum_theme_topic_browser", $sortby, $forum_per_page, $offset));
  }
  theme("footer");
}

function forum_theme_list($forums, $parents, $tid) {
  global $user;
  if ($parents) {
    foreach($parents as $p) {
      if ($tid != $p->tid) {
        $t[] = l($p->name, "forum/$p->tid");
      }
      else {
        $t[] = $p->name;
      }
    }
  }
  $t[] = l(t("Discussion forum"), "forum");

  $output .= "<table border=\"0\" cellpadding=\"5\">\n";
  $output .= " <tr><th colspan=\"3\" style=\"text-align: left;\">".implode(" : ", array_reverse($t)) ."</th>";
  if ($forums) {
    $output .= "<th>". t("topics") ."</th><th>". t("posts") ."</th><th>". t("last post") ."</th></tr>";


    foreach ($forums as $forum) {
      if ($forum->container) {
        $output .= " <tr><td colspan=\"5\">". l($forum->name, "forum/$forum->tid") ."<br /><small>". ($forum->description ? check_output($forum->description) : "") ."</small></td></tr>";
      }
      else {
        if ($user->uid) $new_topics = $forum->num_topics - $forum->old_topics;
        $icon = _forum_get_folder_icon($new_topics);
        $output .= " <tr><td>&nbsp;</td><td>$icon</td>";
        $output .= "<td><table border=\"0\"><tr><td style=\"width: ". ($forum->depth * 20) ."px;\">&nbsp;</td><td>". l($forum->name, "forum/$forum->tid") ."<div style=\"padding-top: 5px;\">". check_output($forum->description);

        $links = array();
        if ($forum->last_post) {
          $links[] = l(t("the most recent topic"), "node/view/". $forum->last_post->nid);
        }
        if ($new_topics) {
          $links[] = l(t("the first new topic"), "forum/$forum->tid/new");
        }

        if ($links) {
          $output .= "<br />". t("Jump to: %links", array("%links" => implode(", ", $links)));
        }

        $output .= "</div></td></tr></table></td>";
        $output .= "<td style=\"text-align: center;\">".$forum->num_topics.($new_topics ? "<br />(".t("%a new", array("%a" => $new_topics)).")" : "")."</td><td style=\"text-align: center;\">".$forum->num_posts."</td><td style=\"text-align: center;\">"._forum_format($forum->last_post)."</td></tr>";
      }
    }
  }
  $output .= "</table>\n";

  return $output;
}

function forum_theme_topic_browser() {
  global $tid, $sortby, $forum_per_page, $offset;

  if (empty($sortby)) {
    $sortby = variable_get("forum_order",1);
  }
  if (empty($forum_per_page)) {
    $forum_per_page = variable_get("forum_per_page", 25);
  }

  $forum_per_page_options = array(10, 25, 50, 75, 100);
  foreach ($forum_per_page_options as $value) {
    $options .= " <option value=\"$value\"". ($forum_per_page == $value ? " selected=\"selected\"" : "") .">".t("%a topics per page", array("%a" => $value))."</option>\n";
  }

  $output .= "<select name=\"forum_per_page\">$options</select>\n";

  $options = "";
  $sortby_options = array(1 => t("Date - newest first"), 2 => t("Date - oldest first"), 3 => t("Posts - most active first"), 4=> t("Posts - least active first"));
  foreach ($sortby_options as $key => $value) {
    $options .= " <option value=\"$key\"". ($sortby == $key ? " selected=\"selected\"" : "") .">$value</option>\n";
  }

  $output .= "\n<select name=\"sortby\">$options</select>\n";
  $output .= form_hidden("tid", $tid);
  $output .= form_submit(t("Update settings"));
  return form(form_item(t("Topic viewing options"), $output, t("Select your preferred way to display the topics and click 'Update settings'.")));
}

function forum_theme_topic_list($tid, $topics, $sortby, $forum_per_page, $offset) {
  global $id, $status, $user, $pager_total;

  if ($topics) {
    $output .= "<table border=\"0\" cellpadding=\"5\" cellspacing=\"5\">\n";
    $output .= " <tr><th>&nbsp;</th><th>&nbsp;</th><th>". t("topic") ."</th><th>". t("replies") ."</th><th>". t("posted") ."</th><th>". t("last reply") ."</th></tr>";

    foreach ($topics as $topic) {
      // folder is new if topic is new or there are new comments since last visit
      if ($topic->tid != $tid) {
        $output .= "
          <tr>
            <td>"._forum_get_folder_icon($topic->new, $topic->num_comments, $topic->comment_mode)."</td>
            <td>"._forum_get_icon($topic)."</td>
            <td style=\"vertical-align: top;\">$topic->title</td>
            <td style=\"text-align: center; vertical-align: top;\" colspan=\"3\">". l(t("This topic has been moved"), "forum/$topic->tid")."</td>
          </tr>";
      }
      else {
        $output .= "
          <tr>
            <td>"._forum_get_folder_icon($topic->new, $topic->num_comments, $topic->comment_mode)."</td>
            <td>"._forum_get_icon($topic)."</td>
            <td style=\"vertical-align: top;\">". l($topic->title, "node/view/$topic->nid") ."</td>
            <td style=\"text-align: center; vertical-align: top;\">".$topic->num_comments.($topic->new_replies ? " (".t("%a new", array("%a" => $topic->new_replies)).")" : "")."</td>
            <td style=\"text-align: center;\">"._forum_format($topic)."</td>
            <td style=\"text-align: center;\">"._forum_format($topic->last_reply)."</td>
          </tr>";
      }
    }

    $output .= "</table></blockquote>\n";
  }
  $output .= "<hr />";

  $output .= "<div style=\"text-align: center;\">" .t("%a topics, %b topics per page, page %c of %d", array("%a" => $pager_total[0], "%b" => $forum_per_page, "%c" => $offset, "%d" => ceil($pager_total[0]/$forum_per_page))) ."</div>";

  $output .= (($pager = pager_display(NULL, $forum_per_page, 0, "default")) ? "$pager" : "");

  if (user_access("create forum topics")) {
    $output .= "<div style=\"text-align: center; font-style: bold;\">". l(t("create new forum topic"), "node/add/forum/$tid") ."</div>";
  }

  return $output;
}


function _forum_get_icon($node) {
  if (variable_get("forum_topic_icon_path", "") && $node->icon) {
    return "<img src=\"". variable_get("forum_topic_icon_path", "") ."$node->icon\" />";
  }
  else {
    return "&nbsp;";
  }
}

function _forum_get_folder_icon($new_posts, $num_posts = 0, $comment_mode = 0) {
  // "folder" icon because it's generally rendered as a folder


  $base_path = variable_get("forum_folder_icon_path", "");
  if ($base_path) {
    if ($num_posts > variable_get("forum_hot_topic", 15)) {
      $icon = $new_posts ? "hot_new" : "hot";
    }
    else {
      $icon = $new_posts ? "new" : "default";
    }

    if ($comment_mode == 1) {
      $icon = "closed";
    }

    // default
    $file = $base_path."/".$icon.".gif";

    return "<img src=\"$file\" alt=\"\" title=\"\" />";
  }
  else {
    return "&nbsp;";
  }
}

function _forum_user_last_visit($nid) {
  global $user;
  static $history;
  if (!$history) {
    $result = db_query("SELECT nid, timestamp FROM history WHERE uid = %d", $user->uid);
    while ($t = db_fetch_object($result)) {
      $history[$t->nid] = $t->timestamp;
    }
  }
  return $history[$nid] ? $history[$nid] : 0;
}

function _forum_get_topic_order($sortby) {
  switch ($sortby) {
    case 1:
      return "date_sort DESC";
      break;
    case 2:
      return "date_sort ASC";
      break;
    case 3:
      return "num_comments DESC";
      break;
    case 4:
      return "num_comments ASC";
      break;
  }
}

function forum_help() {
  $output .= "<h3>Creating a forum</h3><p>The forum module uses taxonomy to organize itself. To create a forum you first have to create a ". l("taxonomy vocuabulary", "admin/taxonomy/add/vocabulary") ." When doing this, choose a sensible name for it (such as \"fora\") and make sure under \"Types\" that \"forum\" is selected. Once you have done this, ". l("add some terms", "admin/taxonomy") ." to it. Each term will become a forum. If you fill in the description field, users will be given additonal information about the forum on the main forum page. For example: \"troubleshooting\" - \"Please ask your questions here.\"</p>";
  $output .= "<p>When you are happy with your vocabulary, go to ". l("site configuration &raquo; modules &raquo; forum","admin/system/modules/forum") ." and set <b>Forum vocabulary</b> to the one you have just created. There will now be fora active on the site. For users to access them they must have the \"access content\" permission and to create a topic they must have ithe \"create forum topics\" permission. These permissions can be set in the ". l("user management", "admin/user/permission") ." pages.</p>";
  $output .= "<h3>Containers</h3><p>If you designate a forum as a <i>container</i>, users will not be able to post to it. The forum will be visible on the forum listing page, so it acts as a section delimiter if you will. This is useful if you have a lots of forums which are nested. For example,</p>";
  $output .= "<p>Marketing<br />-- Market research<br />-- Brand management<br /><br />Sales<br />-- Closing the deal<br />-- Avoiding ear and throat pain</p>";
  $output .= "<p>If you don't want people posting into the Marketing or Sales folders, you designate them as Containers.</p>";
  $output .= "<h4>Icons</h4><p>To disable icons, set the icon path as blank in ". l("site configuration &raquo; modules &raquo; forums","admin/system/module/forum") ."</p>";
  $output .= "<p>All files in the icon directory are assumed to be images. You may use images of whatever size you wish, but it is customary to use 15x15 or 16x16.</p>";
  return t($output);

}

?>
