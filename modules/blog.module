<?php
// $Id$

function blog_conf_options() {
 $output .= form_textarea("Explanation or submission guidelines", "blog_help", variable_get("blog_help", ""), 55, 4, "This text will be displayed at the top of the blog submission form.  Useful for helping or instructing your users.");
 $output .= form_select(t("Minimum number of words in a node"), "minimum_blog_size", variable_get("minimum_blog_size", 0), array(0 => "0 words", 10 => "10 words", 25 => "25 words",  50 => "50 words", 75 => "75 words", 100 => "100 words", 125 => "125 words",  150 => "150 words", 175 => "175 words", 200 => "200 words"), t("The minimum number of words a personal blog entry should consist of.  This can be useful to rule out submissions that do not meet the site's standards, such as short test posts."));

 return $output;

}

function blog_node($field) {
  global $user;

  $info["name"] = t("personal blog entry");
  $info["description"] = t("A blog is your personal diary or journal.  It is made up of individual entries that are time stamped and are typically arranged by the day, as normal a diary. Blogs often contain links to things you've seen, or on which you agree/disagree.  Since a Blog is personal, you and only you have full control on what you publish.  The most interesting blogs, or those blogs that fit the site's topic might get promoted to the front page.");

  return $info[$field];
}

function blog_access($op, $node) {
  global $user;

  if ($op == "view") {
    return $node->status;
  }

  if ($op == "create") {
    return $user->uid;
  }

  if ($op == "update") {
    return ($user->uid == $node->uid);
  }

  if ($op == "delete") {
    return ($user->uid == $node->uid);
  }

}

function blog_save($op, $node) {
  if ($op == "approve") {
    return array("promote" => 1);
  }

  if ($op == "create") {
    if (user_access("administer nodes")) {
      return array("body" => filter($node->body), "teaser" => filter($node->teaser));
    }
    else {
      return array("body" => filter($node->body), "promote" => 0, "moderate" => 1, "status" => 1, "teaser" => filter($node->teaser));
    }
  }

  if ($op == "decline") {
    return array("promote" => 0);
  }

  if ($op == "update") {
    if (user_access("administer nodes")) {
      /*
      ** When an administrator updates blog entries through the admin
      ** pages, they will not be changed unless explicitly specified.
      */

      return array("body" => filter($node->body), "teaser" => filter($node->teaser));
    }
    else {
      /*
      ** Updating your own blog entry will demote it (if promoted),
      ** and will queue it in the moderation queue for promotion.
      */

      return array("body" => filter($node->body), "promote" => 0, "moderate" => 1, "score" => 0, "teaser" => filter($node->teaser), "votes" => 0, "users" => 0);
    }
  }

}

function blog_help() {
 ?>
  <p>Drupal's blog module allows registered users to maintain an online blog or diary.  It provides easy-to-write and easy-to-read online diaries or journals that can be filled with daily thoughts, poetry, boneless blabber, spiritual theories, intimate details, valuable experiences, cynical rants, semi-coherent comments, writing experiments, artistic babblings, critics on current facts, fresh insights, diverse dreams, chronicles and mumbling madness available for public consumption.</p>
 <?php
}

function blog_feed_user($uid = 0, $date = 0) {
  global $user;

  if ($uid) {
    $account = user_load(array("uid" => $uid, "status" => 1));
  }
  else {
    $account = $user;
  }

  if (!$date) {
    $date = time();
  }

  $result = db_query("SELECT n.nid, n.title, n.teaser, n.created, u.name, u.uid FROM node n LEFT JOIN users u ON n.uid = u.uid WHERE n.type = 'blog' AND u.uid = '$uid' AND n.created > '". ($date - 2592000) ."' ORDER BY n.nid DESC LIMIT 15");
  while ($blog = db_fetch_object($result)) {
    $items .= format_rss_item($blog->title, path_uri() . drupal_url(array("id" => $blog->nid)), $blog->teaser);
  }

  $output .= "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>\n";
  // $output .= "<!DOCTYPE rss [<!ENTITY % HTMLlat1 PUBLIC \"-//W3C//ENTITIES Latin 1 for XHTML//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml-lat1.ent\">\n";
  $output .= "<rss version=\"0.91\">\n";
  $output .= format_rss_channel("$account->name's blog", path_uri() . drupal_url(array("mod" => "blog", "op" => "view", "id" => $account->uid), "module"), "$account->name's blog", $items);
  $output .= "</rss>\n";

  header("Content-Type: text/xml");

  print $output;

}

function blog_feed_last() {
  $result = db_query("SELECT n.nid, n.title, n.teaser, n.created, u.name, u.uid FROM node n LEFT JOIN users u ON n.uid = u.uid WHERE n.type = 'blog' ORDER BY n.nid DESC LIMIT 15");

  while ($blog = db_fetch_object($result)) {
    $items .= format_rss_item($blog->title, path_uri() . drupal_url(array("id" => $blog->nid)), $blog->teaser);
  }

  $output .= "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>\n";
  $output .= "<rss version=\"0.91\">\n";
  $output .= format_rss_channel(variable_get("site_name", "drupal") .": user blogs", path_uri() . drupal_url(array("mod" => "blog"), "module"), "Recently updated blogs.", $items);
  $output .= "</rss>\n";

  header("Content-Type: text/xml");

  print $output;

}

function blog_page_user($uid = 0, $date = 0, $all = 0) {
  global $theme, $user;

  if ($uid) {
    $account = user_load(array("uid" => $uid, "status" => 1));
  }
  else {
    $account = $user;
  }

  if (!$date) {
    $date = time();
  }

  $result = db_query("SELECT nid FROM node WHERE type = 'blog' AND uid = '$account->uid' AND created <= '$date' ORDER BY nid DESC". ($all ? "" : " LIMIT 20"));

  $output .= "<table border=\"0\" cellpadding=\"4\" cellspacing=\"4\">";

  while ($node = db_fetch_object($result)) {

    $blog = node_load(array("nid" => $node->nid));

    if ($date != date("dny", $blog->created)) {
      $date = date("dny", $blog->created);
      $output .= "<tr><td colspan=\"2\"><b>".lm(format_date($blog->created, custom, "d M Y"), array("mod" => "blog", "id" => $blog->uid, "date" => mktime(23, 59, 59, date("n", $blog->created), date("d", $blog->created), date("Y", $blog->created))), t("Permanent link to this blog entry."))."</b></td></tr>";
    }

    $links = link_node($blog, 1);

    $output .= "<tr><td><div style=\"margin-left: 20px;\"><b>". check_output($blog->title) ."</b></div></td><td align=\"right\">". $theme->links($links) ."</td></tr>";
    $output .= "<tr><td colspan=\"2\"><div style=\"margin-left: 40px;\">". check_output($blog->teaser, 1) ."</div><br /></td></tr>";

  }

  $output .= "</table>";
  $output .= lm("<img src=\"". $theme->image("xml.gif") ."\" width=\"36\" height=\"14\" align=\"right\" border=\"0\" />", array("mod" => "blog", "op" => "feed", "id" => $account->uid), t("Read the XML version of this page."))."\n";
  if (!$all) {
    $output .= lm(t("show all blogs"), array("mod" => "blog", "op" => "view", "id" => $account->uid, "all" => 1), t("Show all blogs by this user"));
  }
  else {
    $output .= lm(t("show recent blogs"), array("mod" => "blog", "op" => "view", "id" => $account->uid), t("Show recent blogs by this user"));
  }

  $theme->box(t("%u's blog", array("%u" => $account->name)), $output);
}

function blog_page_last() {
  global $theme, $user;

  $result = db_query("SELECT nid FROM node WHERE type = 'blog' ORDER BY nid DESC LIMIT 20");

  $output .= "<table border=\"0\" cellpadding=\"4\" cellspacing=\"4\">";

  while ($node = db_fetch_object($result)) {
    $blog = node_load(array("nid" => $node->nid));

    $links = link_node($blog, 1);

    $output .= "<tr><td><b>". check_output($blog->title) ."</b></td><td align=\"right\">". $theme->links($links) ."</td></tr>";
    $output .= "<tr><td colspan=\"2\"><div style=\"margin-left: 20px;\">". check_output($blog->teaser, 1) ."</div><br /></td></tr>";

  }

  $output .= "</table>";
  $output .= lm("<img src=\"". $theme->image("xml.gif") ."\" width=\"36\" height=\"14\" align=\"right\" border=\"0\" />", array("mod" => "blog", "op" => "feed"), t("Read the XML version of this page."))."\n";

  $theme->box(t("User blogs"), $output, "main");
}

function blog_form(&$node, &$help, &$error) {
  global $nid, $iid;

  if (isset($node->body)) {

    /*
    ** Validate the size of the blog:
    */

    if (count(explode(" ", $node->body)) < variable_get("minimum_blog_size", 0)) {
      $error["body"] = "<div style=\"color: red;\">". t("The body of your blog is too short.") ."</div>";
    }
  }
  else {

    /*
    ** Carry out some explanation or submission guidelines:
    */

    $help = variable_get("blog_help", "");

    /*
    ** If the user clicked a "blog it" link, we load the data from the
    ** database and quote it in the blog:
    */

    if ($nid && $blog = node_load(array("nid" => $nid))) {
      $node->body = "<i>". $blog->body ."</i> [".lm($blog->name, array("mod" => "blog", "id" => $blog->uid, "date" => $blog->created))."]";
    }

    if ($iid && $item = db_fetch_object(db_query("SELECT i.*, f.title as ftitle, f.link as flink FROM item i, feed f WHERE i.iid = '%s' AND i.fid = f.fid", $iid))) {
      $node->body = "<a href=\"$item->link\">$item->title</a> - <i>". check_output($item->description) ."</i> [<a href=\"$item->flink\">$item->ftitle</a>]\n";
    }
  }

  if ($node->teaser) {
    $output .= form_textarea(t("Teaser"), "teaser", $node->teaser, 60, 5, $error["teaser"]);
  }

  $output .= implode("<p>", taxonomy_node_form("blog", $node));

  $output .= form_textarea(t("Body"), "body", $node->body, 60, 15, $error["body"] ? $error["body"] : t("Allowed HTML tags") .": ". htmlspecialchars(variable_get("allowed_html", "")));

  return $output;
}


function blog_page() {
  global $theme, $id, $op, $date, $all, $name;

  if (user_access("access content")) {
    switch ($op) {
      case "feed":
        if ($id) {
          blog_feed_user($id, $date);
        }
        else {
          blog_feed_last();
        }
        break;
      default:
        $theme->header();
        if ($name) {
          $user = user_load(array("name" => $name));
          $id = $user->uid;
        }
        if ($id) {
          blog_page_user($id, $date, $all);
        }
        else {
          blog_page_last();
        }
        $theme->footer();
    }
  }
  else {
    $theme->header();
    $theme->box(t("Access denied"), message_access());
    $theme->footer();
  }

}

function blog_link($type, $node = 0, $main) {
  global $user;

  if ($type == "page" && user_access("access content")) {
    $links[] = lm(t("user blogs"), array("mod" => "blog"), t("Read the latest blog entries."));
  }

  if ($type == "menu.create" && user_access("post content")) {
    $links[] = lm(t("create blog entry"), array("mod" => "node", "op" => "add", "type" => "blog"), t("Add a new personal blog entry."));
  }

  if ($type == "menu.view" && user_access("access content")) {
    $links[] = lm(t("view personal blog"), array("mod" => "blog", "op" => "view", "id" => $user->uid), t("Read your latest blog entries."));
  }

  if ($type == "node" && $node->type == "blog") {
    global $op;
    if (blog_access("update", $node)) {
      $links[] = lm(t("edit this blog"), array("mod" => "node", "op" => "edit", "id" => $node->nid), t("Edit this blog entry."));
    }
    else {
      $links[] = lm(t("%u's blog", array("%u" => $node->name)), array("mod" => "blog", "op" => "view", "id" => $node->uid), t("Read %u's latest blog entries.", array("%u" => $node->name)));
    }
  }

  return $links ? $links : array();
}

function blog_block() {
  global $user;

  $result = db_query("SELECT u.uid, u.name, n.created, n.title, n.nid FROM node n LEFT JOIN users u ON n.uid = u.uid WHERE n.type = 'blog' ORDER BY n.nid DESC LIMIT 10");

  while ($node = db_fetch_object($result)) {
    $output .= l(check_output($node->title), array("id" => $node->nid))."<br />\n";
  }

  $output .= "<br /><div align=\"right\">".lm(t("more"), array("mod" => "blog"), t("Read the latest blog entries."))."</div>";

  $block[0]["subject"] = t("User blogs");
  $block[0]["content"] = $output;
  $block[0]["info"] = t("User blogs");
  $block[0]["link"] = drupal_url(array("mod" => "blog"), "module");

  return $block;
}

?>
