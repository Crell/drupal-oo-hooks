<?php
  function taxonomy_perm() {
    return array("administer taxonomy");
  }

  function taxonomy_link($type) {
    if ($type == "admin" && user_access("administer taxonomy")) {
      $links[] = "<a href=\"admin.php?mod=taxonomy\">taxonomy</a>";
    }

    return $links ? $links : array();
  }

  function taxonomy_help() {
    ?>
<b>Background</b><br /><br />

Classifying nodes allows for the organization of content into categories and subcategories of description. These categories can be used to organize and retrieve similarly described content. Drupal's classifier module is an extremely flexible classification system that allows for multiple lists of categories for classification (controlled vocabularies) and offers the possibility of creating thesauri (controlled vocabularies that indicate the relationship of terms) and taxonomies (controlled vocabularies where relationships are indicated hierarchically). <br /><br />

<b>Vocabularies</b><br />When you create a controlled vocabulary you are creating a set of terms to use for describing content (known as descriptors in indexing lingo). Drupal allows you to describe each node of content (blog, story, etc.) that you submit to Drupal using one or many of these terms. For simple implementations, you might create a set of categories without subcategories, similar to Slash's "Sections". For more complex implementations, you might create a hierarchical list of categories for describing content.<br /><br />

<b>Setting up a vocabulary</b><br />When you set up a controlled vocabulary, you will be asked to enter some descriptive data and define the attributes of this vocabulary. For example, if you select the "Hierarchy" option, you will be defining a taxonomy or thesaurus. If you select "Relationships" you are allowing the definition of related terms as in a thesaurus. Selecting "Multiple Select" will allow you to describe a node using more than one term.<br /><br />

<i>Vocabulary name</i><br />Required. The name for this vocabulary. Example: 'Topic'.<br /><br />

<i>Description</i><br />Optional. Description of the vocabulary, can be used by modules.<br /><br />

<i>Types</i><br />Required. A comma-seperated list of node types you want to associate this vocabulary with. Available types: blog, book, forum, page, story.<br /><br />

<i>Relationships</i><br />Allows relationships between terms within this vocabulary. This is synonymous with "See also" type references.<br /><br />

<i>Hierarchy</i><br />Allows a tree-like hierarchy <br /><br />

<i>Multiple Select</i><br />Allows nodes to be described using more than one term.<br /><br />

<b>Adding terms to a vocabulary</b><br />The options you see when adding a term to a vocabulary will depend on what you selected for "Relationships", "Hierarchy" and "Multiple Select" when you created the vocabulary.<br /><br />

Term name<br />Required. The name for this term. Example: 'Linux'.<br /><br />

Description<br />Optional. Description of the term, can be used by modules. This is synonymous with a "Scope note".<br /><br />

Relationships<br />Optional. Select one or many related terms.<br /><br />

Parent<br />Select the term under which this term is a subset -- the branch of the hierarchy this term belongs under. This is also known as the "Broader term" indicator used in thesauri.<br /><br />

Synonyms<br />Enter synonyms for this term, one synonym per line. Synonyms can be used for variant spellings, acronyms, and other terms that have the same meaning as the added term, but which are not explicitly listed in this thesaurus (unauthorized terms).
    <?php
  }

/*
** admin pages (form, save, overview)
*/

  function taxonomy_form_vocabulary($edit = array()) {
    foreach (module_list() as $name) {
      if (module_hook($name, "node")) {
        $nodetypes[$name] = $name;
      }
    }

    $form .= form_textfield("Vocabulary name", "name", $edit[name], 50, 64, "Required.  The name for this vocabulary.  Example: 'Topic'.");
    $form .= form_textarea("Description", "description", $edit[description], 60, 5, "Optional.  Description of the vocabulary, can be used by modules.");
    $form .= form_select("Types", "types", explode(",", $edit[types]), $nodetypes, "Required.  A list of node types you want to associate this vocabulary with.", "", 1);
    $form .= form_checkbox("Related terms", "relations", 1, $edit[relations], "Optional. Allows <a href=\"admin.php?mod=taxonomy&op=help#relatedterms\">related terms</a> in this vocabulary.");
    $form .= form_select("Hierarchy", "hierarchy", $edit[hierarchy], array("Disabled", "Single", "Multiple"), "Optional. Allows <a href=\"admin.php?mod=taxonomy&op=help#hierarchy\">a tree-like hierarchy</a> between terms of this vocabulary.", "", 0);
    $form .= form_checkbox("Multiple select", "multiple", 1, $edit[multiple], "Optional. Allows nodes to have more than one term in this vocabulary.");
    $form .= form_checkbox("Required", "required", 1, $edit[required], "If enabled every node MUST have at least one meta in this collection");
    $form .= form_textfield("Weight", "weight", $edit["weight"], 3, 3, "Optional. In listings, the heavier vocabularies will sink and the lighter vocabularies will be positioned nearer the top.");
    $form .= form_submit("Submit");

    if ($edit[vid]) {
      $form .= form_submit("Delete");
      $form .= form_hidden("vid", $edit[vid]);
    }

    return form($form);
  }

  function taxonomy_save_vocabulary($edit) {
    $data = array(
      "name" => $edit["name"],
      "types" => implode(",", $edit["types"]),
      "description" => $edit["description"],
      "multiple" => $edit["multiple"],
      "required" => $edit["required"],
      "hierarchy" => $edit["hierarchy"],
      "relations" => $edit["relations"],
      "weight" => $edit["weight"]
    );
    if ($edit["vid"] && $edit["name"]) {
      db_query("UPDATE vocabulary SET "._prepare_update($data)." WHERE vid = '". check_input($edit["vid"])."'");
    }
    else if ($edit["vid"]) {
      taxonomy_del_vocabulary($edit["vid"]);
    }
    else {
      db_query("INSERT INTO vocabulary "._prepare_insert($data, 1)." VALUES "._prepare_insert($data, 2));
    }
  }

  function taxonomy_del_vocabulary($vid) {
    db_query("DELETE FROM vocabulary WHERE vid = '". check_input($vid) ."'");
    $result = db_query("SELECT tid FROM term_data WHERE vid = '". check_input($vid) ."'");
    while ($term = db_fetch_object($result)) {
      taxonomy_del_term($term->tid);
    }
  }

  function taxonomy_form_term($edit = array()) {
    global $vocabulary_id;
    if (!$vocabulary_id) {
      $vocabulary_id = $edit["vid"];
    }
    $vocabulary = taxonomy_get_vocabulary($vocabulary_id);
    #print_r($vocabulary);
    $form .= form_textfield("Term name", "name", $edit["name"], 50, 64, "Required.  The name for this term.  Example: 'Linux'.");
    $form .= form_textarea("Description", "description", $edit["description"], 60, 5, "Optional.  Description of the term, can be used by modules.");

    if ($vocabulary->relations) {
      $form .= _taxonomy_term_select("Related terms", "relations", @array_keys(taxonomy_get_related($edit["tid"])), $vocabulary_id, "Optional.", 1, "<none>", array($edit["tid"]));
    }


    if ($vocabulary->hierarchy) {
      $parent = array_keys(taxonomy_get_parents($edit["tid"]));
      taxonomy_get_tree($vocabulary_id, $children, $edit["tid"]);
      // you can be son of yourself or your children
      $exclude = array_keys($children);
      $exclude[] = $edit["tid"];
      if ($vocabulary->hierarchy == 1) {
        $form .= _taxonomy_term_select("Parent", "parent", $parent, $vocabulary_id, "Required. Parent term.", 0, "<root>", $exclude);
      } elseif ($vocabulary->hierarchy == 2) {
        $form .= _taxonomy_term_select("Parents", "parent", $parent, $vocabulary_id, "Required. Parent terms.", 1, "<root>", $exclude);
      }
    }

    $form .= form_textarea("Synonyms", "synonyms", @implode("\n", taxonomy_get_synonyms($edit["tid"])), 30, 5, "Optional. Synonyms of this term, one synonym per line.");
    $form .= form_textfield("Weight", "weight", $edit["weight"], 3, 3, "Optional. In listings, the heavier terms will sink and the lighter terms will be positioned nearer the top.");
    $form .= form_hidden("vid", $vocabulary->vid);
    $form .= form_submit("Submit");

    if ($edit["tid"]) {
      $form .= form_submit("Delete");
      $form .= form_hidden("tid", $edit["tid"]);
    }

    return form($form);
  }

  function taxonomy_save_term($edit) {
   if ($edit["tid"] && $edit["name"]) {
      $data = array(
        "name" => $edit["name"],
        "description" => $edit["description"],
        "weight" => $edit["weight"]
      );

      db_query("UPDATE term_data SET "._prepare_update($data)." WHERE tid = '". check_input($edit["tid"]) ."'");
    }
    else if ($edit["tid"]) {
      taxonomy_del_term($edit["tid"]);
    }
    else {
      $edit["tid"] = db_result(db_query("SELECT MAX(tid) + 1 FROM term_data"));
      if (!$edit["tid"]) {
        // first term
        $edit["tid"] = 1;
      }
      $data = array(
        "tid" => $edit["tid"],
        "name" => $edit["name"],
        "description" => $edit["description"],
        "vid" => $edit["vid"],
        "weight" => $edit["weight"]
      );
      db_query("INSERT INTO term_data "._prepare_insert($data, 1)." VALUES "._prepare_insert($data, 2));
    }

    // relations (seem very powerful, but I have to understand it completely)
    db_query("DELETE FROM term_relation WHERE tid1 = '". check_input($edit["tid"]) ."' OR tid2 = '". check_input($edit["tid"]) ."'");
    if ($edit["relations"]) {
      foreach ($edit["relations"] as $related_id) {
        if ($related_id != 0) {
          $rel_q[] = "('". check_input($edit["tid"]) ."', '". check_input($related_id) ."')";
        }
      }
      if ($rel_q) {
        $related_query = implode(", ", $rel_q);
        db_query("INSERT INTO term_relation (tid1, tid2) VALUES $related_query");
      }
    }

    // hierarchy
    db_query("DELETE FROM term_hierarchy WHERE tid = '". check_input($edit["tid"]) ."'");
    if (!isset($edit["parent"])) {
      $edit["parent"] = 0;
    }
    if (is_array($edit["parent"])) {
      foreach ($edit["parent"] as $parent) {
        $sql[] = "('". check_input($edit["tid"]) ."', '". check_input($parent) ."')";
      }
      db_query("INSERT INTO term_hierarchy (tid, parent) VALUES ".implode(", ", $sql));
    } else {
      db_query("INSERT INTO term_hierarchy (tid, parent) VALUES ('". check_input($edit["tid"]) ."', '". check_input($edit["parent"][0]) ."')");
    }

    // synonyms (very cool idea indeed)
    db_query("DELETE FROM term_synonym WHERE tid = '". check_input($edit["tid"]) ."'");
    if ($edit["synonyms"]) {
      foreach (explode ("\n", $edit["synonyms"]) as $synonym) {
        $syn_q[] = "('". check_input($edit["tid"]) ."', '". check_input(chop($synonym)) ."')";
      }
      $synonyms_query = implode(", ", $syn_q);
      db_query("INSERT INTO term_synonym (tid, name) VALUES $synonyms_query");
    }
  }

  function taxonomy_del_term($tid) {
    db_query("DELETE FROM term_data WHERE tid = '". check_input($tid) ."'");
    db_query("DELETE FROM term_hierarchy WHERE tid = '". check_input($tid) ."'");
    db_query("DELETE FROM term_relation WHERE tid1 = '". check_input($tid) ."' OR tid2 = '". check_input($tid) ."'");
    db_query("DELETE FROM term_synonym WHERE tid = '". check_input($tid) ."'");
    db_query("DELETE FROM term_node WHERE tid = '". check_input($tid) ."'");
  }

  function taxonomy_overview() {
    global $tree;

    $output .= "<h3>vocabularies overview</h3>";
    $output .= "<table border=\"1\" cellpadding=\"2\" cellspacing=\"2\">\n";
    $output .= " <tr><th>name</th><th>node types</th><th>operations</th></tr>\n";

    $vocabularies = taxonomy_get_vocabularies();
    foreach ($vocabularies as $vocabulary) {
      $output .= " <tr><td>". check_output($vocabulary->name) ."</td><td>". check_output($vocabulary->types) ."</td><td><a href=\"admin.php?mod=taxonomy&type=vocabulary&op=edit&id=".$vocabulary->vid."\">edit vocabulary</a> | <a href=\"admin.php?mod=taxonomy&op=add&type=leaf&vocabulary_id=".$vocabulary->vid."\">add term</a> | <a href=\"admin.php?mod=taxonomy&type=vocabulary&op=preview&id=".$vocabulary->vid."\">preview form</a></td></tr>\n";

      unset($tree);
      taxonomy_get_tree($vocabulary->vid, $tree);
      if ($tree) {
        $output .= "<tr><td colspan=\"3\"><table><tr><td>";
        #print_r($tree);
        foreach ($tree as $term) {
          $output .= "<tr><td><a href=\"admin.php?mod=taxonomy&op=edit&type=term&id=".check_output($term->tid)."\">"._taxonomy_depth($term->depth).check_output($term->name)."</a></td></tr>";
        }
        $output .= "</td></tr></table></td></tr>\n";
      }
    }
    $output .= "</table>\n";

    return $output;
  }

  function taxonomy_form($vocabulary_id, $value = 0) {
    $vocabulary = taxonomy_get_vocabulary($vocabulary_id);
    if ($vocabulary->required) {
      $verb = "must";
      $blank = 0;
    } else {
      $verb = "can";
      $blank = "<none>";
    }
    if ($vocabulary->multiple) {
      $description = "You $verb choose one or more terms for this node";
      $multiple = 1;
    } else {
      $description = "You $verb choose one term for this node";
      $multiple = 0;
    }
    return _taxonomy_term_select($vocabulary->name, "taxonomy", $value, $vocabulary_id, $description, $multiple, $blank);
  }

/*
** API functions
*/

  // return array of vocabularies, as objects
  function taxonomy_get_vocabularies($type = '', $key = "vid") {
    if ($type) {
      $result = db_query("SELECT * FROM vocabulary WHERE types LIKE '%".check_query($type)."%' ORDER BY weight, name");
    } else {
      $result = db_query("SELECT * FROM vocabulary ORDER BY weight, name");
    }
    $vocabularies = array();
    while ($voc = db_fetch_object($result)) {
      $vocabularies[$voc->$key] = $voc;
    }
    return $vocabularies;
  }

  // return form with current term
  function taxonomy_node_form($type, $node = '') {
    if (!$node->taxonomy) {
      if ($node->nid) {
        $terms = array_keys(taxonomy_node_get_terms($node->nid));
      } else {
        $terms = 0;
      }
    } else {
      $terms = $node->taxonomy;
    }

    $c = db_query("SELECT * FROM vocabulary WHERE types LIKE '%". check_query($type) ."%' ORDER BY weight, name");
    while ($vocabulary = db_fetch_object($c)) {
      $result[] .= taxonomy_form($vocabulary->vid, $terms);
    }
    return $result ? $result : array();
  }

  // return 1 if node identified by $nid contains a taxonomy term identified by $tid in his body or title
  function taxonomy_node_has_term($nid, $tid) {
    $term_name = db_result(db_query("SELECT name FROM term_data WHERE tid = ". check_query($tid)));

    return db_result(db_query("SELECT COUNT(n.nid) FROM node n WHERE n.nid = '" . check_query($nid). "' AND ((n.body LIKE '%$term_name%') OR (n.body LIKE '%$term_name%'))"));
  }

  // return array of terms of a node beloging to a particular vocabulary identified by $vid
  function taxonomy_node_get_terms_by_vocabulary($nid, $vid, $key = "tid") {
    $result = db_query("SELECT t.* FROM term_data t, term_node r WHERE t.tid = r.tid AND t.vid = '".check_query($vid)."' AND r.nid = '" . check_query($nid) . "' ORDER BY weight");
    $terms = array();
    while ($term = db_fetch_object($result)) {
      $terms[$term->$key] = $term;
    }
    return $terms;
  }

  // return array of terms of a node
  function taxonomy_node_get_terms($nid, $key = "tid") {
    static $terms;

    if (!$terms[$nid]) {
      $result = db_query("SELECT t.* FROM term_data t, term_node r WHERE r.tid = t.tid AND r.nid = '".check_query($nid)."' ORDER BY weight");
      $terms[$nid] = array();
      while ($term = db_fetch_object($result)) {
        $terms[$nid][$term->$key] = $term;
      }
    }
    return $terms[$nid];
  }

  // save terms of a node
  function taxonomy_node_save($nid, $terms) {
    taxonomy_node_delete($nid);
    #print_r($terms);

    if ($terms) {
      foreach ($terms as $t) {
        $query[] = "('".check_query($nid)."', '".check_query($t)."')";
      }
      db_query("INSERT INTO term_node (nid, tid) VALUES ".implode(", ", $query));
    }
  }

  // clean up terms
  function taxonomy_node_delete($nid) {
    db_query("DELETE FROM term_node WHERE nid = '".check_query($nid)."'");
  }

  // relations: return array of related terms
  function taxonomy_get_related($tid, $key = "tid") {
    if ($tid) {
      $result = db_query("SELECT t.*, tid1, tid2 FROM term_relation, term_data t WHERE (t.tid = tid1 OR t.tid = tid2) AND (tid1 = '".check_query($tid)."' OR tid2 = '".check_query($tid)."') ORDER BY weight");
      $related = array();
      while ($term = db_fetch_object($result)) {
        $related[$term->$key] = $term;
      }
      return $related;
    }
  }

  // hierarchy: get parent term
  function taxonomy_get_parents($tid, $key = "tid") {
    if ($tid) {
      $result = db_query("SELECT t.* FROM term_hierarchy h, term_data t WHERE h.parent = t.tid AND h.tid = '".check_query($tid)."' ORDER BY weight, name");
      $parents = array();
      while ($parent = db_fetch_object($result)) {
        $parents[$parent->$key] = $parent;
      }
      #print_r($parents);
      return $parents;
    } else {
      return array();
    }
  }

  // hierarchy: get children
  function taxonomy_get_children($tid, $vid = 0, $key = "tid") {
    if ($vid) {
      $result = db_query("SELECT t.* FROM term_hierarchy h, term_data t WHERE t.vid = '".check_query($vid)."' AND h.tid = t.tid AND h.parent = '".check_query($tid)."' ORDER BY weight, name");
    } else {
      $result = db_query("SELECT t.* FROM term_hierarchy h, term_data t WHERE h.tid = t.tid AND parent = '".check_query($tid)."' ORDER BY weight");
    }
    $children = array();
    while ($term = db_fetch_object($result)) {
      $children[$term->$key] = $term;
    }
    return $children;
  }

  // hierarchy: get whole family, with tid, parent and depth; useful to show
  function taxonomy_get_tree($vocabulary_id, &$tree, $parent = 0, $depth = -1, $key = "tid") {
    static $children, $terms;
    if ($depth == -1) {
      $children = array();
      $tree = array();
      // $terms = array();   // we should be able to safely do this
    }
    $depth++;
    if ($vocabulary_id) {
      if (!$children) {
        $result = db_query("SELECT t.*, parent FROM term_data t, term_hierarchy h WHERE t.tid = h.tid AND t.vid = '".check_query($vocabulary_id)."' ORDER BY weight, name");
        while ($term = db_fetch_object($result)) {
          $children[$term->parent][] = $term->tid;
          $terms[$term->tid] = $term;
        }
        #print_r($children);
      }
      if ($children[$parent]) {
        foreach ($children[$parent] as $child) {
          #print_r($terms[$child]);
          $terms[$child]->depth = $depth;
          $tree[$terms[$child]->$key] = $terms[$child];
          taxonomy_get_tree($vocabulary_id, $tree, $child, $depth, $key);
        }
      }
      #print_r($tree);
    } else {
      return 0;
    }
  }

  // synonyms: return array of synonyms
  function taxonomy_get_synonyms($tid) {
    if ($tid) {
      $result = db_query("SELECT name FROM term_synonym WHERE tid = '".check_query($tid)."'");
      while ($synonym = db_fetch_array($result)) {
        $synonyms[] = $synonym["name"];
      }
      return $synonyms;
    } else {
      return "";
    }
  }

  // synonyms: return original term
  function taxonomy_get_synonym_root($term) {
    return db_fetch_object(db_query("SELECT * FROM term_synonym s, term_data t WHERE t.tid = s.tid AND s.name = '".check_query($term)."'"));
  }

  function taxonomy_get_vocabulary($vid) {
    // simple cache using a static var?
    return db_fetch_object(db_query("SELECT * FROM vocabulary WHERE vid = '".check_query($vid)."'"));
  }

  function taxonomy_get_term($tid) {
    // simple cache using a static var?
    return db_fetch_object(db_query("SELECT * FROM term_data WHERE tid = '".check_query($tid)."'"));
  }

/*
** service functions
*/

  function _taxonomy_term_select($title, $name, $value, $vocabulary_id, $description, $multiple, $blank, $exclude = array()) {
    taxonomy_get_tree($vocabulary_id, $tree);

    if ($blank) {
      $options[0] = $blank;
    }

    if ($tree) {
      foreach ($tree as $term) {
        if (!in_array($term->tid, $exclude)) {
          $options[$term->tid] = _taxonomy_depth($term->depth, '-').$term->name;
        }
      }
      if (!$blank && !$value) {
        // required but without a predefined value, so set first as predefined
        $value = $tree[0]->tid;
      }
    }

    if (count($options) > 0) {
      foreach ($options as $key=>$choice) {
        $select .= "<option value=\"$key\"". (is_array($value) ? (in_array($key, $value) ? " selected=\"selected\"" : "") : ($key == $value ? " selected=\"selected\"" : "")) .">". check_form($choice) ."</option>";
      }

      // min 8, possibly options/3 (set max too?)
      $size = max(8, round(count($options)) / 3);

      return form_item($title, "<select name=\"edit[$name][]\"" .($multiple ? " multiple size=\"$size\"" : "").($extra ? " $extra" : "") .">$select</select>", $description);
    }
  }

  function _taxonomy_depth($depth, $graphic = '--') {
    for ($n=0; $n<$depth; $n++) {
      $result .= $graphic;
    }
    return $result;
  }

  function _prepare_update($data) {
    foreach ($data as $key => $value) {
      $q[] = "$key = '". check_input($value) ."'";
    }
    $result = implode(", ", $q);
    return $result;
  }

  function _prepare_insert($data, $stage) {
    if ($stage == 1) {
      $result = implode(", ", array_keys($data));
    } else {
      foreach (array_values($data) as $value) {
        $q[] = "'". check_input($value) ."'";
      }
      $result = implode(", ", $q);
    }
    return "($result)";
  }
/*
** admin
*/

  function taxonomy_admin() {
    global $edit, $type, $op, $id, $tree;

    if (user_access("administer taxonomy")) {

      print "<SMALL><A HREF=\"admin.php?mod=taxonomy&op=add&type=vocabulary\">add new vocabulary</A> | <A HREF=\"admin.php?mod=taxonomy\">overview</A> | <A HREF=\"admin.php?mod=taxonomy&op=help\">help</A></SMALL><HR>\n";

      switch ($op) {
        case "add":
          if ($type == "vocabulary")
            print taxonomy_form_vocabulary();
          else
            print taxonomy_form_term();
          break;
        case "edit":
          if ($type == "vocabulary")
            print taxonomy_form_vocabulary(object2array(taxonomy_get_vocabulary($id)));
          else
            print taxonomy_form_term(object2array(taxonomy_get_term($id)));
          break;
        case "preview":
            print taxonomy_form($id);
          break;
        case "help":
          print taxonomy_help();
          break;
        case "Delete":
          $edit[name] = 0;
          // fall through:
        case "Submit":
          if ($type == "vocabulary")
            print status(taxonomy_save_vocabulary($edit));
          else
            print status(taxonomy_save_term($edit));
          // fall through:
        default:
          print taxonomy_overview();
      }
    }
    else {
      print message_access();
    }
    #print_r(taxonomy_get_children(2));
  }

?>
