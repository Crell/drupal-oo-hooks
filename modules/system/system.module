<?php
// $Id$

function system_help() {
  $output .= "<p>Drupal comes with system-wide defaults but the setting-module provides control over many Drupal preferences, behaviors including visual and operational settings.</p>";
  $output .= "<h3>Cache</h3>". system_help_cache();
  $output .= "<h3>Cron</h3>". system_help_cron();
  return $output;
}

function system_system($field){
  $system["description"] = t("Configuration system that lets administrators modify the workings of the site.");
  return $system[$field];
}

function system_help_cache() {
  $output .= "<p>Drupal has a caching mechanism that stores dynamically generated pages in a database.  By caching a page, Drupal does not have to generate the page each time it is requested.  Only pages requested by anonymous users are being cached.  When a cached page is accessed, Drupal will retrieve that page with minimal overhead using one SQL query only, thus reducing both the server load and the response time.</p>";
  $output .= "<p>Drupal's caching mechanism can be enabled and disabled by the site administrators from the 'settings' page.  Site administrators can also define how long cached pages should be kept.</p>";
  return $output;
}

function system_help_cron() {
  global $base_url;

  $output .= "<p>Some settings require a <i>cron</i> or <i>crontab</i>.  Cron, which stands for chronograph, is a periodic command scheduler: it executes commands at intervals specified in seconds.  It can be used to control the execution of daily, weekly and monthly jobs (or anything with a period of <i>n</i> seconds).   Automating tasks is one of the best ways to keep a system running smoothly, and if most of your administration does not require your direct involvement, cron is an ideal solution.</p>";
  $output .= "<p>Whenever <a href=\"$base_url/cron.php\">$base_url/cron.php</a> is accessed, cron will run: it checks for the jobs cron controls, and their periods in seconds.  If a certain task wasn't executed in the last n seconds, where n is the period of that job, it will be executed.  When all the executed commands terminate, cron is done.</p>";
  $output .= "<p>The recommended way to setup your cron system is to setup a Unix/Linux crontab that frequently visits <a href=\"$base_url/cron.php\">$base_url/cron.php</a>.  Note that cron does not guarantee the commands will be executed at the specified interval.  However, Drupal will try his best and run the crons as close to the specified intervals as possible.  The more you visit cron.php, the more accurate cron will be.</p>";
  $output .= "<p>If your hosting company does not allow you to setup crontabs, you can always ask someone else to setup a crontab for you. After all, virtually any Unix/Linux machine with access to the internet can setup a crontab to frequently visit <a href=\"$base_url/cron.php\">$base_url/cron.php</a>.</p>";
  $output .= "<p>For the Unix/Linux crontab itself, use a browser like <i>lynx</i> or <i>wget</i> but make sure the process terminates: either use <code>/usr/bin/lynx -source $base_url/cron.php</code> or <code>/usr/bin/wget -O /dev/null $base_url/cron.php</code>.  Take a look at the example scripts in the <code>scripts</code>-directory and make sure to adjust them to your needs.  A good crontab-line to run the cron-script once every hour would be: <pre>     00 * * * * /home/www/drupal/scripts/cron-lynx.sh</pre>Note that it is essential to access <code>cron.php</code> using a browser; don't run it using command line PHP and avoid using <code>localhost</code> or <code>127.0.0.1</code>, or some features won't work as expected.  For all the environment variables to be correct; use a browser to access <code>cron.php</code> on a publicly accessible domain.</p>";
  return $output;
}

function system_perm() {
  return array("administer site configuration", "access administration pages", "create php content");
}

function system_link($type) {
  if ($type == "admin" && user_access("administer site configuration")) {
    $help["general"] = t("General configuration options for your site. Set up the name of the site, e-mail address used in mail-outs, clean URL options, caching, etc.");
    $help["themes"] = t("Select which themes are available to your users and specify the default theme.");
    $help["modules"] = t("Modules are plugins for Drupal that extend its core functionality. Here you can select which modules are enabled.");
    $help["filters"] = t("Filters fit between the raw text in a node and the HTML output. They allow you to replace text selectively. Uses include automatic conversion of emoticons into graphics and filtering HTML content from users' submissions.");

    menu("admin/system", "site configuration", "system_admin", $help["general"], 3);
    menu("admin/system/themes", "themes", "system_admin", $help["themes"], 2);

    foreach (theme_list() as $theme) {
      include_once "$theme->filename";
      $function = $theme->name ."_settings";
      if (function_exists($function)) {
        menu("admin/system/themes/$theme->name", $theme->name, "system_admin", $theme->description);
      }
    }

    menu("admin/system/modules", "modules", "system_admin", $help["modules"], 3);
    foreach (module_list() as $name) {
      if (module_hook($name, "settings")) {
        menu("admin/system/modules/$name", $name, "system_admin", module_invoke($name, "system", "description"));
      }
    }
    menu("admin/system/filters", "filters", "system_admin", $help["filters"], 4);
    menu("admin/system/help", "help", "system_help", NULL, 9);
  }
}

function system_view_general() {
  global $conf, $cmodes, $corder;

  // general settings:
  $output .= "<h3>" . t("General settings") . "</h3>\n";
  $output .= form_textfield(t("Name"), "site_name", variable_get("site_name", "drupal"), 70, 70, t("The name of this website."));
  $output .= form_textfield(t("E-mail address"), "site_mail", variable_get("site_mail", ini_get("sendmail_from")), 70, 128, t("A valid e-mail address for this website, used by the auto-mailer during registration, new password requests, notifications, etc."));
  $output .= form_textfield(t("Slogan"), "site_slogan", variable_get("site_slogan", ""), 70, 128, t("The slogan of this website. Some themes display a slogan when available."));
  $output .= form_textarea(t("Mission"), "site_mission", variable_get("site_mission", ""), 70, 5, t("Your site's mission statement or focus."));
  $output .= form_textarea(t("Footer message"), "site_footer", variable_get("site_footer", ""), 70, 5, t("This text will be displayed at the bottom of each page.  Useful for adding a copyright notice to your pages."));
  $output .= form_textfield(t("Anonymous user"), "anonymous", variable_get("anonymous", "Anonymous"), 70, 70, t("The name used to indicate anonymous users."));
  foreach (module_list() as $name) { if (module_hook($name, "page")) $pages[$name] = $name; }
  $output .= form_select(t("Default front page"), "site_frontpage", variable_get("site_frontpage", "node"), $pages, t("The home page displays content from this module (usually node)."));
  $output .= form_select(t("Clean URLs"), "clean_url", variable_get("clean_url", 0), array(t("Disabled"), t("Enabled")), t("Enable or disable clean URLs.  If enabled, you'll need <code>ModRewrite</code> support.  See also the <code>.htaccess</code> file in Drupal's top-level directory."));
  $output .= "<hr />\n";

  // caching:
  $output .= "<h3>" . t("Cache settings") . "</h3>\n";
  $period = array(10 => format_interval(10), 20 => format_interval(20), 30 => format_interval(30), 40 => format_interval(40), 50 => format_interval(50), 50 => format_interval(50), 60 => format_interval(60), 90 => format_interval(90), 120 => format_interval(120), 150 => format_interval(150), 180 => format_interval(180), 210 => format_interval(210), 240 => format_interval(240), 270 => format_interval(270), 300 => format_interval(300), 360 => format_interval(360), 420 => format_interval(420), 480 => format_interval(480), 540 => format_interval(540), 600 => format_interval(600), 1800 => format_interval(1800), 3600 => format_interval(3600), 7200 => format_interval(7200));
  $output .= form_select(t("Cache support"), "cache", variable_get("cache", 0), array(t("Disabled"), t("Enabled")), t("Enable or disable the caching of pages."));
  $output .= form_select(t("Discard cached pages older than"), "cache_clear", variable_get("cache_clear", 120), $period, t("The time cached pages should be kept.  Older pages are automatically refreshed."));
  $output .= "<hr />\n";

  // submission settings:
  $output .= "<h3>" . t("Submission settings") . "</h3>\n";
  $rate = array(-10000 => "Disabled", 1 => "Maximum 1 every second", 5 => "Maximum 1 every 5 seconds", 15 => "Maximum 1 every 15 seconds", 30 => "Maximum 1 every 30 seconds", 60 => "Maximum 1 every minute", 300 => "Maximum 1 every 5 minutes", 900 => "Maximum 1 every 15 minutes", 1800 => "Maximum 1 every 30 minutes", 3600 => "Maximum 1 every hour", 21600 => "Maximum 1 every 6 hours", 43200 => "Maximum 1 every 12 hours");
  $output .= form_select(t("Maximum node rate"), "max_node_rate", variable_get("max_node_rate", 900), $rate, t("The maximum submission rate for nodes.  Its purpose is to stop potential abuse or denial of service attacks."));
  $output .= form_select(t("Maximum comment rate"), "max_comment_rate", variable_get("max_comment_rate", 120), $rate, t("The maximum submission rate for comments.  Its purpose is to stop potential abuse or denial of service attacks."));
  $output .= "<hr />\n";

  // date settings:
  $output .= "<h3>" . t("Date format settings") . "</h3>\n";

  // date settings: possible date formats
  $dateshort = array("m/d/Y - H:i", "d/m/Y - H:i", "Y/m/d - H:i",
           "m/d/Y - g:ia", "d/m/Y - g:ia", "Y/m/d - g:ia",
           "M j Y - H:i", "j M Y - H:i", "Y M j - H:i",
           "M j Y - g:ia", "j M Y - g:ia", "Y M j - g:ia");
  $datemedium = array("D, m/d/Y - H:i", "D, d/m/Y - H:i", "D, Y/m/d - H:i",
          "F j, Y - H:i", "j F, Y - H:i", "Y, F j - H:i",
          "D, m/d/Y - g:ia", "D, d/m/Y - g:ia", "D, Y/m/d - g:ia",
          "F j, Y - g:ia", "j F, Y - g:ia", "Y, F j - g:ia");
  $datelong = array("l, F j, Y - H:i", "l, j F, Y - H:i", "l, Y,  F j - H:i",
        "l, F j, Y - g:ia", "l, j F, Y - g:ia", "l, Y,  F j - g:ia");

  // date settings: construct choices for user
  foreach ($dateshort as $f) {
    $dateshortchoices[$f] = format_date(time(),"custom",$f);
  }
  foreach ($datemedium as $f) {
    $datemediumchoices[$f] = format_date(time(),"custom",$f);
  }
  foreach ($datelong as $f) {
    $datelongchoices[$f] = format_date(time(),"custom",$f);
  }

  $output .= form_select(t("Date format (short)"), "date_format_short", variable_get("date_format_short", $dateshort[0]), $dateshortchoices, t("The short format of date display."));
  $output .= form_select(t("Date format (medium)"), "date_format_medium", variable_get("date_format_medium", $datemedium[0]), $datemediumchoices,t("The medium sized date display."));
  $output .= form_select(t("Date format (long)"), "date_format_long", variable_get("date_format_long", $datelong[0]), $datelongchoices, t("Longer date format used for detailed display."));
  return $output;
}

function system_view_module($name) {
  if (module_hook($name, "settings")) {
      $output .= "<h3><a name=\"$name\">". ucfirst(t("$name")) ." " . t("settings") . "</a></h3>". module_invoke($name, "settings") ."<hr />\n";
  }
  return $output;
}

function system_view_theme($name) {
  $themes = theme_list();
  $theme = $themes[$name];
  if ($theme) {
    include_once "$theme->filename";

    $function = $theme->name ."_settings";
    if (function_exists($function)) {
      $output .= $function();
    }
  }
  else {
    $output = "Invalid theme specified";
  }
  return $output;
}

function system_view_filters() {
  foreach (module_list() as $name) {
    if (module_hook($name, "conf_filters")) {
      $output .= module_invoke($name, "conf_filters");
    }
  }
  return $output;
}

function system_save_settings($edit = array()) {

  if ($edit["type"]) {
    db_query("UPDATE system SET status = '0' WHERE type = '%s'", $edit["type"]);
    foreach ($edit["status"] as $filename => $status) {
      db_query("UPDATE system SET status = '%d' WHERE filename = '$filename'", $status);
    }
    if ($edit["type"] == "theme")
      variable_set("theme_default", $edit["theme_default"]);
  }
  else {
    foreach ($edit as $name => $value) {
      variable_set($name, $value);
    }
  }
  cache_clear_all();

  return t("the configuration options have been saved.");
}

function system_reset_default($edit = array()) {
  foreach ($edit as $name => $value) {
    variable_del($name);
  }

  cache_clear_all();

  return t("the configuration options have been reset to their default values.");
}

function system_view($type, $arg = "") {
  $required = array("modules/admin.module", "modules/user.module", "modules/system.module", "modules/watchdog.module");
  $links = array();
  switch ($type) {
    case "filters":
      $form = system_view_filters();
      break;
    case "modules":
      if ($arg)
        $form = system_view_module($arg);
      else
        $form = system_listing("module", "modules", $required);
      break;
    case "themes":
      if ($arg)
        $form = system_view_theme($arg);
      else
        $form = system_listing("theme", "themes", $required);
      break;
    default:
      $form = system_view_general();
      break;
  }

  $form .= form_submit(t("Save configuration"));
  $form .= form_submit(t("Reset to defaults"));

  print form($form);
}

function system_dirscan($dir, $mask, $nomask = array(".", "..", "CVS")) {
  $files = array();
  if (is_dir($dir) && $handle = opendir($dir)) {
    while ($file = readdir($handle)) {
      if (!in_array($file, $nomask)) {
        if (is_dir("$dir/$file")) {
          $files = array_merge($files, system_dirscan("$dir/$file", $mask, $nomask));
        }
        elseif (ereg($mask, $file)) {
          $name = basename($file);
          $files["$dir/$file"]->filename = "$dir/$file";
          $files["$dir/$file"]->name = substr($name, 0, strrpos($name, '.'));
        }
      }
    }
    closedir($handle);
  }
  return $files;
}

function system_listing($type, $directory, $required = array()) {
  // Make sure we set $type correctly
  $type = $type != 'theme' ? "module" : "theme";

  // Find files in the directory.
  $files = system_dirscan($directory, "\.$type$");

  // Extract current files from database.
  $result = db_query("SELECT filename, type, status FROM system WHERE type = '%s'", $type);
  while ($file = db_fetch_object($result)) {
    if (is_object($files[$file->filename])) {
      foreach ($file as $key => $value) {
        $files[$file->filename]->$key = $value;
      }
    }
  }

  ksort($files);

  $header = array(t("name"), t("description"), t("status"));

  foreach ($files as $filename => $file) {
    include_once($filename);
    if ($type == "module") {
      $info->name = module_invoke($file->name, "system", "name") ? module_invoke($file->name, "system", "name") : $file->name;
      $info->description = module_invoke($file->name, "system", "description");
    }
    elseif ($type == "theme") {
      $class = "Theme_$file->name";
      if (class_exists($class)) {
        $theme =& new $class;
        $info->name = $theme->system("name") ? $theme->system("name") : $file->name;
        $info->description = $theme->system("description");
        $themes[] = $info->name;
      }
      else {
        unset($files[$filename]);
      }
    }

    // Update the contents of the system table:
    db_query("DELETE FROM system WHERE filename = '%s' AND type = '%s'", $filename, $type);
    db_query("INSERT INTO system (name, description, type, filename, status) VALUES ('%s', '%s', '%s', '%s', %d)", $info->name, $info->description, $type, $filename, $file->status);

    $rows[] = array($info->name, $info->description, array("data" => (in_array($filename, $required) ? form_hidden("status][$filename", 1) . t("required") : form_checkbox("", "status][$filename", 1, $file->status)), "align" => "center"));
  }

  $output = table($header, $rows);

  // If we're doing themes, stick the default one here...
  if ($type == "theme") {
    $output .= "<hr />\n";
    foreach ($themes as $theme)
      $options .= "<option value=\"$theme\"". (variable_get("theme_default", 0) == $theme ? " selected=\"selected\"" : "") .">$theme</option>\n";
    $output .= form_item(t("Default theme"), "<select name=\"edit[theme_default]\">$options</select>", t("The default theme as seen by visitors or anonymous users. Make sure a valid theme is selected here (i.e. one that has its box checked above.)"));
  }
  $output .= form_hidden("type", $type);

  return $output;
}

function system_init() {
  global $HTTP_POST_VARS, $REQUEST_URI, $system_init_status;

  session_register("system_init_status");
  if (user_access("administer site configuration")) {
    if (isset($HTTP_POST_VARS["op"]) && $HTTP_POST_VARS["op"] == t("Reset to defaults")) {
      $system_init_status = status(system_reset_default($HTTP_POST_VARS["edit"]));
    }
    else if (isset($HTTP_POST_VARS["op"]) && $HTTP_POST_VARS["op"] == t("Save configuration")) {
      $system_init_status = status(system_save_settings($HTTP_POST_VARS["edit"]));
    }
    else {
      return;
    }
    drupal_goto("$REQUEST_URI");
  }
}

function system_admin() {
  global $HTTP_POST_VARS, $system_init_status;

  if (user_access("administer site configuration")) {
    session_register("system_init_status");
    print $system_init_status;
    session_unregister("system_init_status");
    print system_view(arg(2), arg(3));
  }
  else {
    print message_access();
  }
}

?>
