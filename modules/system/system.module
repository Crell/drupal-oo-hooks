<?php
// $Id$

function system_help() {
  $output .= "<p>Drupal comes with system-wide defaults but the setting-module provides control over many Drupal preferences, behaviors including visual and operational settings.</p>";
  $output .= "<h3>Cache</h3>". system_help_cache();
  $output .= "<h3>Cron</h3>". system_help_cron();
  return $output;
}

function system_system($field){
  $system["description"] = t("Configuration system that lets site admins modify the workings of the site.");
  return $system[$field];
}

function system_help_cache() {
  $output .= "<p>Drupal has a caching mechanism that stores dynamically generated pages in a database.  By caching a page, Drupal does not have to generate the page each time it is requested.  Only pages requested by anonymous users are being cached.  When a cached page is accessed, Drupal will retrieve that page with minimal overhead using one SQL query only, thus reducing both the server load and the response time.</p>";
  $output .= "<p>Drupal's caching mechanism can be enabled and disabled by the site administrators from the 'settings' page.  He can also define how long cached pages should be kept.</p>";
  return $output;
}

function system_help_cron() {
  $output .= "<p>Some settings require a <i>cron</i> or <i>crontab</i>.  Cron, which stands for chronograph, is a periodic command scheduler: it executes commands at intervals specified in seconds.  It can be used to control the execution of daily, weekly and monthly jobs (or anything with a period of <i>n</i> seconds).   Automating tasks is one of the best ways to keep a system running smoothly, and if most of your administration does not require your direct involvement, cron is an ideal solution.</p>";
  $output .= "<p>Whenever <a href=\"". path_uri() ."cron.php\">". path_uri() ."cron.php</a> is accessed, cron will run: it checks for the jobs cron controls, and their periods in seconds.  If a certain task wasn't executed in the last n seconds, where n is the period of that job, it will be executed.  When all the executed commands terminate, cron is done.</p>";
  $output .= "<p>The recommended way to setup your cron system is to setup a Unix/Linux crontab that frequently visits <a href=\"". path_uri() ."cron.php\">". path_uri() ."cron.php</a>.  Note that cron does not guarantee the commands will be executed at the specified interval.  However, Drupal will try his best and run the crons as close to the specified intervals as possible.  The more you visit cron.php, the more accurate cron will be.</p>";
  $output .= "<p>If your hosting company does not allow you to setup crontabs, you can always ask someone else to setup a crontab for you. After all, virtually any Unix/Linux machine with access to the internet can setup a crontab to frequently visit <a href=\"". path_uri() ."cron.php\">". path_uri() ."cron.php</a>.</p>";
  $output .= "<p>For the Unix/Linux crontab itself, use a browser like <i>lynx</i> or <i>wget</i> but make sure the process terminates: either use <code>/usr/bin/lynx -source <?php echo path_uri(); ?>cron.php</code> or <code>/usr/bin/wget -O /dev/null <?php echo path_uri(); ?>cron.php</code>.  Take a look at the example scripts in the <code>scripts</code>-directory and make sure to adjust them to your needs.  A good crontab-line to run the cron-script once every hour would be: <pre>     00 * * * * /home/www/drupal/scripts/cron-lynx</pre></p>";
  return $output;
}

function system_perm() {
  return array("administer site configuration", "access administration pages");
}

function system_link($type) {
  if ($type == "admin" && user_access("administer site configuration")) {
    $links[] = la(t("site configuration"), array("mod" => "system"));
  }

  return $links ? $links : array();
}

function system_view_options() {
  global $conf, $cmodes, $corder;

  // general settings:
  $output .= "<h3>General settings</h3>\n";
  $output .= form_textfield("Name", "site_name", variable_get("site_name", "drupal"), 55, 55, "The name of this website.");
  $output .= form_textfield("E-mail address", "site_mail", variable_get("site_mail", ini_get("sendmail_from")), 55, 128, "A valid e-mail address for this website, used by the auto-mailer during registration, new password requests, notifications, etc.");
  $output .= form_textfield("Slogan", "site_slogan", variable_get("site_slogan", ""), 55, 128, "The slogan of this website. Some themes display a slogan when available.");
  $output .= form_textarea("Mission", "site_mission", variable_get("site_mission", ""), 55, 5, "Your site's mission statement or focus.");
  $output .= form_textarea("Footer message", "site_footer", variable_get("site_footer", ""), 55, 5, "This text will be displayed at the bottom of each page.  Useful for adding a copyright notice to your pages.");
  $output .= form_textfield("Anonymous user", "anonymous", variable_get("anonymous", "Anonymous"), 55, 55, "The name used to indicate anonymous users.");
  foreach (module_list() as $name) { if (module_hook($name, "page")) $pages[$name] = $name; }
  $output .= form_select("Default front page", "site_frontpage", variable_get("site_frontpage", "node"), $pages, "The home page displays content from this module (usually <b>node</b>).");
  $output .= form_textarea("Extra front page PHP", "site_frontpage_extra", variable_get("site_frontpage_extra", ""), 55, 5, "Insert arbitrary PHP into the home page. This PHP executes via <b>eval()</b> after the page header but before the main page content.");
  $output .= "<hr />\n";

  // caching:
  $output .= "<h3>Cache settings</h3>\n";
  $period = array(10 => format_interval(10), 20 => format_interval(20), 30 => format_interval(30), 40 => format_interval(40), 50 => format_interval(50), 50 => format_interval(50), 60 => format_interval(60), 90 => format_interval(90), 120 => format_interval(120), 150 => format_interval(150), 180 => format_interval(180), 210 => format_interval(210), 240 => format_interval(240), 270 => format_interval(270), 300 => format_interval(300), 360 => format_interval(360), 420 => format_interval(420), 480 => format_interval(480), 540 => format_interval(540), 600 => format_interval(600), 1800 => format_interval(1800), 3600 => format_interval(3600), 7200 => format_interval(7200));
  $output .= form_select("Cache support", "cache", variable_get("cache", 0), array("Disabled", "Enabled"), "Enable or disable the caching of pages.");
  $output .= form_select("Discard cached pages older than", "cache_clear", variable_get("cache_clear", 30), $period, "The time cached pages should be kept.  Older pages are automatically refreshed.");
  $output .= "<hr />\n";

  // submission settings:
  $output .= "<h3>Submission settings</h3>\n";
  $rate = array(1 => "Maximum 1 every second", 5 => "Maximum 1 every 5 seconds", 15 => "Maximum 1 every 15 seconds", 30 => "Maximum 1 every 30 seconds", 60 => "Maximum 1 every minute", 300 => "Maximum 1 every 5 minutes", 900 => "Maximum 1 every 15 minutes", 1800 => "Maximum 1 every 30 minutes", 3600 => "Maximum 1 every hour", 21600 => "Maximum 1 every 6 hours", 43200 => "Maximum 1 every 12 hours");
  $output .= form_select("Maximum node rate", "max_node_rate", variable_get("max_node_rate", 900), $rate, "The maximum submission rate for nodes.  Its purpose is to stop potential abuse or denial of service attacks.");
  $output .= form_select("Maximum comment rate", "max_comment_rate", variable_get("max_comment_rate", 120), $rate, "The maximum submission rate for comments.  Its purpose is to stop potential abuse or denial of service attacks.");
  $output .= "<hr />\n";

  // date settings:
  $output .= "<h3>Date format setting</h3>\n";
  $output .= form_select("Date format", "date_format", variable_get("date_format", "m/d/Y - H:i"), array("m/d/Y - H:i" => "m/d/Y - H:i", "d/m/Y - H:i" => "d/m/Y - H:i", "Y/m/d - H:i" => "Y/m/d - H:i"), "The format in which dates are displayed");
  $output .= "<hr />\n";

  // comment settings:
  $output .= "<h3>Comment settings</h3>\n";
  $output .= form_select("Default display mode", "default_comment_mode", $conf["default_comment_mode"], $cmodes, "The default mode in which comments are displayed.");
  $output .= form_select("Default display order", "default_comment_order", $conf["default_comment_order"], $corder, "The default order in which comments are displayed.");
  for ($count = -1; $count < 6; $count++) $threshold[$count] = "Filter - $count";
  $output .= "<hr />\n";

  // layout settings:
  $output .= "<h3>Layout settings</h3>\n";
  foreach (theme_list() as $key => $value) $options .= "<option value=\"$key\"". (variable_get("theme_default", 0) == $key ? " selected=\"selected\"" : "") .">$key</option>\n";
  $output .= form_item("Default theme", "<select name=\"edit[theme_default]\">$options</select>", "The default theme as seen by visitors or anonymous users.");
  $output .= "<hr />\n";

  // development settings:
  $output .= "<h3>Development settings</h3>\n";
  $output .= form_select("Display timer information", "dev_timer", variable_get("dev_timer", 0), array("Disabled", "Enabled"), "Display the time it took to generate a page.  For Drupal development only.");
  $output .= form_select("Display query log", "dev_query", variable_get("dev_query", 0), array("Disabled", "Enabled"), "Display a log of the database queries needed to generate the current page.");

  $output .= "<hr />\n";

  foreach (module_list() as $name) {
    if (module_hook($name, "conf_options")) {
      $output .= "<h3><a name=\"$name\">". ucfirst($name) ." settings</a></h3>". module_invoke($name, "conf_options") ."<hr />\n";
    }
  }
  return $output;
}

function system_view_filters() {
  foreach (module_list() as $name) {
    if (module_hook($name, "conf_filters")) {
      $output .= module_invoke($name, "conf_filters");
    }
  }
  return $output;
}

function system_save($edit = array()) {
  foreach ($edit as $name => $value) variable_set($name, $value);
  return "the configuration options have been saved.";
}

function system_default($edit = array()) {
  foreach ($edit as $name => $value) variable_del($name);
  return "the configuration options have been reset to their default values.";
}

function system_view($type) {

  switch ($type) {
    case "filter":
      $form = system_view_filters();
      break;
    default:
      foreach (module_list() as $name) {
        if (module_hook($name, "conf_options")) {
          $links[] = la($name, array("mod" => "system"), $name);
        }
      }

      $output = "<small>". implode(" :: ", $links) ."</small><hr />";
      $form = system_view_options();
  }

  $form .= form_submit("Save configuration");
  $form .= form_submit("Reset to defaults");

  return $output . form($form);
}

/**
* Module configuration
*
* @author Kjartan Mannes
* @group system.module
* @return string module list
*/
function system_modules() {
  $result = db_query("SELECT name, status FROM system WHERE type = 'module'");
  $status = array();
  while ($module = db_fetch_object($result)) {
    $status[$module->name] = $module->status;
  }
  db_query("DELETE FROM system WHERE type = 'module'");

  if ($handle = @opendir("modules")) {
    $modules = array();
    while ($file = readdir($handle)) {
      if (".module" == substr($file, -7)) {
        $name = substr($file, 0, -7);
        $modules[$name] = array("filename" => "$file", "status" => $status[$name]);
       include_once("modules/$file");
      }
    }
    closedir($handle);
    asort($modules);
  }

  $required = array("user", "system", "watchdog");

  $output .= "<table border=\"1\" cellpadding=\"2\" cellspacing=\"2\">\n";
  $output .= "<tr><th>module</th><th>description</th><th>enabled</th><th colspan=\"2\">operations</th></tr>\n";
  foreach ($modules as $name => $module) {
    $output .= "<tr>";
    $output .= "<td>$name</td>";
    $output .= "<td>". check_output(module_invoke($name, "system", "description")) ."</td>";
    $output .= "<td align=\"center\">". (in_array($name, $required) ? "Enabled" : form_checkbox("", "status][$name", 1, $module["status"])) ."</td>";
    $output .= "<td>". (module_hook($name, "page") ? lm(t("view"), array("mod" => $name)) : "&nbsp;") ."</td>";
    $output .= "<td>". (module_hook($name, "admin") ? la(t("admin"), array("mod" => $name)) : "&nbsp;") ."</td>";
    $output .= "</tr>\n";
    if (!in_array($name, $required)) {
      db_query("INSERT INTO system SET name = '$name', type = 'module', filename = '$module[filename]', status = '$module[status]'");
    }
  }
  $output .= "</table><br />\n";
  $output .= form_submit("Save module settings");

  return form($output);
}

/**
* Theme configuration
*
* This function handles the Drupal themes and lets the site administrator enable or disable them as they wish.
*
* @author Kjartan Mannes
* @package system.module
* @return string theme list
*/
function system_themes() {
  $result = db_query("SELECT * FROM system WHERE type = 'theme' ORDER BY filename");
  $status = array();
  while ($theme = db_fetch_object($result)) {
    $_themes[$theme->name] = $theme;
  }

  if ($handle = @opendir("themes")) {
    $themes = array();
    while ($dir = readdir($handle)) {
      if (!substr_count($dir, ".") && is_dir("themes/$dir")) {
        if ($handle2 = @opendir("themes/$dir")) {
          while ($file = readdir($handle2)) {
            if (".theme" == substr($file, -6)) {
              include_once("themes/$dir/$file");
              $name = substr($file, 0, -6);
              $_theme = "theme_$name";
              if (class_exists($_theme)) {
                $_theme =& new $_theme;
                $_themes[$name]->filename = "themes/$dir/$file";
                if (method_exists($_theme, "system")) {
                  $_themes[$name]->displayname = $_theme->system("name");
                  $_themes[$name]->author = $_theme->system("author");
                  if (empty($_themes[$name]->description)) {
                    $_themes[$name]->description = $_theme->system("description");
                  }
                }

                $themes[$name] = $_themes[$name];
                unset($_theme);
              }
            }
          }
          closedir($handle2);
        }
      }
    }
    closedir($handle);
    asort($themes);
  }

  db_query("DELETE FROM system WHERE type = 'theme'");

  $output .= "<table border=\"1\" cellpadding=\"2\" cellspacing=\"2\">\n";
  $output .= "<tr><th>theme</th><th>name</th><th>description</th><th>author</th><th>enabled</th></tr>\n";
  foreach ($themes as $name => $theme) {
    $output .= "<tr>";
    $output .= "<td>$name</td>";
    $output .= "<td>$theme->displayname</td>";
    $output .= "<td>". form_textfield("", "$name][description", $theme->description, 40, 255)."</td>";
    $output .= "<td>$theme->author</td>";
    $output .= "<td align=\"center\">". form_checkbox("", "$name][status", 1, $theme->status) ."</td>";
    $output .= "</tr>\n";
    db_query("INSERT INTO system SET name = '$name', type = 'theme', filename = '$theme->filename', status = '$theme->status', description = '$theme->description'");
  }
  $output .= "</table><br />\n";
  $output .= form_submit("Save theme settings");

  return form($output);
}

function system_admin() {
  global $edit, $op, $type;
  if (user_access("administer site configuration")) {

    print "<small>".la(t("site settings"), array("mod" => "system", "type" => "options"))." | ".la(t("content filters"), array("mod" => "system", "type" => "filter"))." | ".la(t("modules"), array("mod" => "system", "op" => "modules"))." | ".la(t("themes"), array("mod" => "system", "op" => "themes"))." | ".la(t("help"), array("mod" => "system", "op" => "help"))."</small><hr />\n";

    switch ($op) {
      case "help":
        print system_help();
        break;
      case "Save module settings":
        db_query("UPDATE system SET status = '0' WHERE type = 'module'");
        foreach ($edit["status"] as $name => $status) {
          db_query("UPDATE system SET status = '$status' WHERE name = '$name'");
        }
      case "modules":
        print system_modules();
        break;
      case "Save theme settings":
        db_query("UPDATE system SET status = '0' WHERE type = 'theme'");
        foreach ($edit as $name => $settings) {
          db_query("UPDATE system SET status = '%s', description = '%s' WHERE name = '$name'", $settings["status"], $settings["description"]);
        }
      case "themes":
        print system_themes();
        break;
      case "Reset to defaults":
        print status(system_default($edit));
        print system_view($type);
        break;
      case "Save configuration":
        print status(system_save($edit));
        print system_view($type);
        break;
      default:
        print system_view($type);
    }
  }
  else {
    print message_access();
  }
}

?>