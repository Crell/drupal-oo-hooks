<?php
// $Id$

/**
 * @file
 * Configuration system that lets administrators modify the workings of the site.
 */

define('VERSION', '4.8.0 dev');

/**
 * Implementation of hook_help().
 */
function system_help($section) {
  global $base_url;

  switch ($section) {
    case 'admin/help#system':
      $output = '<p>'. t('The system module provides system-wide defaults such as running jobs at a particular time, and storing web pages to improve efficiency. The ability to run scheduled jobs makes administering the web site more usable, as administrators do not have to manually start jobs. The storing of web pages, or caching, allows the site to efficiently re-use web pages and improve web site performance. The settings module provides control over preferences, behaviours including visual and operational settings.') .'</p>';
      $output .= '<p>'. t('Some modules require regularly scheduled actions, such as cleaning up logfiles. Cron, which stands for chronograph, is a periodic command scheduler executing commands at intervals specified in seconds. It can be used to control the execution of daily, weekly and monthly jobs (or anything with a period measured in seconds). The aggregator module periodically updates feeds using cron. Ping periodically notifies services of new content on your site. Search periodically indexes the content on your site. Automating tasks is one of the best ways to keep a system running smoothly, and if most of your administration does not require your direct involvement, cron is an ideal solution.') .'</p>';
      $output .= '<p>'. t('There is a caching mechanism which stores dynamically generated web pages in a database. By caching a web page, the system module does not have to create the page each time someone wants to view it, instead it takes only one SQL query to display it, reducing response time and the server\'s load. Only pages requested by <em>anonymous</em> users are cached. In order to reduce server load and save bandwidth, the system module stores and sends cached pages compressed.') .'</p>';
      $output .= t('<p>You can</p>
<ul>
<li>activate your cron job on the cron page <a href="%file-cron">cron.php</a>.</li>
<li>read how to <a href="%external-http-drupal-org-cron">configure cron jobs</a>.</li>
<li>administer cache settings in <a href="%admin-settings">administer &gt;&gt; settings &gt;&gt; caching</a>.</li>
</ul>
', array('%file-cron' => 'cron.php', '%external-http-drupal-org-cron' => 'http://drupal.org/cron', '%admin-settings' => url('admin/settings/caching')));
      $output .= '<p>'. t('For more information please read the configuration and customization handbook <a href="%system">System page</a>.', array('%system' => 'http://drupal.org/handbook/modules/system/')) .'</p>';
      return $output;
    case 'admin/settings/modules#description':
      return t('Handles general site configuration for administrators.');
    case 'admin':
      return t('<p>Welcome to the administration section. Here you may control how your site functions.</p>');
    case 'admin/build/themes':
      return t('<p>Select which themes are available to your users and specify the default theme. To configure site-wide display settings, click the "configure" task above. Alternately, to override these settings in a specific theme, click the "configure" link for the corresponding theme. Note that different themes may have different regions available for rendering content like blocks. If you want consistency in what your users see, you may wish to enable only one theme.</p>');
    case 'admin/build/themes/settings':
      return t('<p>These options control the default display settings for your entire site, across all themes. Unless they have been overridden by a specific theme, these settings will be used.</p>');
    case 'admin/build/themes/settings/'. arg(3):
      $reference = explode('.', arg(3), 2);
      $theme = array_pop($reference);
      return t('<p>These options control the display settings for the <code>%template</code> theme. When your site is displayed using this theme, these settings will be used. By clicking "Reset to defaults," you can choose to use the <a href="%global">global settings</a> for this theme.</p>', array('%template' => $theme, '%global' => url('admin/build/themes/settings')));
    case 'admin/settings/modules':
      return t('<p>Modules are plugins for Drupal that extend its core functionality. Here you can select which modules are enabled. Click on the name of the module in the navigation menu for their individual configuration pages. Once a module is enabled, new <a href="%permissions">permissions</a> might be made available. Modules can automatically be temporarily disabled to reduce server load when your site becomes extremely busy by enabling the throttle.module and checking throttle. The auto-throttle functionality must be enabled on the <a href="%throttle">throttle configuration page</a> after having enabled the throttle module.</p>
<p>It is important that <a href="%update-php">update.php</a> is run every time a module is updated to a newer version.</p>', array('%permissions' => url('admin/access/permissions'), '%throttle' => url('admin/settings/throttle'), '%update-php' => $base_url .'/update.php'));
  }
}

/**
 * Implementation of hook_perm().
 */
function system_perm() {
  return array('administer site configuration', 'access administration pages', 'select different theme');
}

/**
 * Implementation of hook_elements().
 */
function system_elements() {
  // Top level form
  $type['form'] = array('#method' => 'post', '#action' => request_uri());

  // Inputs
  $type['checkbox'] = array('#input' => TRUE, '#return_value' => 1);
  $type['submit'] = array('#input' => TRUE, '#name' => 'op', '#button_type' => 'submit', '#executes_submit_callback' => TRUE);
  $type['button'] = array('#input' => TRUE, '#name' => 'op', '#button_type' => 'submit', '#executes_submit_callback' => FALSE);
  $type['textfield'] = array('#input' => TRUE, '#size' => 60, '#maxlength' => 128, '#autocomplete_path' => FALSE);
  $type['password'] = array('#input' => TRUE, '#size' => 30);
  $type['password_confirm'] = array('#input' => TRUE, '#process' => array('expand_password_confirm' => array()));
  $type['textarea'] = array('#input' => TRUE, '#cols' => 60, '#rows' => 5);
  $type['radios'] = array('#input' => TRUE, '#process' => array('expand_radios' => array()));
  $type['radio'] = array('#input' => TRUE);
  $type['checkboxes'] = array('#input' => TRUE, '#process' => array('expand_checkboxes' => array()), '#tree' => TRUE);
  $type['select'] = array('#input' => TRUE);
  $type['weight'] = array('#input' => TRUE, '#delta' => 10, '#default_value' => 0, '#process' => array('process_weight' => array()));
  $type['date'] = array('#input' => TRUE, '#process' => array('expand_date' => array()), '#validate' => array('date_validate' => array()));
  $type['file'] = array('#input' => TRUE, '#size' => 60);

  // Form structure
  $type['item'] = array();
  $type['hidden'] = array('#input' => TRUE);
  $type['value'] = array('#input' => TRUE);
  $type['markup'] = array('#prefix' => '', '#suffix' => '');
  $type['fieldset'] = array('#collapsible' => FALSE, '#collapsed' => FALSE);
  return $type;
}

/**
 * Implementation of hook_menu().
 */
function system_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array('path' => 'system/files', 'title' => t('file download'),
      'callback' => 'file_download',
      'access' => TRUE,
      'type' => MENU_CALLBACK);

    $access = user_access('administer site configuration');

    $items[] = array('path' => 'admin', 'title' => t('administer'),
      'access' => user_access('access administration pages'),
      'callback' => 'system_main_admin_page',
      'weight' => 9);
    $items[] = array('path' => 'admin/compact', 'title' => t('compact mode'),
      'access' => user_access('access administration pages'),
      'callback' => 'system_admin_compact_page',
      'type' => MENU_CALLBACK);

    // menu items that are basically just menu blocks
    $items[] = array(
      'path' => 'admin/settings',
      'title' => t('site configuration'),
      'description' => t('Adjust basic site configuration options.'),
      'position' => 'right',
      'weight' => -5,
      'callback' => 'system_settings_overview',
      'access' => $access);

    $items[] = array('path' => 'admin/build',
      'title' => t('site building'),
      'description' => t('Control how your site looks and feels.'),
      'position' => 'right',
      'weight' => -10,
      'callback' => 'system_admin_menu_block_page',
      'access' => $access);

    $items[] = array(
      'path' => 'admin/settings/admin',
      'title' => t('administration page'),
      'description' => t('Settings for how your administrative pages should look.'),
      'position' => 'left',
      'callback' => 'system_admin_page_settings',
      'block callback' => 'system_admin_page_settings',
      'access' => $access);

    // Themes:
    $items[] = array(
      'path' => 'admin/build/themes',
      'title' => t('themes'),
      'description' => t('Change which theme your site uses or allows users to set.'),
      'callback' => 'system_themes', 'access' => $access);

    $items[] = array(
      'path' => 'admin/build/themes/select',
      'title' => t('list'),
      'description' => t('Select the default theme.'),
      'callback' => 'system_themes',
      'access' => $access,
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -1);

    $items[] = array('path' => 'admin/build/themes/settings',
      'title' => t('configure'),
      'callback' => 'system_theme_settings',
      'access' => $access,
      'type' => MENU_LOCAL_TASK);

    // Theme configuration subtabs
    $items[] = array('path' => 'admin/build/themes/settings/global', 'title' => t('global settings'),
      'callback' => 'system_theme_settings', 'access' => $access,
      'type' => MENU_DEFAULT_LOCAL_TASK, 'weight' => -1);

    foreach (list_themes() as $theme) {
      if ($theme->status) {
        $items[] = array('path' => 'admin/build/themes/settings/'. $theme->name, 'title' => $theme->name,
        'callback' => 'system_theme_settings', 'callback arguments' => array($theme->name), 'access' => $access,
        'type' => MENU_LOCAL_TASK);
      }
    }

    // Modules:
    $items[] = array('path' => 'admin/settings/modules',
      'title' => t('modules'),
      'description' => t('Enable or disable add-on modules for your site.'),
      'weight' => -10,
      'callback' => 'system_modules',
      'access' => $access);

    // Settings:
    $items[] = array(
      'path' => 'admin/settings/site-information',
      'title' => t('site information'),
      'description' => t('Change basic site information, such as the site name, slogan, e-mail address, mission, front page and more.'),
      'callback' => 'system_site_information_settings');
    $items[] = array(
      'path' => 'admin/settings/error-reporting',
      'title' => t('error reporting'),
      'description' => t('Control how Drupal deals with errors including 403/404 erros as well as PHP error reporting.'),
      'callback' => 'system_error_reporting_settings');
    $items[] = array(
      'path' => 'admin/settings/page-caching',
      'title' => t('page caching'),
      'description' => t('Enable or disable page caching for anonymous users.'),
      'callback' => 'system_page_caching_settings');
    $items[] = array(
      'path' => 'admin/settings/file-system',
      'title' => t('file system'),
      'description' => t('Tell Drupal where to store uploaded files and how they are accessed.'),
      'callback' => 'system_file_system_settings');
    $items[] = array(
      'path' => 'admin/settings/image-toolkit',
      'title' => t('image toolkit'),
      'description' => t('Choose which image toolkit to use if you have installed optional toolkits.'),
      'callback' => 'system_image_toolkit_settings');
    $items[] = array(
      'path' => 'admin/content/rss-feed',
      'title' => t('RSS feeds'),
      'description' => t('Configure the number of items per feed and whether feeds should be titles/teasers/full-text.'),
      'callback' => 'system_rss_feeds_settings');
    $items[] = array(
      'path' => 'admin/settings/date-time',
      'title' => t('date and time'),
      'description' => t('Settings for how Drupal displays date and time, as well as the system\'s default timezone.'),
      'callback' => 'system_date_time_settings');
    $items[] = array(
      'path' => 'admin/settings/site-status',
      'title' => t('site status'),
      'description' => t('Take the site off-line for maintenance or bring it back online.'),
      'callback' => 'system_site_status_settings');
    $items[] = array(
      'path' => 'admin/settings/unicode',
      'title' => t('unicode'),
      'description' => t('Unicode string handling settings.'),
      'callback' => 'system_unicode_settings');
    $items[] = array(
      'path' => 'admin/settings/cron-status',
      'title' => t('cron status'),
      'description' => t('View whether or not cron is running on your site.'),
      'callback' => 'system_cron_status');
    $items[] = array(
      'path' => 'admin/settings/clean-urls',
      'title' => t('clean URLs'),
      'description' => t('Enable or disable clean URLs for your site.'),
      'callback' => 'system_clean_url_settings');
  }
  else {
    /**
     * Use the administrative theme if the user is looking at a page in the admin/* path.
     */
    if (arg(0) == 'admin') {
      global $custom_theme;
      $custom_theme = variable_get('admin_theme', 'bluemarine');
    }
  }

  return $items;
}

/**
 * Implementation of hook_user().
 *
 * Allows users to individually set their theme and time zone.
 */
function system_user($type, $edit, &$user, $category = NULL) {
  if ($type == 'form' && $category == 'account') {
    $form['theme_select'] = system_theme_select_form(t('Selecting a different theme will change the look and feel of the site.'), $edit['theme'], 2);

    if (variable_get('configurable_timezones', 1)) {
      $zones = _system_zonelist();
      $form['timezone'] = array('#type'=>'fieldset', '#title' => t('Locale settings'), '#weight' => 6);
      $form['timezone']['timezone'] = array(
        '#type' => 'select', '#title' => t('Time zone'), '#default_value' => strlen($edit['timezone']) ? $edit['timezone'] : variable_get('date_default_timezone', 0),
        '#options' => $zones, '#description' => t('Select your current local time. Dates and times throughout this site will be displayed using this time zone.')
      );
    }

    return $form;
  }
}

/**
 * Provide the administration overview page.
 */
function system_main_admin_page($arg = NULL) {
  // If we received an argument, they probably meant some other page.
  // Let's 404 them since the menu system cannot be told we do not
  // accept arguments.
  if ($arg !== NULL) {
    return drupal_not_found();
  }

  $menu = menu_get_item(NULL, 'admin');
  usort($menu['children'], '_menu_sort');
  foreach ($menu['children'] as $mid) {
    $block = menu_get_item($mid);
    if ($block['block callback'] && function_exists($block['block callback'])) {
      $arguments = isset($block['block arguments']) ? $block['block arguments'] : array();
      $block['content'] .= call_user_func_array($block['block callback'], $arguments);
    }
    $block['content'] .= theme('admin_block_content', system_admin_menu_block($block));
    $blocks[] = $block;
  }

  return theme('admin_page', $blocks);
}

/**
 * Provide a single block on the administration overview page.
 */
function system_admin_menu_block($block) {
  $content = array();
  if (is_array($block['children'])) {
    usort($block['children'], '_menu_sort');
    foreach ($block['children'] as $mid) {
      $item = menu_get_item($mid);
      if ($item['type'] & MENU_VISIBLE_IN_TREE) {
        $content[] = $item;
      }
    }
  }
  return $content;
}

/**
 * Provide a single block from the administration menu as a page.
 * This function is often a destination for these blocks.
 * For example, 'admin/page' needs to have a destination to be valid
 * in the Drupal menu system, but too much information there might be
 * hidden, so we supply the contents of the block.
 */
function system_admin_menu_block_page() {
  $menu = menu_get_item(NULL, $_GET['q']);
  $content = system_admin_menu_block($menu);

  $output = theme('admin_block_content', $content);
  return $output;
}

function system_admin_compact_page($mode = 'off') {
  global $user;
  user_save($user, array('admin_compact_mode' => ($mode == 'on')));
  drupal_goto('admin');
}
/**
 * This function provides a form to control the settings of the
 * administration page.
 */
function system_admin_page_settings() {
  $themes = system_theme_data();
  ksort($themes);
  $options[0] = t('System default');
  foreach ($themes as $theme) {
    $options[$theme->name] = $theme->name;
  }

  $form['admin_theme'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#title' => t('Administration theme'),
    '#description' => t('Choose which theme the administration pages should display in. If you choose "System default" the administration pages theme will display in the same theme the rest of the site uses.'),
    '#default_value' => variable_get('admin_theme', 'bluemarine'),
  );

  // In order to give it our own submit, we have to give it the default submit
  // too because the presence of a #submit will prevent the default #submit
  // from being used. Also we want ours first.
  $form['#submit']['system_admin_page_submit'] = array();
  $form['#submit']['system_settings_form_submit'] = array();

  return system_settings_form('system_admin_page_form', $form);
}


function system_admin_page_submit($form_id, $form_values) {
  // If we're changing themes, make sure the theme has its blocks initialized.
  if ($form_values['admin_theme'] != variable_get('admin_theme', 'bluemarine')) {
    $result = db_query("SELECT status FROM {blocks} WHERE theme = '%s'", $form_values['admin_theme']);
    if (!db_num_rows($result)) {
      system_initialize_theme_blocks($form_values['admin_theme']);
    }
  }
}

/*
 * Returns a fieldset containing the theme select form.
 *
 * @param $description
 *    description of the fieldset
 * @param $default_value
 *    default value of theme radios
 * @param $weight
 *    weight of the fieldset
 * @return
 *    a form array
 */
function system_theme_select_form($description = '', $default_value = '', $weight = 0) {
  if (user_access('select different theme')) {
    foreach (list_themes() as $theme) {
      if ($theme->status) {
        $enabled[] = $theme;
      }
    }

    if (count($enabled) > 1) {
      ksort($enabled);

      $form['themes'] = array(
        '#type' => 'fieldset',
        '#title' => t('Theme configuration'),
        '#description' => $description,
        '#collapsible' => TRUE,
        '#theme' => 'system_theme_select_form'
      );

      foreach ($enabled as $info) {
        // For the default theme, revert to an empty string so the user's theme updates when the site theme is changed.
        $info->key = $info->name == variable_get('theme_default', 'bluemarine') ? '' : $info->name;

        $info->screenshot = dirname($info->filename) . '/screenshot.png';
        $screenshot = file_exists($info->screenshot) ? theme('image', $info->screenshot, t('Screenshot for %theme theme', array('%theme' => $info->name)), '', array('class' => 'screenshot'), FALSE) : t('no screenshot');

        $form['themes'][$info->key]['screenshot'] = array('#type' => 'markup', '#value' => $screenshot);
        $form['themes'][$info->key]['description'] = array('#type' => 'item', '#title' => $info->name,  '#value' => dirname($info->filename) . ($info->name == variable_get('theme_default', 'bluemarine') ? t('<br /> <em>(site default theme)</em>') : ''));
        $options[$info->key] = '';
      }

      $form['themes']['theme'] = array('#type' => 'radios', '#options' => $options, '#default_value' => $default_value ? $default_value : '');
      $form['#weight'] = $weight;
      return $form;
    }
  }
}

function theme_system_theme_select_form($form) {
  foreach (element_children($form) as $key) {
    $row = array();
    if (is_array($form[$key]['description'])) {
      $row[] = form_render($form[$key]['screenshot']);
      $row[] = form_render($form[$key]['description']);
      $row[] = form_render($form['theme'][$key]);
    }
    $rows[] = $row;
  }

  $header = array(t('Screenshot'), t('Name'), t('Selected'));
  $output = theme('table', $header, $rows);
  return $output;
}

function _system_zonelist() {
  $timestamp = time();
  $zonelist = array(-11, -10, -9.5, -9, -8, -7, -6, -5, -4, -3.5, -3, -2, -1, 0, 1, 2, 3, 3.5, 4, 5, 5.5, 5.75, 6, 6.5, 7, 8, 9, 9.5, 10, 10.5, 11, 11.5, 12, 12.75, 13, 14);
  $zones = array();
  foreach ($zonelist as $offset) {
    $zone = $offset * 3600;
    $zones[$zone] = format_date($timestamp, 'custom', variable_get('date_format_long', 'l, F j, Y - H:i') . ' O', $zone);
  }
  return $zones;
}

function system_site_information_settings() {
  $form['site_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#default_value' => variable_get('site_name', 'drupal'),
    '#description' => t('The name of this web site.'),
    '#required' => TRUE
  );
  $form['site_mail'] = array(
    '#type' => 'textfield',
    '#title' => t('E-mail address'),
    '#default_value' => variable_get('site_mail', ini_get('sendmail_from')),
    '#description' => t('A valid e-mail address for this website, used by the auto-mailer during registration, new password requests, notifications, etc.')
  );
  $form['site_slogan'] = array(
    '#type' => 'textfield',
    '#title' => t('Slogan'),
    '#default_value' => variable_get('site_slogan', ''),
    '#description' => t('The slogan of this website. Some themes display a slogan when available.')
  );

  $form['site_mission'] = array(
    '#type' => 'textarea',
    '#title' => t('Mission'),
    '#default_value' => variable_get('site_mission', ''),
    '#description' => t('Your site\'s mission statement or focus.')
  );
  $form['site_footer'] = array(
    '#type' => 'textarea',
    '#title' => t('Footer message'),
    '#default_value' => variable_get('site_footer', ''),
    '#description' => t('This text will be displayed at the bottom of each page. Useful for adding a copyright notice to your pages.')
  );
  $form['anonymous'] = array(
    '#type' => 'textfield',
    '#title' => t('Anonymous user'),
    '#default_value' => variable_get('anonymous', 'Anonymous'),
    '#description' => t('The name used to indicate anonymous users.')
  );
  $form['site_frontpage'] = array(
    '#type' => 'textfield',
    '#title' => t('Default front page'),
    '#default_value' => variable_get('site_frontpage', 'node'),
    '#description' => t('The home page displays content from this relative URL. If you are not using clean URLs, specify the part after "?q=". If unsure, specify "node".')
  );

  return system_settings_form('system_site_information_settings', $form);
}

function system_clean_url_settings() {
  // We check for clean URL support using an image on the client side.
  $form['clean_url'] = array(
    '#type' => 'radios',
    '#title' => t('Clean URLs'),
    '#default_value' => variable_get('clean_url', 0),
    '#options' => array(t('Disabled'), t('Enabled')),
    '#description' => t('This option makes Drupal emit "clean" URLs (i.e. without <code>?q=</code> in the URL.)'),
  );

  if (!variable_get('clean_url', 0)) {
    if (strpos(request_uri(), '?q=') !== FALSE) {
      $form['clean_url']['#description'] .= t(' Before enabling clean URLs, you must perform a test to determine if your server is properly configured. If you are able to see this page again after clicking the "Run the clean URL test" link, the test has succeeded and the radio buttons above will be available. If instead you are directed to a "Page not found" error, you will need to change the configuration of your server. The <a href="%handbook">handbook page on Clean URLs</a> has additional troubleshooting information. %run-test', array('%handbook' => 'http://drupal.org/node/15365', '%run-test' => '<a href ="'. base_path() . 'admin/settings/clean-urls">'. t('Run the clean URL test') .'</a>'));
      $form['clean_url']['#attributes'] = array('disabled' => 'disabled');
    }
    else {
      $form['clean_url']['#description'] .= t(' You have successfully demonstrated that clean URLs work on your server. You are welcome to enable/disable them as you wish.');
      $form['#collapsed'] = FALSE;
    }
  }

  return system_settings_form('system_clean_url_settings', $form);
}

function system_error_reporting_settings() {

  $form['site_403'] = array(
    '#type' => 'textfield',
    '#title' => t('Default 403 (access denied) page'),
    '#default_value' => variable_get('site_403', ''),
    '#description' => t('This page is displayed when the requested document is denied to the current user. If you are not using clean URLs, specify the part after "?q=". If unsure, specify nothing.')
  );

  $form['site_404'] = array(
    '#type' => 'textfield',
    '#title' => t('Default 404 (not found) page'),
    '#default_value' =>  variable_get('site_404', ''),
    '#description' => t('This page is displayed when no other content matches the requested document. If you are not using clean URLs, specify the part after "?q=". If unsure, specify nothing.')
  );

  $form['error_level'] = array(
    '#type' => 'select', '#title' => t('Error reporting'), '#default_value' => variable_get('error_level', 1),
    '#options' => array(t('Write errors to the log'), t('Write errors to the log and to the screen')),
    '#description' =>  t('Where Drupal, PHP and SQL errors are logged. On a production server it is recommended that errors are only written to the error log. On a test server it can be helpful to write logs to the screen.')
  );

  $period = drupal_map_assoc(array(3600, 10800, 21600, 32400, 43200, 86400, 172800, 259200, 604800, 1209600, 2419200), 'format_interval');
  $period['1000000000'] = t('Never');
  $form['watchdog_clear'] = array(
    '#type' => 'select',
    '#title' => t('Discard log entries older than'),
    '#default_value' => variable_get('watchdog_clear', 604800),
    '#options' => $period,
    '#description' => t('The time log entries should be kept. Older entries will be automatically discarded. Requires crontab.')
  );

  return system_settings_form('system_error_reporting_settings', $form);
}

function system_page_caching_settings() {

  $form['cache'] = array(
    '#type' => 'radios',
    '#title' => t('Page cache'),
    '#default_value' => variable_get('cache', CACHE_DISABLED),
    '#options' => array(CACHE_DISABLED => t('Disabled'), CACHE_ENABLED => t('Enabled')),
    '#description' => t("Drupal has a caching mechanism which stores dynamically generated web pages in a database. By caching a web page, Drupal does not have to create the page each time someone wants to view it, instead it takes only one SQL query to display it, reducing response time and the server's load. Only pages requested by \"anonymous\" users are cached. In order to reduce server load and save bandwidth, Drupal stores and sends compressed cached pages.")
  );

  $period = drupal_map_assoc(array(0, 60, 180, 300, 600, 900, 1800, 2700, 3600, 10800, 21600, 32400, 43200, 86400), 'format_interval');
  $period[0] = t('none');
  $form['cache_lifetime'] = array(
    '#type' => 'select',
    '#title' => t('Minimum cache lifetime'),
    '#default_value' => variable_get('cache_lifetime', 0),
    '#options' => $period,
    '#description' => t('Enabling the cache will offer a sufficient performance boost for most low-traffic and medium-traffic sites. On high-traffic sites it can become necessary to enforce a minimum cache lifetime. The minimum cache lifetime is the minimum amount of time that will go by before the cache is emptied and recreated. A larger minimum cache lifetime offers better performance, but users will not see new content for a longer period of time.')
  );

  return system_settings_form('system_page_caching_settings', $form);
}

function system_file_system_settings() {

  $form['file_directory_path'] = array(
    '#type' => 'textfield',
    '#title' => t('File system path'),
    '#default_value' => file_directory_path(),
    '#maxlength' => 255,
    '#description' => t('A file system path where the files will be stored. This directory has to exist and be writable by Drupal. If the download method is set to public this directory has to be relative to Drupal installation directory, and be accessible over the web. When download method is set to private this directory should not be accessible over the web. Changing this location after the site has been in use will cause problems so only change this setting on an existing site if you know what you are doing.'),
    '#after_build' => array('system_check_directory'),
  );

  $form['file_directory_temp'] = array(
    '#type' => 'textfield',
    '#title' => t('Temporary directory'),
    '#default_value' => file_directory_temp(),
    '#maxlength' => 255,
    '#description' => t('Location where uploaded files will be kept during previews. Relative paths will be resolved relative to the Drupal installation directory.'),
    '#after_build' => array('system_check_directory'),
  );

  $form['file_downloads'] = array(
    '#type' => 'radios',
    '#title' => t('Download method'),
    '#default_value' => variable_get('file_downloads', FILE_DOWNLOADS_PUBLIC),
    '#options' => array(FILE_DOWNLOADS_PUBLIC => t('Public - files are available using http directly.'), FILE_DOWNLOADS_PRIVATE => t('Private - files are transferred by Drupal.')),
    '#description' => t('If you want any sort of access control on the downloading of files, this needs to be set to <em>private</em>. You can change this at any time, however all download URLs will change and there may be unexpected problems so it is not recommended.')
  );

  return system_settings_form('system_file_system_settings', $form);
}

function system_image_toolkit_settings() {
  $toolkits_available = image_get_available_toolkits();
  if (count($toolkits_available) > 1) {
    $form['image_toolkit'] = array(
      '#type' => 'radios',
      '#title' => t('Select an image processing toolkit'),
      '#default_value' => variable_get('image_toolkit', image_get_toolkit()),
      '#options' => $toolkits_available
    );

    return system_settings_form('system_image_toolkit_settings', $form);
  }
  else {
    return '<p>'. t("No image toolkits found.  Drupal will use PHP's built-in GD library for image handling.") .'</p>';
  }
}

function system_rss_feeds_settings() {

  $form['feed_default_items'] = array(
    '#type' => 'select',
    '#title' => t('Number of items per feed'),
    '#default_value' => variable_get('feed_default_items', 10),
    '#options' => drupal_map_assoc(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 25, 30)),
    '#description' => t('The default number of items to include in a feed.')
  );
  $form['feed_item_length'] = array(
    '#type' => 'select',
    '#title' => t('Display of XML feed items'),
    '#default_value' => variable_get('feed_item_length','teaser'),
    '#options' => array('title' => t('Titles only'), 'teaser' => t('Titles plus teaser'), 'fulltext' => t('Full text')),
    '#description' => t('Global setting for the length of XML feed items that are output by default.')
  );

  return system_settings_form('system_rss_feeds_settings', $form);
}

function system_date_time_settings() {
  // Date settings:
  $zones = _system_zonelist();

  // Date settings: possible date formats
  $dateshort = array('Y-m-d H:i','m/d/Y - H:i', 'd/m/Y - H:i', 'Y/m/d - H:i',
           'd.m.Y - H:i', 'm/d/Y - g:ia', 'd/m/Y - g:ia', 'Y/m/d - g:ia',
           'M j Y - H:i', 'j M Y - H:i', 'Y M j - H:i',
           'M j Y - g:ia', 'j M Y - g:ia', 'Y M j - g:ia');
  $datemedium = array('D, Y-m-d H:i', 'D, m/d/Y - H:i', 'D, d/m/Y - H:i',
          'D, Y/m/d - H:i', 'F j, Y - H:i', 'j F, Y - H:i', 'Y, F j - H:i',
          'D, m/d/Y - g:ia', 'D, d/m/Y - g:ia', 'D, Y/m/d - g:ia',
          'F j, Y - g:ia', 'j F Y - g:ia', 'Y, F j - g:ia', 'j. F Y - G:i');
  $datelong = array('l, F j, Y - H:i', 'l, j F, Y - H:i', 'l, Y,  F j - H:i',
        'l, F j, Y - g:ia', 'l, j F Y - g:ia', 'l, Y,  F j - g:ia', 'l, j. F Y - G:i');

  // Date settings: construct choices for user
  foreach ($dateshort as $f) {
    $dateshortchoices[$f] = format_date(time(), 'custom', $f);
  }
  foreach ($datemedium as $f) {
    $datemediumchoices[$f] = format_date(time(), 'custom', $f);
  }
  foreach ($datelong as $f) {
    $datelongchoices[$f] = format_date(time(), 'custom', $f);
  }

  $form['date_default_timezone'] = array(
    '#type' => 'select',
    '#title' => t('Default time zone'),
    '#default_value' => variable_get('date_default_timezone', 0),
    '#options' => $zones,
    '#description' => t('Select the default site time zone.')
  );

  $form['configurable_timezones'] = array(
    '#type' => 'radios',
    '#title' => t('Configurable time zones'),
    '#default_value' => variable_get('configurable_timezones', 1),
    '#options' => array(t('Disabled'), t('Enabled')),
    '#description' => t('Enable or disable user-configurable time zones. When enabled, users can set their own time zone and dates will be updated accordingly.')
  );

  $form['date_format_short'] = array(
    '#type' => 'select',
    '#title' => t('Short date format'),
    '#default_value' => variable_get('date_format_short', $dateshort[0]),
    '#options' => $dateshortchoices,
    '#description' => t('The short format of date display.')
  );

  $form['date_format_medium'] = array(
    '#type' => 'select',
    '#title' => t('Medium date format'),
    '#default_value' => variable_get('date_format_medium', $datemedium[0]),
    '#options' => $datemediumchoices,
    '#description' => t('The medium sized date display.')
  );

  $form['date_format_long'] = array(
    '#type' => 'select',
    '#title' => t('Long date format'),
    '#default_value' => variable_get('date_format_long', $datelong[0]),
    '#options' => $datelongchoices,
    '#description' => t('Longer date format used for detailed display.')
  );

  $form['date_first_day'] = array(
    '#type' => 'select',
    '#title' => t('First day of week'),
    '#default_value' => variable_get('date_first_day', 0),
    '#options' => array(0 => t('Sunday'), 1 => t('Monday'), 2 => t('Tuesday'), 3 => t('Wednesday'), 4 => t('Thursday'), 5 => t('Friday'), 6 => t('Saturday')),
    '#description' => t('The first day of the week for calendar views.')
  );

  return system_settings_form('system_date_time_settings', $form);
}

function system_site_status_settings() {

  $form['site_offline'] = array(
    '#type' => 'radios',
    '#title' => t('Site status'),
    '#default_value' => variable_get('site_offline', 0),
    '#options' => array(t('Online'), t('Off-line')),
    '#description' => t('When set to "Online", all visitors will be able to browse your site normally. When set to "Off-line", only users with the "administer site configuration" permission will be able to access your site to perform maintenance; all other visitors will see the site off-line message configured below. Authorized users can log in during "Off-line" mode directly via the <a href="%user-login">user login</a> page.', array('%user-login' => url('user'))),
  );

  $form['site_offline_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Site off-line message'),
    '#default_value' => variable_get('site_offline_message', t('%site is currently under maintenance. We should be back shortly. Thank you for your patience.', array('%site' => variable_get('site_name', t('This Drupal site'))))),
    '#description' => t('Message to show visitors when the site is in off-line mode.')
  );

  return system_settings_form('system_site_status_settings', $form);
}

function system_unicode_settings() {
  return system_settings_form('system_unicode_settings', unicode_settings());
}

function system_cron_status() {
  $cron_last = variable_get('cron_last', NULL);

  if (is_numeric($cron_last)) {
    $status = t('Cron is running. The last cron job ran %time ago.', array('%time' => format_interval(time() - $cron_last)));
  }
  else {
    $status = t('Cron has not run. It appears cron jobs have not been setup on your system. Please check the help pages for <a href="%url">configuring cron jobs</a>.', array('%url' => 'http://drupal.org/cron'));
  }

  return $status;
}

/**
 * Checks the existence of the directory specified in $form_element. This
 * function is called from the system_settings form to check both the
 * file_directory_path and file_directory_temp directories. If validation
 * fails, the form element is flagged with an error from within the
 * file_check_directory function.
 *
 * @param $form_element
 *   The form element containing the name of the directory to check.
 */
function system_check_directory($form_element) {
  file_check_directory($form_element['#value'], FILE_CREATE_DIRECTORY, $form_element['#parents'][0]);
  return $form_element;
}

/**
 * Retrieves the current status of an array of files in the system table.
 */
function system_get_files_database(&$files, $type) {
  // Extract current files from database.
  $result = db_query("SELECT filename, name, type, status, throttle, schema_version FROM {system} WHERE type = '%s'", $type);
  while ($file = db_fetch_object($result)) {
    if (isset($files[$file->name]) && is_object($files[$file->name])) {
      $file->old_filename = $file->filename;
      foreach ($file as $key => $value) {
        if (!isset($files[$file->name]) || !isset($files[$file->name]->$key)) {
          $files[$file->name]->$key = $value;
        }
      }
    }
  }
}

/**
 * Collect data about all currently available themes
 */
function system_theme_data() {
  // Find themes
  $themes = system_listing('\.theme$', 'themes');

  // Find theme engines
  $engines = system_listing('\.engine$', 'themes/engines');

  // can't iterate over array itself as it uses a copy of the array items
  foreach (array_keys($themes) as $key) {
    drupal_get_filename('theme', $themes[$key]->name, $themes[$key]->filename);
    drupal_load('theme', $themes[$key]->name);
    $themes[$key]->owner = $themes[$key]->filename;
    $themes[$key]->prefix = $key;
  }

  // Remove all theme engines from the system table
  db_query("DELETE FROM {system} WHERE type = 'theme_engine'");

  foreach ($engines as $engine) {
    // Insert theme engine into system table
    drupal_get_filename('theme_engine', $engine->name, $engine->filename);
    drupal_load('theme_engine', $engine->name);
    db_query("INSERT INTO {system} (name, type, filename, status, throttle, bootstrap) VALUES ('%s', '%s', '%s', %d, %d, %d)", $engine->name, 'theme_engine', $engine->filename, 1, 0, 0);

    // Add templates to the site listing
    foreach (call_user_func($engine->name . '_templates') as $template) {
      // Do not double-insert templates with theme files in their directory,
      // but do register their engine data.
      if (array_key_exists($template->name, $themes)) {
        $themes[$template->name]->template = TRUE;
        $themes[$template->name]->owner = $engine->filename;
        $themes[$template->name]->prefix = $engine->name;
      }
      else {
        $template->template = TRUE;
        $template->name = basename(dirname($template->filename));
        $template->owner = $engine->filename;
        $template->prefix = $engine->name;

        $themes[$template->name] = $template;
      }
    }
  }

  // Find styles in each theme's directory.
  foreach ($themes as $theme) {
    foreach (file_scan_directory(dirname($theme->filename), 'style.css$') as $style) {
      $style->style = TRUE;
      $style->template = isset($theme->template) ? $theme->template : FALSE;
      $style->name = basename(dirname($style->filename));
      $style->owner = $theme->filename;
      $style->prefix = $theme->template ? $theme->prefix : $theme->name;
      // do not double-insert styles with theme files in their directory
      if (array_key_exists($style->name, $themes)) {
        continue;
      }
      $themes[$style->name] = $style;
    }
  }

  // Extract current files from database.
  system_get_files_database($themes, 'theme');

  db_query("DELETE FROM {system} WHERE type = 'theme'");

  foreach ($themes as $theme) {
    db_query("INSERT INTO {system} (name, description, type, filename, status, throttle, bootstrap) VALUES ('%s', '%s', '%s', '%s', %d, %d, %d)", $theme->name, $theme->owner, 'theme', $theme->filename, $theme->status, 0, 0);
  }

  return $themes;
}

/**
 * Get a list of available regions from a specified theme.
 *
 * @param $theme_key
 *   The name of a theme.
 * @return
 *   An array of regions in the form $region['name'] = 'description'.
 */
function system_region_list($theme_key) {
  static $list = array();

  if (!array_key_exists($theme_key, $list)) {
    $theme = db_fetch_object(db_query("SELECT * FROM {system} WHERE type = 'theme' AND name = '%s'", $theme_key));

    // Stylesheets can't have regions; use its theme.
    if (strpos($theme->filename, '.css')) {
      return system_region_list(basename(dirname($theme->description)));
    }

    // If this is a custom theme, load it in before moving on.
    if (file_exists($file = dirname($theme->filename) .'/' . $theme_key . '.theme')) {
      include_once "./$file";
    }

    $regions = array();

    // This theme has defined its own regions.
    if (function_exists($theme_key . '_regions')) {
      $regions = call_user_func($theme_key . '_regions');
    }
    // File is an engine; include its regions.
    else if (strpos($theme->description, '.engine')) {
      include_once './' . $theme->description;
      $theme_engine = basename($theme->description, '.engine');
      $regions = function_exists($theme_engine . '_regions') ? call_user_func($theme_engine . '_regions') : array();
    }

    $list[$theme_key] = $regions;
  }

  return $list[$theme_key];
}

/**
 * Get the name of the default region for a given theme.
 *
 * @param $theme
 *   The name of a theme.
 * @return
 *   A string that is the region name.
 */
function system_default_region($theme) {
  $regions = array_keys(system_region_list($theme));
  return $regions[0];
}

/**
 * Returns an array of files objects of the given type from the site-wide
 * directory (i.e. modules/), the all-sites directory (i.e. sites/all/modules/)
 * and site-specific directory (i. e. sites/somesite/modules/). The returned
 * array will be keyed using the key specified (name, basename, filename). Using
 * name or basename will cause site- specific files to shadow files in the
 * default directories. That is, if a file with the same name appears in both
 * the site-wide directory and site-specific directory, only the site-specific
 * version will be included.
 *
 * @param $mask
 *   The regular expression of the files to find.
 * @param $directory
 *   The subdirectory name in which the files are found. For example,
 *   'modules' will search in both modules/ and
 *   sites/somesite/modules/.
 * @param $key
 *   The key to be passed to file_scan_directory().
 * @param $min_depth
 *   Minimum depth of directories to return files from.
 *
 * @return
 *   An array of file objects of the specified type.
 */
function system_listing($mask, $directory, $key = 'name', $min_depth = 1) {
  $config = conf_path();
  $searchdir = array($directory);
  $files = array();

  // Always search sites/all/* as well as the global directories
  $searchdir[] = 'sites/all';
  if (file_exists("$config/$directory")) {
    $searchdir[] = "$config/$directory";
  }

  // Get current list of items
  foreach ($searchdir as $dir) {
    $files = array_merge($files, file_scan_directory($dir, $mask, array('.', '..', 'CVS'), 0, TRUE, $key, $min_depth));
  }

  return $files;
}

/**
 * Assign an initial, default set of blocks for a theme.
 *
 * This function is called the first time a new theme is enabled. The new theme
 * gets a copy of the default theme's blocks, with the difference that if a
 * particular region isn't available in the new theme, the block is assigned
 * to the new theme's default region.
 *
 * @param $theme
 *   The name of a theme.
 */
function system_initialize_theme_blocks($theme) {
  // Initialize theme's blocks if none already registered.
  if (!(db_num_rows(db_query("SELECT module FROM {blocks} WHERE theme = '%s'", $theme)))) {
    $default_theme = variable_get('theme_default', 'bluemarine');
    $regions = system_region_list($theme);
    $result = db_query("SELECT * FROM {blocks} WHERE theme = '%s'", $default_theme);
    while($block = db_fetch_array($result)) {
      // If the region isn't supported by the theme, assign the block to the theme's default region.
      if (!array_key_exists($block['region'], $regions)) {
        $block['region'] = system_default_region($theme);
      }
      db_query("INSERT INTO {blocks} (module, delta, theme, status, weight, region, visibility, pages, custom, throttle) VALUES ('%s', '%s', '%s', %d, %d, '%s', %d, '%s', %d, %d)",
          $block['module'], $block['delta'], $theme, $block['status'], $block['weight'], $block['region'], $block['visibility'], $block['pages'], $block['custom'], $block['throttle']);
    }
  }
}

// Add the submit / reset buttons and run drupal_get_form()
function system_settings_form($form_id, $form) {
  $form['buttons']['submit'] = array('#type' => 'submit', '#value' => t('Save configuration') );
  $form['buttons']['reset'] = array('#type' => 'submit', '#value' => t('Reset to defaults') );

  if (!empty($_POST) && form_get_errors()) {
    drupal_set_message(t('The settings have not been saved because of the errors.'), 'error');
  }

  return drupal_get_form($form_id, $form, 'system_settings_form');
}

function system_theme_settings_submit($form_id, $values) {
  $op = isset($_POST['op']) ? $_POST['op'] : '';
  $key = $values['var'];

  // Exclude unnecessary elements.
  unset($values['var'], $values['submit'], $values['reset'], $values['form_id']);

  if ($op == t('Reset to defaults')) {
    variable_del($key);
    drupal_set_message(t('The configuration options have been reset to their default values.'));
  }
  else {
    variable_set($key, $values);
    drupal_set_message(t('The configuration options have been saved.'));
  }
}

/**
 * Execute the system_settings_form.
 *
 * If you want node type configure style handling of your checkboxes,
 * add an array_filter value to your form.
 *
 */
function system_settings_form_submit($form_id, $values) {
  $op = isset($_POST['op']) ? $_POST['op'] : '';

  // Exclude unnecessary elements.
  unset($values['submit'], $values['reset'], $values['form_id']);

  foreach ($values as $key => $value) {
    if ($op == t('Reset to defaults')) {
      variable_del($key);
    }
    else {
      if (is_array($value) && isset($values['array_filter'])) {
        $value = array_keys(array_filter($value));
      }
      variable_set($key, $value);
    }
  }
  if ($op == t('Reset to defaults')) {
    drupal_set_message(t('The configuration options have been reset to their default values.'));
  }
  else {
    drupal_set_message(t('The configuration options have been saved.'));
  }
  menu_rebuild();
}

/**
 * Menu callback; displays a listing of all themes.
 */
function system_themes() {
  $themes = system_theme_data();
  ksort($themes);

  foreach ($themes as $info) {
    $info->screenshot = dirname($info->filename) . '/screenshot.png';
    $screenshot = file_exists($info->screenshot) ? theme('image', $info->screenshot, t('Screenshot for %theme theme', array('%theme' => $info->name)), '', array('class' => 'screenshot'), FALSE) : t('no screenshot');

    $form[$info->name]['screenshot'] = array('#type' => 'markup', '#value' => $screenshot);
    $form[$info->name]['description'] = array('#type' => 'item', '#title' => $info->name,  '#value' => dirname($info->filename));
    $options[$info->name] = '';
    if ($info->status) {
      $status[] = $info->name;
    }
    if ($info->status && (function_exists($info->prefix . '_settings') || function_exists($info->prefix . '_features'))) {
      $form[$info->name]['operations'] = array('#type' => 'markup', '#value' => l(t('configure'), 'admin/build/themes/settings/' . $info->name) );
    }
    else {
      // Dummy element for form_render. Cleaner than adding a check in the theme function.
      $form[$info->name]['operations'] = array();
    }
  }

  $form['status'] = array('#type' => 'checkboxes', '#options' => $options, '#default_value' => $status);
  $form['theme_default'] = array('#type' => 'radios', '#options' => $options, '#default_value' => variable_get('theme_default', 'bluemarine'));
  $form['buttons']['submit'] = array('#type' => 'submit', '#value' => t('Save configuration') );
  $form['buttons']['reset'] = array('#type' => 'submit', '#value' => t('Reset to defaults') );

  return drupal_get_form('system_themes', $form);
}

function theme_system_themes($form) {
  foreach (element_children($form) as $key) {
    $row = array();
    if (is_array($form[$key]['description'])) {
      $row[] = form_render($form[$key]['screenshot']);
      $row[] = form_render($form[$key]['description']);
      $row[] = array('data' => form_render($form['status'][$key]), 'align' => 'center');
      if ($form['theme_default']) {
        $row[] = array('data' => form_render($form['theme_default'][$key]), 'align' => 'center');
        $row[] = array('data' => form_render($form[$key]['operations']), 'align' => 'center');
      }
    }
    $rows[] = $row;
  }

  $header = array(t('Screenshot'), t('Name'), t('Enabled'), t('Default'), t('Operations'));
  $output = theme('table', $header, $rows);
  $output .= form_render($form);
  return $output;
}


function system_themes_submit($form_id, $values) {

  db_query("UPDATE {system} SET status = 0 WHERE type = 'theme'");

  if ($_POST['op'] == t('Save configuration')) {
    if (is_array($values['status'])) {
      foreach ($values['status'] as $key => $choice) {
        // Always enable the default theme, despite its status checkbox being checked:
        if ($choice || $values['theme_default'] == $key) {
          // If theme status is being set to 1 from 0, initialize block data for this theme if necessary.
          if (db_num_rows(db_query("SELECT status FROM {system} WHERE type = 'theme' AND name = '%s' AND status = 0", $key))) {
            system_initialize_theme_blocks($key);
          }
          db_query("UPDATE {system} SET status = 1 WHERE type = 'theme' and name = '%s'", $key);
        }
      }
    }
    variable_set('theme_default', $values['theme_default']);
  }
  else {
    variable_del('theme_default');
    db_query("UPDATE {system} SET status = 1 WHERE type = 'theme' AND name = 'bluemarine'");
  }

  menu_rebuild();
  drupal_set_message(t('The configuration options have been saved.'));
  return 'admin/build/themes';
}

/**
 * Menu callback; displays a listing of all modules.
 */
function system_modules() {
  // Get current list of modules
  $files = module_rebuild_cache();

  foreach ($files as $filename => $file) {
    drupal_get_filename('module', $file->name, $file->filename);
    drupal_load('module', $file->name);

    $file->description = module_invoke($file->name, 'help', 'admin/settings/modules#description');

    $form['name'][$file->name] = array('#value' => $file->name);
    $form['description'][$file->name] = array('#value' => $file->description);
    $options[$file->name] = '';
    if ($file->status) {
      $status[] = $file->name;
    }
    if ($file->throttle) {
      $throttle[] = $file->name;
    }
  }

  // Handle status checkboxes, including overriding the generated
  // checkboxes for required modules.
  $form['status'] = array('#type' => 'checkboxes', '#default_value' => $status, '#options' => $options);
  $required = array('block', 'filter', 'node', 'system', 'user', 'watchdog');
  foreach ($required as $require) {
    $form['status'][$require] = array('#type' => 'hidden', '#value' => 1, '#suffix' => t('required'));
  }

  /**
   * Handle throttle checkboxes, including overriding the generated checkboxes for required modules.
   */
  if (module_exist('throttle')) {
    $form['throttle'] = array('#type' => 'checkboxes', '#default_value' => $throttle, '#options' => $options);
    $throttle_required = array_merge($required, array('throttle'));
    foreach ($throttle_required as $require) {
      $form['throttle'][$require] = array('#type' => 'hidden', '#value' => 0, '#suffix' => t('required'));
    }
  }

  $form['buttons']['submit'] = array('#type' => 'submit', '#value' => t('Save configuration'));

  return drupal_get_form('system_modules', $form);
}

function theme_system_modules($form) {
  foreach (element_children($form['name']) as $key) {
    $row = array();
    $row[] = form_render($form['name'][$key]);
    $row[] = form_render($form['description'][$key]);
    $row[] = array('data' => form_render($form['status'][$key]), 'align' => 'center');

    if (module_exist('throttle')) {
      $row[] = array('data' => form_render($form['throttle'][$key]), 'align' => 'center');
    }
    $rows[] = $row;
  }

  $header = array(t('Name'), t('Description'), t('Enabled'));
  if (module_exist('throttle')) {
    $header[] = t('Throttle');
  }

  $output = theme('table', $header, $rows);
  $output .= form_render($form);
  return $output;
}


function system_modules_submit($form_id, $edit) {
  include_once './includes/install.inc';
  $new_modules = array();
  foreach ($edit['status'] as $key => $choice) {
    if ($choice) {
      if (drupal_get_installed_schema_version($key) == SCHEMA_UNINSTALLED) {
        $new_modules[] = $key;
      }
      else {
        module_enable($key);
      }
    }
    else {
      module_disable($key);
    }
  }

  module_list(TRUE, FALSE);

  foreach ($new_modules as $module) {
    drupal_install_module($module);
  }

  if (is_array($edit['throttle'])) {
    foreach ($edit['throttle'] as $key => $choice) {
      if ($choice) {
        db_query("UPDATE {system} SET throttle = 1 WHERE type = 'module' and name = '%s'", $key);
      }
    }
  }

  menu_rebuild();
  node_types_rebuild();

  drupal_set_message(t('The configuration options have been saved.'));
  return 'admin/settings/modules';
}


/**
 * Menu callback; displays a module's settings page.
 */
function system_settings_overview() {

  // Check database setup if necessary
  if (function_exists('db_check_setup') && empty($_POST)) {
    db_check_setup();
  }

  $menu = menu_get_item(NULL, 'admin/settings');
  $content = system_admin_menu_block($menu);

  $output = theme('admin_block_content', $content);
  // TODO: remove this:
  foreach (module_implements('settings') as $module) {
    drupal_set_message("$module settings inaccessible: module needs updating because the _settings hook has been deprecated.");
  }

  return $output;
}

/**
 * Menu callback; display theme configuration for entire site and individual themes.
 */
function system_theme_settings($key = '') {
  $directory_path = file_directory_path();
  file_check_directory($directory_path, FILE_CREATE_DIRECTORY, 'file_directory_path');

  // Default settings are defined in theme_get_settings() in includes/theme.inc
  if ($key) {
    $settings = theme_get_settings($key);
    $var = str_replace('/', '_', 'theme_'. $key .'_settings');
    $themes = system_theme_data();
    $features = function_exists($themes[$key]->prefix . '_features') ? call_user_func($themes[$key]->prefix . '_features') : array();
  }
  else {
    $settings = theme_get_settings('');
    $var = 'theme_settings';
  }

  $form['var'] = array('#type' => 'hidden', '#value' => $var);

  // Check for a new uploaded logo, and use that instead.
  if ($file = file_check_upload('logo_upload')) {
    if ($info = image_get_info($file->filepath)) {
      $parts = pathinfo($file->filename);
      $filename = ($key) ? str_replace('/', '_', $key) . '_logo.' . $parts['extension'] : 'logo.' . $parts['extension'];

      if ($file = file_save_upload('logo_upload', $filename, 1)) {
        $_POST['edit']['default_logo'] = 0;
        $_POST['edit']['logo_path'] = $file->filepath;
        $_POST['edit']['toggle_logo'] = 1;
      }
    }
    else {
      form_set_error('file_upload', t('Only JPEG, PNG and GIF images are allowed to be used as logos.'));
    }
  }

  // Check for a new uploaded favicon, and use that instead.
  if ($file = file_check_upload('favicon_upload')) {
    $parts = pathinfo($file->filename);
    $filename = ($key) ? str_replace('/', '_', $key) . '_favicon.' . $parts['extension'] : 'favicon.' . $parts['extension'];

    if ($file = file_save_upload('favicon_upload', $filename, 1)) {
      $_POST['edit']['default_favicon'] = 0;
      $_POST['edit']['favicon_path'] = $file->filepath;
      $_POST['edit']['toggle_favicon'] = 1;
    }
  }

  // Toggle settings
  $toggles = array(
    'toggle_logo'                 => t('Logo'),
    'toggle_name'                 => t('Site name'),
    'toggle_slogan'               => t('Site slogan'),
    'toggle_mission'              => t('Mission statement'),
    'toggle_node_user_picture'    => t('User pictures in posts'),
    'toggle_comment_user_picture' => t('User pictures in comments'),
    'toggle_search'               => t('Search box'),
    'toggle_favicon'              => t('Shortcut icon')
  );

  // Some features are not always available
  $disabled = array();
  if (!variable_get('user_pictures', 0)) {
    $disabled['toggle_node_user_picture'] = TRUE;
    $disabled['toggle_comment_user_picture'] = TRUE;
  }
  if (!module_exist('search')) {
    $disabled['toggle_search'] = TRUE;
  }

  $form['theme_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Toggle display'),
    '#description' => t('Enable or disable the display of certain page elements.'),
  );
  foreach ($toggles as $name => $title) {
    if ((!$key) || in_array($name, $features)) {
      // disable search box if search.module is disabled
      $form['theme_settings'][$name] = array('#type' => 'checkbox', '#title' => $title, '#default_value' => $settings[$name]);
      if (isset($disabled[$name])) {
        $form['theme_settings'][$name]['#attributes'] = array('disabled' => 'disabled');
      }
    }
  }

  // System wide only settings.
  if (!$key) {
    // Create neat 2-column layout for the toggles
    $form['theme_settings'] += array(
      '#prefix' => '<div class="theme-settings-left">',
      '#suffix' => '</div>',
    );

    // Toggle node display.
    $node_types = node_get_types('names');
    if ($node_types) {
      $form['node_info'] = array(
        '#type' => 'fieldset',
        '#title' => t('Display post information on'),
        '#description' =>  t('Enable or disable the <em>submitted by Username on date</em> text when displaying posts of the following type.'),
        '#prefix' => '<div class="theme-settings-right">',
        '#suffix' => '</div>',
      );
      foreach ($node_types as $type => $name) {
        $form['node_info']["toggle_node_info_$type"] = array('#type' => 'checkbox', '#title' => $name, '#default_value' => $settings["toggle_node_info_$type"]);
      }
    }
  }

  // Logo settings
  if ((!$key) || in_array('toggle_logo', $features)) {
    $form['logo'] = array(
      '#type' => 'fieldset',
      '#title' => t('Logo image settings'),
      '#description' => t('If toggled on, the following logo will be displayed.'),
      '#attributes' => array('class' => 'theme-settings-bottom'),
    );
    $form['logo']["default_logo"] = array(
      '#type' => 'checkbox',
      '#title' => t('Use the default logo'),
      '#default_value' => $settings['default_logo'],
      '#tree' => FALSE,
      '#description' => t('Check here if you want the theme to use the logo supplied with it.')
    );
    $form['logo']['logo_path'] = array(
      '#type' => 'textfield',
      '#title' => t('Path to custom logo'),
      '#default_value' => $settings['logo_path'],
      '#description' => t('The path to the file you would like to use as your logo file instead of the default logo.'));

    $form['logo']['logo_upload'] = array(
      '#type' => 'file',
      '#title' => t('Upload logo image'),
      '#maxlength' => 40,
      '#description' => t("If you don't have direct file access to the server, use this field to upload your logo.")
    );
  }

  // Icon settings
  if ((!$key) || in_array('toggle_favicon', $features)) {
    $form['favicon'] = array('#type' => 'fieldset', '#title' => t('Shortcut icon settings'));
    $form['favicon']['text'] = array('#value' => t('Your shortcut icon or \'favicon\' is displayed in the address bar and bookmarks of most browsers.'));
    $form['favicon']['default_favicon'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use the default shortcut icon.'),
      '#default_value' => $settings['default_favicon'],
      '#description' => t('Check here if you want the theme to use the default shortcut icon.')
    );
    $form['favicon']['favicon_path'] = array(
      '#type' => 'textfield',
      '#title' => t('Path to custom icon'),
      '#default_value' =>  $settings['favicon_path'],
      '#description' => t('The path to the image file you would like to use as your custom shortcut icon.')
    );

    $form['favicon']['favicon_upload'] = array(
      '#type' => 'file',
      '#title' => t('Upload icon image'),
      '#description' => t("If you don't have direct file access to the server, use this field to upload your shortcut icon.")
    );
  }

  if ($key) {
    // Template-specific settings
    $function = $themes[$key]->prefix .'_settings';
    if (function_exists($function)) {
      if ($themes[$key]->template) {
        // file is a template or a style of a template
        $form['specific'] = array('#type' => 'fieldset', '#title' => t('Engine-specific settings'), '#description' => t('These settings only exist for all the templates and styles based on the %engine theme engine.', array('%engine' => $themes[$key]->prefix)));
      }
      else {
        // file is a theme or a style of a theme
        $form['specific'] = array('#type' => 'fieldset', '#title' => t('Theme-specific settings'), '#description' => t('These settings only exist for the %theme theme and all the styles based on it.', array('%theme' => $themes[$key]->prefix)));
      }
      $group = $function();
      $form['specific'] = array_merge($form['specific'], (is_array($group) ? $group : array()));
    }
  }
  $form['#attributes'] = array('enctype' => 'multipart/form-data');

  return system_settings_form('system_theme_settings', $form);

}

/**
 * Output a confirmation form
 *
 * This function outputs a complete form for confirming an action. A link is
 * offered to go back to the item that is being changed in case the user changes
 * his/her mind.
 *
 * You should use $GLOBALS['values']['edit'][$name] (where $name is usually 'confirm') to
 * check if the confirmation was successful.
 *
 * @param $form_id
 *   The unique form identifier. Used by the form API to construct the theme.
 * @param $form
 *   Additional elements to inject into the form, for example hidden elements.
 * @param $question
 *   The question to ask the user (e.g. "Are you sure you want to delete the
 *   block <em>foo</em>?").
 * @param $path
 *   The page to go to if the user denies the action.
 * @param $description
 *   Additional text to display (defaults to "This action cannot be undone.").
 * @param $yes
 *   A caption for the button which confirms the action (e.g. "Delete",
 *   "Replace", ...).
 * @param $no
 *   A caption for the link which denies the action (e.g. "Cancel").
 * @param $name
 *   The internal name used to refer to the confirmation item.
 * @return
 *   A themed HTML string representing the form.
 */

function confirm_form($form_id, $form, $question, $path, $description = NULL, $yes = NULL, $no = NULL, $name = 'confirm') {

  $description = ($description) ? $description : t('This action cannot be undone.');
  drupal_set_title($question);
  $form['#attributes'] = array('class' => 'confirmation');
  $form['description'] = array('#value' => $description);
  $form[$name] = array('#type' => 'hidden', '#value' => 1);

  $form['actions'] = array('#prefix' => '<div class="container-inline">', '#suffix' => '</div>');
  $form['actions']['submit'] = array('#type' => 'submit', '#value' => $yes ? $yes : t('Confirm'));
  $form['actions']['cancel'] = array('#value' => l($no ? $no : t('Cancel'), $path));
  return drupal_get_form($form_id, $form, 'confirm_form');
}

/**
 * Determine if a user is in compact mode.
 */
function system_admin_compact_mode() {
  global $user;
  return (isset($user->admin_compact_mode)) ? $user->admin_compact_mode : variable_get('admin_compact_mode', FALSE);
}

/**
 * This function formats an administrative page for viewing.
 *
 * @param $blocks
 *   An array of blocks to display. Each array should include a
 *   'title', a 'description', a formatted 'content' and a
 *   'position' which will control which container it will be
 *   in. This is usually 'left' or 'right'.
 * @themeable
 */
function theme_admin_page($blocks) {
  foreach ($blocks as $block) {
    if ($block_output = theme('admin_block', $block)) {
      if (!$block['position']) {
        // perform automatic striping.
        $block['position'] = $stripe++ % 2 ? 'left' : 'right';
      }
      $container[$block['position']] .= $block_output;
    }
  }

  $output = '<div class="admin">';
  $output .= '<div class="compact-link">';
  if (system_admin_compact_mode()) {
    $alt = t('Produce a less compact layout that includes descriptions.');
    $output .= l(t('Show descriptions'), 'admin/compact/off', array('alt' => $alt, 'title' => $alt));
  }
  else {
    $alt = t('Produce a more compact layout that doesn\'t include descriptions.');
    $output .= l(t('Hide descriptions'), 'admin/compact/on', array('alt' => $alt, 'title' => $alt));
  }
  $output .= '</div>';

  foreach ($container as $id => $data) {
    $output .= '<div class="'. $id .'">';
    $output .= $data;
    $output .= '</div>';
  }
  $output .= '</div>';
  return $output;
}

/**
 * This function formats an administrative block for display.
 *
 * @param $block
 *   An array containing information about the block. It should
 *   include a 'title', a 'description' and a formatted 'content'.
 * @themeable
 */
function theme_admin_block($block) {
  // Don't display the block if it has no content to display.
  if (!$block['content']) {
    return '';
  }

  $output = <<< EOT
  <div class="admin-panel collapsible">
    <div class="head">
      $block[title]
    </div>
    <div class="body">
      <div class="description">
        $block[description]
      </div>
      $block[content]
    </div>
  </div>
EOT;
  return $output;
}

/**
 * This function formats the content of an administrative block.
 *
 * @param $block
 *   An array containing information about the block. It should
 *   include a 'title', a 'description' and a formatted 'content'.
 * @themeable
 */
function theme_admin_block_content($content) {
  if (!$content) {
    return '';
  }

  if (system_admin_compact_mode()) {
    $output = '<ul class="menu">';
    foreach ($content as $item) {
      $output .= '<li class="leaf">'. l($item['title'], $item['path'], array('alt' => $item['description'], 'title' => $item['description'])) .'</li>';
    }
    $output .= '</ul>';
  }
  else {
    $output = '<dl class="admin-list">';
    foreach ($content as $item) {
      $output .= '<dt>'. l($item['title'], $item['path']) .'</dt>';
      $output .= '<dd>'. $item['description'] .'</dd>';
    }
    $output .= '</dl>';
  }
  return $output;
}
