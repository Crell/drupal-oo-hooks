<?php
// $Id$

class ContactTestCase extends DrupalWebTestCase {
  /**
   * Implementation of getInfo().
   */
  function getInfo() {
    return array(
      'name' => t('Contact functionality'),
      'description' => t('Test site-wide contact form and personal contact form functionality.'),
      'group' => t('Contact'),
    );
  }

  /**
   * Implementation of setUp().
   */
  function setUp() {
    parent::setUp('contact');
  }

  /**
   * Test configuration options and site-wide contact form.
   */
  function testSiteWideContact() {
    // Create and login administative user.
    $admin_user = $this->drupalCreateUser(array('administer site-wide contact form', 'administer permissions'));
    $this->drupalLogin($admin_user);

    // Set settings.
    $edit = array();
    $edit['contact_form_information'] = $this->randomName(100);
    $edit['contact_hourly_threshold'] = 3;
    $edit['contact_default_status'] = TRUE;
    $this->drupalPost('admin/build/contact/settings', $edit, t('Save configuration'));
    $this->assertText(t('The configuration options have been saved.'), t('Setting successfully saved.'));

    $this->reloadVariables();

    // Delete old categories to ensure that new categories are used.
    $this->deleteCategories();

    // Add categories.
    // Test invalid recipients.
    $invalid_recipients = array('invalid', 'invalid@', /*'invalid@site', 'invalid@site.',*/ '@site.', '@site.com');
    foreach ($invalid_recipients as $invalid_recipient) {
      $this->addCategory($this->randomName(16), $invalid_recipient, '', FALSE);
      $this->assertRaw(t('%recipient is an invalid e-mail address.', array('%recipient' => $invalid_recipient)), t('Caught invalid recipient ('. $invalid_recipient .').'));
    }

    // Create valid categories.
    $recipients = array('simpletest@test.com', 'simpletest2@test.com', 'simpletest3@test.com');
    $this->addCategory($category = $this->randomName(16), implode(',', array($recipients[0])), '', TRUE);
    $this->assertRaw(t('Category %category has been added.', array('%category' => $category)), t('Category successfully added.'));

    $this->addCategory($category = $this->randomName(16), implode(',', array($recipients[0], $recipients[1])), '', FALSE);
    $this->assertRaw(t('Category %category has been added.', array('%category' => $category)), t('Category successfully added.'));

    $this->addCategory($category = $this->randomName(16), implode(',', array($recipients[0], $recipients[1], $recipients[2])), '', FALSE);
    $this->assertRaw(t('Category %category has been added.', array('%category' => $category)), t('Category successfully added.'));

    // Clear food table in preparation for flood test and allow other checks to complete.
    $this->assertTrue(db_query('DELETE FROM {flood}'), t('Flood table emptied.'));

    // Check to see that anonymous user cannot see contact page without permission.
    $this->setPermission('anonymous user', array('access site-wide contact form' => FALSE));
    $this->drupalLogout();

    $this->drupalGet('contact');
    $this->assertResponse(403, t('Access denied to anonymous user without permission.'));

    // Give anonymous user permission and see that page is viewable.
    $this->drupalLogin($admin_user);
    $this->setPermission('anonymous user', array('access site-wide contact form' => TRUE));
    $this->drupalLogout();

    $this->drupalGet('contact');
    $this->assertResponse(200, t('Access granted to anonymous user with permission.'));

    // Check that "Additional information" is displayed on the page.
    $this->assertText($edit['contact_form_information'], t('Contact information displayed.'));

    // Submit contact form with invalid values.
    $categories = $this->getCategories();
    $this->submitContact('', $recipients[0], $this->randomName(16), $categories[0], $this->randomName(64));
    $this->assertText(t('Your name field is required.'), t('Name required.'));

    $this->submitContact($this->randomName(16), '', $this->randomName(16), $categories[0], $this->randomName(64));
    $this->assertText(t('Your e-mail address field is required.'), t('E-mail required.'));

    $this->submitContact($this->randomName(16), $invalid_recipients[0], $this->randomName(16), $categories[0], $this->randomName(64));
    $this->assertText(t('You must enter a valid e-mail address.'), t('Valid e-mail required.'));

    $this->submitContact($this->randomName(16), $recipients[0], '', $categories[0], $this->randomName(64));
    $this->assertText(t('Subject field is required.'), t('Subject required.'));

    $this->submitContact($this->randomName(16), $recipients[0], $this->randomName(16), $categories[0], '');
    $this->assertText(t('Message field is required.'), t('Message required.'));

    // Submit contact form with correct values and check flood interval.
    for ($i = 0; $i < $edit['contact_hourly_threshold']; $i++) {
      $this->submitContact($this->randomName(16), $recipients[0], $this->randomName(16), $categories[0], $this->randomName(64));
      $this->assertText(t('Your message has been sent.'), t('Message sent.'));
    }
    // Submit contact form one over limit.
    $this->drupalGet('contact');
    $this->assertRaw(t('You cannot send more than %number messages per hour. Please try again later.', array('%number' => $edit['contact_hourly_threshold'])), t('Message threshold reached.'));

    // Delete created categories.
    $this->drupalLogin($admin_user);
    $this->deleteCategories();
  }

  /**
   * Test personal contact form.
   */
  function testPersonalContact() {
    $admin_user = $this->drupalCreateUser(array('administer site-wide contact form'));
    $this->drupalLogin($admin_user);

    // Enable the personal contact form.
    $edit = array();
    $edit['contact_default_status'] = TRUE;
    $this->drupalPost('admin/build/contact/settings', $edit, t('Save configuration'));
    $this->assertText(t('The configuration options have been saved.'), t('Setting successfully saved.'));

    // Reload variables.
    $this->drupalLogout();
    $this->reloadVariables();

    // Create web users and attempt to use personal contact forms with default set to true.
    $web_user1 = $this->drupalCreateUser(array());
    $web_user2 = $this->drupalCreateUser(array());

    $this->drupalLogin($web_user1);

    $this->drupalGet('user/'. $web_user2->uid .'/contact');
    $this->assertResponse(200, t('Access to personal contact form granted.'));

    $edit = array();
    $edit['subject'] = $this->randomName(16);
    $edit['message'] = $this->randomName(64);
    $this->drupalPost(NULL, $edit, t('Send e-mail'));
    $this->assertText(t('The message has been sent.'), t('Message sent.'));

    $this->drupalLogout();

    $this->drupalLogin($admin_user);

    // Disable the personal contact form.
    $edit = array();
    $edit['contact_default_status'] = FALSE;
    $this->drupalPost('admin/build/contact/settings', $edit, t('Save configuration'));
    $this->assertText(t('The configuration options have been saved.'), t('Setting successfully saved.'));

    // Reload variables.
    $this->drupalLogout();
    $this->reloadVariables();

    // Create web users and attempt to use personal contact forms with default set to false.
    $web_user3 = $this->drupalCreateUser(array());
    $web_user4 = $this->drupalCreateUser(array());

    $this->drupalLogin($web_user3);

    $this->drupalGet('user/'. $web_user4->uid .'/contact');
    $this->assertResponse(403, t('Access to personal contact form denied.'));
  }

  /**
   * Add a category.
   *
   * @param string $category Name of category.
   * @param string $recipients List of recipient e-mail addresses.
   * @param string $reply Auto-reply text.
   * @param boolean $selected Defautly selected.
   */
  function addCategory($category, $recipients, $reply, $selected) {
    $edit = array();
    $edit['category'] = $category;
    $edit['recipients'] = $recipients;
    $edit['reply'] = $reply;
    $edit['selected'] = ($selected ? '1' : '0');
    $this->drupalPost('admin/build/contact/add', $edit, t('Save'));
  }

  /**
   * Submit contact form.
   *
   * @param string $name Name.
   * @param string $mail E-mail address.
   * @param string $subject Subject.
   * @param integer $cid Category id.
   * @param string $message Message.
   */
  function submitContact($name, $mail, $subject, $cid, $message) {
    $edit = array();
    $edit['name'] = $name;
    $edit['mail'] = $mail;
    $edit['subject'] = $subject;
    $edit['cid'] = $cid;
    $edit['message'] = $message;
    $this->drupalPost('contact', $edit, t('Send e-mail'));
  }

  /**
   * Delete all categories.
   */
  function deleteCategories() {
    $categories = $this->getCategories();
    foreach ($categories as $category) {
      $category_name = db_result(db_query('SELECT category FROM {contact} WHERE cid = %d', array($category)));
      $this->drupalPost('admin/build/contact/delete/'. $category, array(), t('Delete'));
      $this->assertRaw(t('Category %category has been deleted.', array('%category' => $category_name)), t('Category deleted sucessfully.'));
    }
  }

  /**
   * Get list category ids.
   *
   * @return array Category ids.
   */
  function getCategories() {
    $result = db_query('SELECT cid FROM {contact}');
    $categories = array();
    while ($category = db_result($result)) {
      $categories[] = $category;
    }
    return $categories;
  }

  /**
   * Set permission.
   *
   * @param string $role User role to set permissions for.
   * @param array $permissions Key-value array of permissions to set.
   */
  function setPermission($role, $permissions) {
    // Get role id (rid) for specified role.
    $rid = db_result(db_query("SELECT rid FROM {role} WHERE name = '%s'", array($role)));
    if ($rid === FALSE) {
      $this->fail(t(' [permission] Role "'. $role .'" not found.'));
    }

    // Create edit array from permission.
    $edit = array();
    foreach ($permissions as $name => $value) {
      $edit[$rid .'['. $name .']'] = $value;
    }

    $this->drupalPost('admin/user/permissions', $edit, t('Save permissions'));
    $this->assertText(t('The changes have been saved.'), t(' [permission] Saved changes.'));
  }

  /**
   * Reload variables table.
   */
  function reloadVariables() {
    global $conf;

    cache_clear_all('variables', 'cache');
    $conf = variable_init();
    $this->assertTrue($conf, t('Variables reloaded.'));
  }
}
