<?php
/* $Id$ */

function path_admin() {
  $op = $_POST["op"];
  $edit = $_POST["edit"];

  if (empty($op)) {
    $op = arg(2);
  }

  switch ($op) {
    case "add":
      $output = path_form();
      break;

    case "edit":
      $output = path_form(path_load(arg(3)));
      break;

    case "help":
      $output = path_help();
      break;

    case "delete":
      path_delete(arg(3));
      $output .= path_overview();
      break;

    case t("Create new alias"):
    case t("Update alias"):
      $output = path_save($edit);
      break;

    default:
      $output .= path_overview();
  }

  print theme("page", $output);
}

function path_set_alias($path = NULL, $alias = NULL) {
  if ($path && !$alias) {
    db_query("DELETE FROM {url_alias} WHERE src = '%s'", $path);
    drupal_rebuild_path_map();
  }
  else if (!$path && $alias) {
    db_query("DELETE FROM {url_alias} WHERE dst = '%s'", $alias);
    drupal_rebuild_path_map();
  }
  else if ($path && $alias) {
    $path_count = db_result(db_query("SELECT COUNT(src) FROM {url_alias} WHERE src = '%s'", $path));
    $alias_count = db_result(db_query("SELECT COUNT(dst) FROM {url_alias} WHERE dst = '%s'", $alias));

    // We have an insert:
    if ($path_count == 0 && $alias_count == 0) {
      db_query("INSERT INTO {url_alias} (src, dst) VALUES ('%s', '%s')", $path, $alias);
      drupal_rebuild_path_map();
    }
    else if ($path_count == 1 && $alias_count == 0) {
      db_query("UPDATE {url_alias} SET dst = '%s' WHERE src = '%s'", $alias, $path);
      drupal_rebuild_path_map();
    }
    else if ($path_count == 0 && $alias_count == 1) {
      db_query("UPDATE {url_alias} SET src = '%s' WHERE dst = '%s'", $path, $alias);
      drupal_rebuild_path_map();
    }
    else if ($path_count == 1 && $alias_count == 1) {
      // This will delete the path that alias was originally pointing to:
      path_set_alias(NULL, $alias);
      path_set_alias($path);
      path_set_alias($path, $alias);
    }
  }
}

function path_form($edit = "", $error = "") {

  $form .= form_textfield(t("Existing path"), "src", $edit["src"], 50, 64, t("Specify the existing path you wish to alias. For example: node/view/28, forum/1, taxonomy/page/or/1,2."));
  $form .= form_textfield(t("New path alias"), "dst", $edit["dst"], 50, 64, t("Specify an alternative path by which this data can be accessed.  For example, type 'about' when writing an about page.  Use a relative path and don't add a trailing slash or the URL alias won't work."));

  if ($edit["pid"]) {
    $form .= form_hidden("pid", $edit["pid"]);
    $form .= form_submit(t("Update alias"));
  }
  else {
    $form .= form_submit(t("Create new alias"));
  }

  return form($form);
}

function path_help($section = "admin/help#path") {

  switch ($section) {
    case "admin/system/modules#description":
      $output = t("Enables users to create custom URLs.");
      break;
    case "admin/path":
      $output = t("Drupal provides users complete control over URLs through aliasing. While the original Drupal URLs are always created and accessible, advanced users have the option to override these normal paths.");
      break;
    case "admin/path/add":
      $output = t("Enter the path you wish to create the alias for, followed by the name of the new alias. Each path can be associated with only one alias.");
      break;
    case "admin/help#path":
      $output = t("
<h3>Background</h3>
<p>A very powerful feature of Drupal is the ability to have control over all paths. The path module is the tool that provides this functionality and is part of the basic Drupal installation, although it is not enabled by default. Some examples of re-mapping paths are:</p>
<pre>
user/login => login

image/tid/16 => store

taxonomy/page/or/7,19,20,21 => store/products/whirlygigs

node/view/3 => contact
</pre>
<p>This functionality integrates seamlessly into node forms and also provides the administrator an interface to view all aliases that have been created.</p>
<p>Aliases have a 1 to 1 relationship with their original Drupal URLs. In other words you cannot have an alias map to more than one path. Likewise, a Drupal URL can't be mapped to more than one alias.</p>

<h3>Permissions</h3>
<p>Two permissions are related to URL aliasing: <em>create url aliases</em> and <em>administer url aliases</em>.</p>
<ol><li><strong>create url aliases</strong> - Allows users to create aliases for nodes. Enabling this permission will display a path field to the user in any node form, allowing them to enter an alias for that node. They will be able to edit/delete the alias after it is created using the same form.</li><li><strong>administer url aliases</strong> - Allows users to access the alias administration interface. They must also have the <em>access administration pages</em> permission set as well. This interface displays all aliases and provides a way to create and modify them. This is also the location to build aliases for things other than nodes. For example, you can create an alias for a taxonomy URL or even re-map the admin path (although the original admin path will still be accessible since aliases do not cancel out original paths).</li></ol>

<h3>Mass URL aliasing</h3>
<p>Drupal also comes with user defined mass URL aliasing capabilities. You might like to see completely different URLs used by Drupal, or even URLs translated to the visitors' native language, in which case this feature is handy. Only an administrator with access to the website source code can set up this kind of aliases. You can define a <code>conf_url_rewrite</code> function in conf.php, following this example:</p>
<pre>
function conf_url_rewrite(\$path, \$mode = 'incoming') {
  if (\$mode == 'incoming') { // URL coming from a client
    return preg_replace('!^display/(\\d+)\$!', 'node/view/\\1', \$path);
  }
  else { // URL going out to a client
    \$aliased = preg_replace('!^node/view/(\\d+)\$!', 'display/\\1', \$path);
    if (\$aliased != \$path) { return \$aliased; }
  }
}
</pre>
<p>This function will shorten every <code>node/view/\$node_id</code> type of URL to <code>display/\$node_id</code>. Individual URL aliases defined on the browser interface of Drupal take precedence, so if you have the 'contact' page alias from the example above, then the <code>display/3</code> alias will not be effective when outgoing links are created. Incoming URLs however always work with the mass URL aliased variant. Only the 'incoming' and 'outgoing' modes are supposed to be supported by your <code>conf_url_rewrite</code> function.</p>
<p>You cannot only use this feature to shorten the URLs, or to translate them to you own language, but also to add completely new subURLs to an already existing module's URL space, or to compose a bunch of existing stuff together to a common URL space. You can create a <code>news</code> section for example aliasing nodes and taxonomy overview pages falling under a 'news' vocabulary, thus having <code>news/15</code> and <code>news/sections/3</code> instead of <code>node/view/15</code> and <code>taxonomy/view/or/3</code>. You need extensive knowledge of Drupal's inner workings and regular expressions though to make such advanced aliases.</p>");
      break;
  }

  return $output;
}

function path_link($type, $node = NULL) {
  if ($type == "system" && user_access("administer url aliases")) {
    menu("admin/path", t("url aliasing"), "path_admin", 4);
    menu("admin/path/add", t("new alias"), "path_admin");
    menu("admin/path/help", t("help"), "path_admin", 9);
  }
}

function path_nodeapi(&$node, $op, $arg) {
  if (user_access("create url aliases") || user_access("administer url aliases")) {

    switch ($op) {
      case "validate":
        // is_null provides a mechanism for us to determine if this is the first
        // viewing of the form.  If it is the first time, load the alias, if it isn't
        // (i.e., user has clicked preview) let them work with their current form alias.
        if (is_null($node->path)) {
          $node->path = drupal_get_path_alias("node/view/$node->nid");
        }
        else {
          $node->path = trim($node->path);
          if ($node->path && !valid_url($node->path)) {
            $error["path"] = t("The path is invalid.");
            return $error;
          }
          else if (db_result(db_query("SELECT COUNT(dst) FROM {url_alias} WHERE dst = '%s' AND src != '%s'", $node->path, "node/view/$node->nid"))) {
            $error["path"] = t("The path is already in use.");
            return $error;
          }
        }
        break;

      case "form pre":
        return form_textfield(t("Path alias"), "path", $node->path, 60, 250, t("Optionally specify an alternative URL by which this node can be accessed.  For example, type 'about' when writing an about page.  Use a relative path and don't add a trailing slash or the URL alias won't work.") . theme_error($arg["path"]));

      case "insert":
        /*
        ** Don't try to insert if path is NULL.  We may have already set
        ** the alias ahead of time.
        */
        if ($node->path) {
          path_set_alias("node/view/$node->nid", $node->path);
        }
        break;
      case "update":
        path_set_alias("node/view/$node->nid", $node->path);
        break;

      case "delete":
        if ($alias = drupal_get_path_alias("node/view/$node->nid")) {
          path_set_alias("node/view/$node->nid");
        }
        break;
    }
  }
}

function path_perm() {
  return array("create url aliases", "administer url aliases");
}

function path_overview() {
  $sql = "SELECT * FROM {url_alias}";
  $header = array(
    array("data" => t("alias"), "field" => "dst", "sort" => "asc"),
    array("data" => t("normal"), "field" => "src"),
    array("data" => t("operations"), "colspan" => 2)
  );
  $sql .= tablesort_sql($header);
  $result = pager_query($sql, 50);

  while ($data = db_fetch_object($result)) {
    $rows[] = array($data->dst, $data->src, l(t("edit"), "admin/path/edit/$data->pid"), l(t("delete"), "admin/path/delete/$data->pid"));
  }

  if ($pager = theme("pager", NULL, 50, 0, tablesort_pager())) {
    $rows[] = array(array("data" => $pager, "colspan" => "4"));
  }

  if (!$rows) {
    $rows[] = array(array("data" => t("No URL aliases available."), "colspan" => "4"));
  }

  return theme("table", $header, $rows);
}

function path_load($pid) {
  return db_fetch_array(db_query("SELECT * FROM {url_alias} WHERE pid = '%d'", $pid));
}

function path_delete($pid) {
  db_query("DELETE FROM {url_alias} WHERE pid = '%d'", $pid);
  drupal_set_message(t("the alias has been deleted."));
}

function path_save($edit) {
  $src = $edit["src"];
  $dst = $edit["dst"];
  $pid = $edit["pid"];

  if (!valid_url($src)) {
    $error = t("the normal path '%src' is invalid.", array("%src" => $src));
  }

  if (db_result(db_query("SELECT COUNT(src) FROM {url_alias} WHERE pid != '%d' AND src = '%s'", $pid, $src))) {
    $error = t("the normal path '%src' is already aliased.", array("%src" => $src));
  }

  if (!valid_url($dst)) {
    $error = t("the alias '%dst' is invalid.", array("%dst" => $dst));
  }

  if (db_result(db_query("SELECT COUNT(dst) FROM {url_alias} WHERE pid != '%d' AND dst = '%s'", $pid, $dst))) {
    $error = t("the alias '%dst' is already in use.", array("%dst" => $dst));
  }

  if ($error) {
    drupal_set_message($error, 'error');
    return path_form($edit, $error);
  }
  else {
    /*
    ** Normally, you would use path_set_alias to update the paths table,
    ** but this is a special case.  We want to modify a specific row and the only
    ** way to do that is with pid.
    */

    if ($pid) {
      db_query("UPDATE {url_alias} SET src = '%s', dst = '%s' WHERE pid = '%d'", $src, $dst, $pid);
    }
    else {
      path_set_alias($src, $dst);
    }
  }

  drupal_set_message(t('the alias has been saved.'));
  return  path_overview();
}

?>
