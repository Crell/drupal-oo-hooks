<?php
// $Id$

/**
 * @file
 * Configuration system that lets administrators modify the workings of the site.
 */

/**
 * Implementation of hook_help().
 */
function system_help($section) {
  global $base_url;

  switch ($section) {
    case 'admin/settings':
      return t('General configuration options for your site. Set up the name of the site, e-mail address used in mail-outs, clean URL options, caching, etc.');
    case 'admin/themes':
      return t('Select which themes are available to your users and specify the default theme. To configure site-wide display settings, click the "configure" task above. Alternately, to override these settings in a specific theme, click the "configure" link for the corresponding theme.');
    case 'admin/themes/settings':
      return t('These options control the default display settings for your entire site, across all themes. Unless they have been overridden by a specific theme, these settings will be used.');
    case 'admin/themes/settings/'. arg(3):
      $theme = array_pop(explode('.', arg(3), 2));
      return t('These options control the display settings for the <code>%template</code> theme. When your site is displayed using this theme, these settings will be used. By clicking "Reset to defaults," you can choose to use the <a href="%global">global settings</a> for this theme.', array('%template' => $theme, '%global' => url('admin/themes/settings')));
    case 'admin/modules':
      return t("Modules are plugins for Drupal that extend its core functionality.  Here you can select which modules are enabled.  Click on the name of the module in the navigation menu for their individual configuration pages.  Once a module is enabled, new <a href=\"%permissions\">permissions</a> might be made available.  Modules can automatically be temporarily disabled to reduce server load when your site becomes extremely busy by checking throttle.  The auto-throttle functionality must be enabled on the <a href=\"%throttle\">throttle configuration page</a> after having enabled the throttle module.", array('%permissions' => url('admin/user/configure/permission'), '%throttle' => url('admin/settings/throttle')));
    case 'admin/help#system':
      return t("
      <p>Drupal comes with system-wide defaults but the setting-module provides control over many Drupal preferences, behaviours including visual and operational settings.</p>
      <h3><a id=\"cron\">Cron</a></h3>
      <p>Some modules require regularly scheduled actions, such as cleaning up logfiles.  Cron, which stands for chronograph, is a periodic command scheduler executing commands at intervals specified in seconds.  It can be used to control the execution of daily, weekly and monthly jobs (or anything with a period measured in seconds).   Automating tasks is one of the best ways to keep a system running smoothly, and if most of your administration does not require your direct involvement, cron is an ideal solution.</p>
      <p>Whenever %cron-link is accessed, cron will run: it calls the _cron hook in each module allowing the module to run tasks if they have not been executed in the last <em>n</em> seconds, where n is the period of that task.  When all the tasks are finished, cron is done.</p>
      <p>The recommended way to set up your cron system is to set up a Unix/Linux crontab entry (see \"man crontab\") that frequently visits %cron-link.  Note that cron does not guarantee the commands will be executed at the specified interval.  However, Drupal will try its best to run the tasks as close to the specified intervals as possible.  The more you visit cron.php, the more accurate cron will be.</p>
      <p>If your hosting company does not allow you to set up crontab entries, you can always ask someone else to set up an entry for you. After all, virtually any Unix/Linux machine with access to the internet can set up a crontab entry to frequently visit %cron-link.</p>
      <p>For the Unix/Linux crontab itself, use a browser like <a href=\"%lynx\">lynx</a> or <a href=\"%wget\">wget</a> but make sure the process terminates: either use <code>/usr/bin/lynx -source %base_url/cron.php</code> or <code>/usr/bin/wget -o /dev/null -O /dev/null %cron-link</code>.  Take a look at the example scripts in the <code>scripts</code>-directory. Make sure to adjust them to fit your needs.  A good crontab line to run the cron script once every hour would be:
      <pre>     00 * * * * /home/www/drupal/scripts/cron-lynx.sh</pre>
      Note that it is essential to access <code>cron.php</code> using a browser on the web site's domain; do not run it using command line PHP and avoid using <code>localhost</code> or <code>127.0.0.1</code> or some of the environment variables will not be set correctly and features may not work as expected.</p>
      <h3><a id=\"cache\">Cache</a></h3>
      <p>Drupal has a caching mechanism which stores dynamically generated web pages in a database.  By caching a web page, Drupal does not have to create the page each time someone wants to view it, instead it takes only one SQL query to display it, reducing response time and the server's load.  Only pages requested by \"anonymous\" users are cached.  In order to reduce server load and save bandwidth, Drupal stores and sends cached pages compressed.</p>", array('%base_url' => $base_url, '%cron-link' => "<a href=\"$base_url/cron.php\">$base_url/cron.php</a>", '%lynx' => 'http://lynx.browser.org', '%wget' => 'http://www.gnu.org/software/wget/wget.html' ));
    case 'admin/modules#description':
      return t('Configuration system that lets administrators modify the workings of the site.');
  }
}

/**
 * Menu callback; presents system-specific help text from admin/help.
 */
function system_help_page() {
  print theme('page', system_help('admin/help#system'));
}

/**
 * Implementation of hook_perm().
 */
function system_perm() {
  return array('administer site configuration', 'access administration pages', 'bypass input data check');
}

/**
 * Implementation of hook_menu().
 */
function system_menu() {
  $items = array();
  $items[] = array('path' => 'system/files', 'title' => t('file download'),
    'callback' => 'file_download',
    'access' => TRUE,
    'type' => MENU_CALLBACK);

  $access = user_access('administer site configuration');

  // Themes:
  $items[] = array('path' => 'admin/themes', 'title' => t('themes'),
    'callback' => 'system_themes', 'access' => $access);

  $items[] = array('path' => 'admin/themes/select', 'title' => t('select'),
    'callback' => 'system_themes', 'access' => $access,
    'type' => MENU_DEFAULT_LOCAL_TASK, 'weight' => -1);

  $items[] = array('path' => 'admin/themes/settings', 'title' => t('configure'),
    'callback' => 'system_theme_settings', 'access' => $access,
    'type' => MENU_LOCAL_TASK);

  // Theme configuration subtabs
  $items[] = array('path' => 'admin/themes/settings/global', 'title' => t('global settings'),
    'callback' => 'system_theme_settings', 'access' => $access,
    'type' => MENU_DEFAULT_LOCAL_TASK, 'weight' => -1);

  foreach (list_themes() as $theme) {
     $path = str_replace('/', '.', $theme->name);
     $items[] = array('path' => 'admin/themes/settings/'. $path, 'title' => basename($theme->name),
     'callback' => 'system_theme_settings', 'access' => $access,
     'type' => MENU_LOCAL_TASK);
  }

  // Modules:
  $items[] = array('path' => 'admin/settings', 'title' => t('settings'),
    'callback' => 'system_site_settings', 'access' => $access);
  foreach (module_list() as $name) {
    if (module_hook($name, 'settings')) {
      $items[] = array('path' => 'admin/settings/'. $name, 'title' => t($name));
    }
  }
  $items[] = array('path' => 'admin/modules', 'title' => t('modules'),
    'callback' => 'system_modules', 'access' => $access);

  return $items;
}

/**
 * Implementation of hook_user().
 *
 * Allows users to individually set their theme and time zone.
 */
function system_user($type, $edit, &$user, $category = NULL) {
  if ($type == 'form' && $category == 'account') {
    $allthemes = list_themes();

    // list only active themes
    foreach ($allthemes as $key => $theme) {
      if ($theme->status) {
        $themes[$key] = $theme;
      }
    }

    if (count($themes) > 1) {
      $rows = array();
      foreach ($themes as $key => $value) {
        $row = array();

        // Screenshot column.
        $screenshot = dirname($value->filename) .'/screenshot.png';
        $row[] = file_exists($screenshot) ? theme('image', $screenshot, t('Screenshot for %theme theme', array('%theme' => $value->name)), '', 'class="screenshot"', false) : t('no screenshot');

        // Information field.
        $field = '<strong>'. basename($value->name) .'</strong>';
        $row[] = $field;

        // Reset to follow site default theme if user selects the site default
        if ($key == variable_get('theme_default', 'bluemarine')) {
          $key = '';
          if ($edit['theme'] == variable_get('theme_default', 'bluemarine')) {
            $edit['theme'] = '';
          }
        }

        // Selected column.
        $row[] = array('data' => form_radio('', 'theme', $key, ($edit['theme'] == $key) ? 1 : 0), 'align' => 'center');

        $rows[] = $row;
      }
      $header = array(t('Screenshot'), t('Name'), t('Selected'));
      $data[] = array('title' => t('Theme settings'), 'data' => form_item('', theme('table', $header, $rows), t('Selecting a different theme will change the look and feel of the site.')), 'weight' => 2);
    }

    if (variable_get('configurable_timezones', 1)) {
      $zones = _system_zonelist();
      $data[] = array('title' => t('Locale settings'), 'data' => form_select(t('Time zone'), 'timezone', strlen($edit['timezone']) ? $edit['timezone'] : variable_get('date_default_timezone', 0), $zones, t('Select your current local time. Dates and times throughout this site will be displayed using this time zone.')), 'weight' => 2);
    }
    return $data;
  }
}

function _system_zonelist() {
  $timestamp = time();
  $zonelist = array(-11, -10, -9.5, -9, -8, -7, -6, -5, -4, -3.5, -3, -2, -1, 0, 1, 2, 3, 3.5, 4, 5, 5.5, 5.75, 6, 6.5, 7, 8, 9, 9.5, 10, 10.5, 11, 11.5, 12, 12.75, 13, 14);
  $zones = array();
  foreach ($zonelist as $offset) {
    $zone = $offset * 3600;
    $zones[$zone] = format_date($timestamp, 'custom', variable_get('date_format_long', 'l, F j, Y - H:i') . ' O', $zone);
  }
  return $zones;
}

function system_view_general() {
  global $conf;

  // general settings:
  $group  = form_textfield(t('Name'), 'site_name', variable_get('site_name', 'drupal'), 70, 70, t('The name of this web site.'));
  $group .= form_textfield(t('E-mail address'), 'site_mail', variable_get('site_mail', ini_get('sendmail_from')), 70, 128, t('A valid e-mail address for this website, used by the auto-mailer during registration, new password requests, notifications, etc.'));
  $group .= form_textfield(t('Slogan'), 'site_slogan', variable_get('site_slogan', ''), 70, 128, t('The slogan of this website. Some themes display a slogan when available.'));
  $group .= form_textarea(t('Mission'), 'site_mission', variable_get('site_mission', ''), 70, 5, t('Your site\'s mission statement or focus.'));
  $group .= form_textarea(t('Footer message'), 'site_footer', variable_get('site_footer', ''), 70, 5, t('This text will be displayed at the bottom of each page.  Useful for adding a copyright notice to your pages.'));
  $group .= form_textfield(t('Anonymous user'), 'anonymous', variable_get('anonymous', 'Anonymous'), 70, 70, t('The name used to indicate anonymous users.'));
  $group .= form_textfield(t('Default front page'), 'site_frontpage', variable_get('site_frontpage', 'node'), 70, 70, t('The home page displays content from this relative URL.  If you are not using clean URLs, specify the part after "?q=".  If unsure, specify "node".'));
  $group .= form_textfield(t('Default 403 (access denied) page'), 'site_403', variable_get('site_403', ''), 70, 70, t('This page is displayed when the requested document is denied to the current user.  If you are not using clean URLs, specify the part after "?q=". If unsure, specify nothing.'));
  $group .= form_textfield(t('Default 404 (not found) page'), 'site_404', variable_get('site_404', ''), 70, 70, t('This page is displayed when no other content matches the requested document.  If you are not using clean URLs, specify the part after "?q=". If unsure, specify nothing.'));
  $group .= form_radios(t('Clean URLs'), 'clean_url', variable_get('clean_url', 0), array(t('Disabled'), t('Enabled')), t('Enable or disable clean URLs.  If enabled, you\'ll need <code>ModRewrite</code> support.  See also the <code>.htaccess</code> file in Drupal\'s top-level directory.'));

  // watchdog setting:
  $period = drupal_map_assoc(array(3600, 10800, 21600, 32400, 43200, 86400, 172800, 259200, 604800, 1209600, 2419200), 'format_interval');
  $period['1000000000'] = t('Never');
  $group .= form_select(t('Discard log entries older than'), 'watchdog_clear', variable_get('watchdog_clear', 604800), $period, t('The time watchdog entries should be kept.  Older entries will be automatically discarded.  Requires crontab.'));

  $output = form_group(t('General settings'), $group);

  // caching:
  $group  = form_radios(t('Cache support'), 'cache', variable_get('cache', 0), array(t('Disabled'), t('Enabled')), t('Enable or disable the caching of rendered pages.  When caching is enabled, Drupal will flush the cache when required to make sure updates take effect immediately.  Check the <a href="%documentation">cache documentation</a> for information on Drupal\'s cache system.', array('%documentation' => url('admin/help', NULL, NULL, 'cache'))));

  $output .= form_group(t('Cache settings'), $group);

  // file system:
  $directory_path = variable_get('file_directory_path', 'files');
  file_check_directory($directory_path, FILE_CREATE_DIRECTORY, 'file_directory_path');

  $directory_temp = variable_get('file_directory_temp', FILE_DIRECTORY_TEMP);
  file_check_directory(file_create_path($directory_temp), FILE_CREATE_DIRECTORY, 'file_directory_temp');

  $group = form_textfield(t('File system path'), 'file_directory_path', $directory_path, 70, 255, t('A file system path where the files will be stored. This directory has to exist and be writable by Drupal. If the download method is set to public this directory has to be relative to Drupal installation directory, and be accessible over the web. When download method is set to private this directory should not be accessible over the web. Changing this location after the site has been in use will cause problems so only change this setting on an existing site if you know what you are doing.'));
  $group .= form_textfield(t('Temporary directory'), 'file_directory_temp', $directory_temp, 70, 255, t('Location where uploaded files will be kept during previews. Relative paths will be resolved relative to the file system path.'));
  $group .= form_radios(t('Download method'), 'file_downloads', variable_get('file_downloads', FILE_DOWNLOADS_PUBLIC), array(FILE_DOWNLOADS_PUBLIC => t('Public - files are available using http directly.'), FILE_DOWNLOADS_PRIVATE => t('Private - files are transferred by Drupal.')), t('This setting can be changed at any time, however, all download URLs will change and there may be unexpected problems so it is not recommended.'));
  $output .= form_group(t('File system settings'), $group);

  // date settings:
  $zones = _system_zonelist();

  // date settings: possible date formats
  $dateshort = array('m/d/Y - H:i', 'd/m/Y - H:i', 'Y/m/d - H:i',
           'm/d/Y - g:ia', 'd/m/Y - g:ia', 'Y/m/d - g:ia',
           'M j Y - H:i', 'j M Y - H:i', 'Y M j - H:i',
           'M j Y - g:ia', 'j M Y - g:ia', 'Y M j - g:ia');
  $datemedium = array('D, m/d/Y - H:i', 'D, d/m/Y - H:i', 'D, Y/m/d - H:i',
          'F j, Y - H:i', 'j F, Y - H:i', 'Y, F j - H:i',
          'D, m/d/Y - g:ia', 'D, d/m/Y - g:ia', 'D, Y/m/d - g:ia',
          'F j, Y - g:ia', 'j F, Y - g:ia', 'Y, F j - g:ia');
  $datelong = array('l, F j, Y - H:i', 'l, j F, Y - H:i', 'l, Y,  F j - H:i',
        'l, F j, Y - g:ia', 'l, j F, Y - g:ia', 'l, Y,  F j - g:ia');

  // date settings: construct choices for user
  foreach ($dateshort as $f) {
    $dateshortchoices[$f] = format_date(time(), 'custom', $f);
  }
  foreach ($datemedium as $f) {
    $datemediumchoices[$f] = format_date(time(), 'custom', $f);
  }
  foreach ($datelong as $f) {
    $datelongchoices[$f] = format_date(time(), 'custom', $f);
  }

  $group  = form_select(t('Default time zone'), 'date_default_timezone', variable_get('date_default_timezone', 0), $zones, t('Select the default site time zone.'));
  $group .= form_radios(t('Configurable time zones'), 'configurable_timezones', variable_get('configurable_timezones', 1), array(t('Disabled'), t('Enabled')), t('Enable or disable user-configurable time zones.  When enabled, users can set their own time zone and dates will be updated accordingly.'));
  $group .= form_select(t('Short date format'), 'date_format_short', variable_get('date_format_short', $dateshort[0]), $dateshortchoices, t('The short format of date display.'));
  $group .= form_select(t('Medium date format'), 'date_format_medium', variable_get('date_format_medium', $datemedium[0]), $datemediumchoices, t('The medium sized date display.'));
  $group .= form_select(t('Long date format'), 'date_format_long', variable_get('date_format_long', $datelong[0]), $datelongchoices, t('Longer date format used for detailed display.'));
  $group .= form_select(t('First day of week'), 'default_firstday', variable_get('default_firstday', 0), array(0 => t('Sunday'), 1 => t('Monday'), 2 => t('Tuesday'), 3 => t('Wednesday'), 4 => t('Thursday'), 5 => t('Friday'), 6 => t('Saturday')), t('The first day of the week for calendar views.'));

  $output .= form_group(t('Date settings'), $group);

  return $output;
}

/**
 * Inventory theme engines and insert entries for them into the system table
 */
function system_theme_engine_inventory($directory) {
  $engines = array();

  // Remove all theme engines from the system table
  db_query('DELETE FROM {system} WHERE type = \'%s\'', 'theme_engine');

  // Find theme engines in the directory and insert into database
  $files = file_scan_directory($directory. '/engines', '\.engine$');

  foreach ($files as $filename => $file) {
    module_set_filename($file->name, $filename);
    module_load($file->name);

    $info->name = $file->name;
    $info->filename = $file->filename;
    $engines[$info->name] = $info;

    db_query('INSERT INTO {system} (name, type, filename, status, throttle, bootstrap) VALUES (\'%s\', \'%s\', \'%s\', %d, %d, %d)', $info->name, 'theme_engine', $filename, 1, 0, 0);
  }
  return $engines;
}

/**
 * Retrieves an array of a particular type of files (specified by $type) in a particular $directory
 * and their current status in the system table.
 */
function system_get_files($search, $type, $directory) {
  // Find files in the directory.
  $files = file_scan_directory($directory, $search);

  return $files;
}

/**
 * Retrieves the current status of an array of files in the system table.
 */
function system_get_files_database(&$files, $type) {
  // Extract current files from database.
  $result = db_query('SELECT filename, type, status, throttle FROM {system} WHERE type = \'%s\'', $type);
  while ($file = db_fetch_object($result)) {
    if (is_object($files[$file->filename])) {
      foreach ($file as $key => $value) {
        $files[$file->filename]->$key = $value;
      }
    }
  }
}

/**
 * Obtains information about each theme in the $files array
 * Also updates the system table
 */
function system_obtain_theme_info($files, $directory) {
  foreach ($files as $filename => $file) {
    if ($file->theme) {
      // file is a style
      $info->description = $file->theme;
      $info->style = TRUE;
    }

    if (strpos($filename, '.theme')) {
      // file is a theme
      module_set_filename($file->name, $filename);
      module_load($file->name);
      $info->description = '';
      $info->prefix = basename($filename, '.theme');
    }
    elseif ($info->style && !$file->engine) {
      $info->prefix = $info->description;
    }
    else {
      // file is a template
      $info->description = $info->style ? $info->description : $file->engine;
      $info->template = TRUE;
      $info->prefix = basename($file->engine, '.engine');
    }

    $info->filename = $filename;
    $info->path = pathinfo($info->filename);
    $info->name = str_replace(array($directory .'/'), '', $info->path['dirname']);
    $info->shortname = basename($info->name);
    $info->screenshot = dirname($info->filename) .'/screenshot.png';

    $info->status = $file->status;

    $themes[$info->name] = $info;

    // Update the contents of the system table:
    db_query('DELETE FROM {system} WHERE filename = \'%s\' AND type = \'%s\'', $info->filename, 'theme');
    db_query('INSERT INTO {system} (name, description, type, filename, status, throttle, bootstrap) VALUES (\'%s\', \'%s\', \'%s\', \'%s\', %d, %d, %d)', $info->name, $info->description, 'theme', $info->filename, $info->status, 0, 0);
  }
  return $themes;
}

/**
 * Collect data about all currently available themes
 */
function system_theme_data($directory) {
  // Find theme engines
  $engines = system_theme_engine_inventory($directory);

  // Get current list of themes and their present status in the system table.
  $files = system_get_files('\.theme$', 'theme', $directory);

  // Add templates to the site listing
  foreach ($engines as $engine) {
    foreach (call_user_func($engine->name .'_templates', $directory) as $template) {
      $template_files[$template->filename] = $template;
      $template_files[$template->filename]->engine = $engine->filename;
      foreach ($files as $file) {
        // do not double-insert templates with theme files in their directory
        if (dirname($template->filename) == dirname($file->filename)) {
          unset($template_files[$template->filename]);
        }
      }
    }
  }
  $files = array_merge($files, $template_files);

  // Find styles in each theme's directory.
  foreach ($files as $file) {
    foreach (system_get_files("style.css$", 'theme', dirname($file->filename)) as $style) {
      // do not double-insert themes with css files in their directory
      if (dirname($style->filename) != dirname($file->filename)) {
        $style_files[$style->filename] = $style;
        $path = pathinfo($file->filename);
        $style_files[$style->filename]->theme = str_replace(array($directory .'/'), '', $path['dirname']);
        if ($file->engine) {
          $style_files[$style->filename]->engine = $file->engine;
        }
      }
    }
  }
  $files = array_merge($files, $style_files);

  // Extract current files from database.
  system_get_files_database($files, 'theme');

  // Build an array of information about each theme for use in displaying the selection table.
  return system_obtain_theme_info($files, $directory);
}

/**
 * Generate a list of all the available theme/style combinations.
 */
function system_theme_listing() {
  $directory = 'themes';

  $themes = system_theme_data($directory);
  ksort($themes);

  foreach ($themes as $key => $info) {
    $row = array();

    // Screenshot column.
    $row[] = file_exists($info->screenshot) ? theme('image', $info->screenshot, t('Screenshot for %theme theme', array('%theme' => $info->shortname)), '', 'class="screenshot"', false) : t('no screenshot');

    // Information field.
    $field = '<strong>'. $info->shortname .'</strong>';
    $field .= '<br /><em>themes/'. $key .'</em>';
    $row[] = $field;

    // enabled, default, and operations columns
    $row[] = array('data' => form_checkbox('', 'status]['. $info->filename, 1, $info->status), 'align' => 'center');
    $row[] = array('data' => form_radio('', 'theme_default', $info->filename, (variable_get('theme_default', 'bluemarine') == $key) ? 1 : 0), 'align' => 'center');
    if (function_exists($info->prefix .'_settings') || function_exists($info->prefix .'_features')) {
      $row[] = array('data' => l(t('configure'), 'admin/themes/settings/'. str_replace('/', '.', $key)), 'align' => 'center');
    }
    else {
      $row[] = '';
    }
    $rows[] = $row;
  }

  $header = array(t('Screenshot'), t('Name'), t('Enabled'), t('Default'), t('Operations'));
  $output = form_hidden('type', 'theme');
  $output .= theme('table', $header, $rows);
  return $output;
}

/**
 * Generate a list of all the available modules, as well as update the system list.
 */
function system_module_listing() {
  $directory = 'modules';

  // Get current list of modules
  $files = system_get_files('\.module$', 'module', $directory);

  // Extract current files from database.
  system_get_files_database($files, 'module');

  ksort($files);

  $required = array('modules/admin.module', 'modules/block.module', 'modules/filter.module', 'modules/system.module', 'modules/user.module', 'modules/watchdog.module');
  // the throttle mechanism requires additional modules always be enabled
  $throttle_required = array_merge($required, array('modules/statistics.module', 'modules/throttle.module'));

  $header = array(t('Name'), t('Description'), t('Enabled'), t('Throttle'));

  foreach ($files as $filename => $file) {
    module_set_filename($file->name, $filename);
    module_load($file->name);

    $info->name = module_invoke($file->name, 'help', 'admin/modules#name') ? module_invoke($file->name, 'help', 'admin/modules#name') : $file->name;
    $info->description = module_invoke($file->name, 'help', 'admin/modules#description');
    // log the critical hooks implemented by this module
    $bootstrap = 0;
    foreach (bootstrap_hooks() as $hook) {
      if (module_hook($file->name, $hook)) {
        $bootstrap = 1;
        break;
      }
    }

    // Update the contents of the system table:
    db_query('DELETE FROM {system} WHERE filename = \'%s\' AND type = \'%s\'', $filename, 'module');
    db_query('INSERT INTO {system} (name, description, type, filename, status, throttle, bootstrap) VALUES (\'%s\', \'%s\', \'%s\', \'%s\', %d, %d, %d)', $info->name, $info->description, 'module', $filename, $file->status, $file->throttle, $bootstrap);

    $row = array($info->name, $info->description, array('data' => (in_array($filename, $required) ? form_hidden('status]['. $filename, 1) . t('required') : form_checkbox('', 'status]['. $filename, 1, $file->status)), 'align' => 'center'));
    $row[] = array('data' => (in_array($filename, $throttle_required) ? form_hidden('throttle]['. $filename, 0) . t('required') : form_checkbox(NULL, 'throttle]['. $filename, 1, $file->throttle, NULL, module_exist('throttle') ? NULL : array('disabled' => 'disabled'))), 'align' => 'center');
    $rows[] = $row;
  }

  $output  = theme('table', $header, $rows);
  $output .= form_hidden('type', 'module');

  return $output;
}

function system_listing_save($edit = array()) {
  $op = $_POST['op'];
  $edit = $_POST['edit'];

  if ($op == t('Save configuration')) {
    db_query("UPDATE {system} SET status = 0 WHERE type = '%s'", $edit['type']);
    foreach ($edit['status'] as $filename => $status) {
      // Make certain that the default theme is enabled to avoid user error
      if (($edit['type'] == 'theme') && ($edit['theme_default'] == $filename)) {
        $status = 1;
      }

      db_query("UPDATE {system} SET status = %d, throttle = %d WHERE filename = '%s'", $status, $edit['throttle'][$filename], $filename);
    }
    if ($edit['type'] == 'theme') {
      $path = pathinfo($edit['theme_default']);
      $name = str_replace(array('themes/'), '', $path['dirname']);
      variable_set('theme_default', $name);
    }

    cache_clear_all();

    drupal_set_message(t('The configuration options have been saved.'));
    drupal_goto($_GET['q']);
  }
}

function system_settings_form($form) {
  $form .= form_submit(t('Save configuration'));
  $form .= form_submit(t('Reset to defaults'));

  return form($form);
}

function system_settings_save() {
  $op = $_POST['op'];
  $edit = $_POST['edit'];

  if ($op == t('Reset to defaults')) {
    foreach ($edit as $name => $value) {
      variable_del($name);
    }
    drupal_set_message(t('The configuration options have been reset to their default values.'));
  }
  if ($op == t('Save configuration')) {
    foreach ($edit as $name => $value) {
      variable_set($name, $value);
    }
    drupal_set_message(t('The configuration options have been saved.'));
  }
  else {
    return;
  }

  cache_clear_all();
  drupal_goto($_GET['q']);
}

/**
 * Menu callback; displays a listing of all themes.
 */
function system_themes() {
  system_listing_save();
  $form = system_theme_listing();
  $form .= form_submit(t('Save configuration'));
  print theme('page', form($form));
}

/**
 * Menu callback; displays a listing of all modules.
 */
function system_modules() {
  system_listing_save();
  $form = system_module_listing();
  $form .= form_submit(t('Save configuration'));
  print theme('page', form($form));
}

/**
 * Menu callback; displays a module's settings page.
 */
function system_site_settings($module = NULL) {
  system_settings_save();

  if ($module) {
    $form = module_invoke($module, 'settings');
  }
  else {
    $form = system_view_general();
  }

  print theme('page', system_settings_form($form));
}

/**
 * Menu callback; display theme configuration for entire site and individual themes.
 */
function system_theme_settings() {
  system_settings_save();
  // Default settings are defined in _theme_settings() in includes/theme.inc
  $key = str_replace('.', '/', arg(3));
  if ($key) {
    $settings = theme_get_settings($key);
    $var = str_replace('/', '_', 'theme_'. $key .'_settings');
    $themes = system_theme_data('themes');
    $features = function_exists($themes[$key]->prefix .'_features') ? call_user_func($themes[$key]->prefix .'_features') : array();
  }
  else {
    $settings = theme_get_settings('');
    $var = 'theme_settings';
  }

  $form = '';

  // Logo settings
  if ((!$key) || in_array('logo', $features)) {
    $group = form_checkbox(t('Use the default logo'), "$var][default_logo", 1, $settings['default_logo'], t('Check here if you want the theme to use the logo supplied with it.'));
    $group .= form_textfield(t('Path to custom logo'), "$var][logo_path", $settings['logo_path'], 50, 60, t('The path to the file you would like to use as your logo file instead of the default logo.'));
    $form = form_group(t('Logo image settings'), $group);
  }

  // System wide only settings.
  if (!$key) {
    // Menu settings
    $group = form_textarea(t('Primary links'), "$var][primary_links", $settings['primary_links'], 70, 8, t('The HTML code for the primary links. If this field is empty, Drupal will automatically generate a set of links based on which modules are enabled.'));
    $group .= form_textarea(t('Secondary links'), "$var][secondary_links", $settings['secondary_links'], 70, 8, t('The HTML code for the secondary links.'));
    $form .= form_group(t('Menu Settings'), $group, t('Customize the menus that are displayed at the top and/or bottom of the page. This configuration screen is only available in the site wide display configuration.'));

    // Toggle node display.
    $group = '';
    foreach (node_list() as $type) {
      $group .= form_checkbox(node_invoke($type, 'node_name'), "$var][toggle_node_info_$type", 1, $settings["toggle_node_info_$type"]);
    }
    $form .= form_group(t('Display post information on'), $group, t('Enable or disable the "submitted by Username on date" text when displaying posts of the above type'));
  }

  $group = '';

  // Toggle settings
  $toggles = array('toggle_name' => t('Site name'),
        'toggle_search' => t('Search box'),
        'toggle_slogan' => t('Site slogan'),
        'toggle_mission' => t('Mission statement'),
        'toggle_primary_links' => t('Primary links'),
        'toggle_secondary_links' => t('Secondary links'),
        'toggle_node_user_picture' => t('User pictures in posts'),
        'toggle_comment_user_picture' => t('User pictures in comments'));

  foreach ($toggles as $name => $title) {
    if ((!$key) || in_array($name, $features)) {
      $group .= form_checkbox($title, "$var][$name", 1, $settings[$name]);
    }
  }
  if ($group) {
    $form .= form_group(t('Toggle display'), $group, t('Enable or disable the display of certain page elements.'));
  }

  if ($key) {
    // Template-specific settings
    $function = $themes[$key]->prefix .'_settings';
    if (function_exists($function)) {
      $group = $function();
      if (strpos($themes[$key]->description, '.theme') || ($themes[$key]->description == '')) {
        $form .= form_group(t('Theme-specific settings'), $group, t('These settings only exist for the %theme theme and all the styles based on it.', array('%theme' => $themes[$key]->prefix)));
      }
      else {
        $form .= form_group(t('Engine-specific settings'), $group, t('These settings only exist for all the templates and styles based on the %engine theme engine.', array('%engine' => $themes[$key]->prefix)));
      }
    }
  }

  print theme('page', system_settings_form($form));
}

?>
