<?php
// $Id$

function drupal_help($section = "admin/help#drupal") {

  switch ($section) {
    case 'admin/help#drupal':
      return t("<p>The \"Drupal\" module features a capability whereby other drupal sites may <em>call home</em> to report their existence. In turn, this enables a pod of Drupal sites to find, cooperate and advertise each other.</p>
<p>Currently, the main application of this feature is the %drupal-sites page. By default, fresh Drupal installations can use %Drupal as their <em>directory server</em> and report their existence. This reporting occurs via scheduled %xml-rpc pings.</p>
<p>Drupal administrators should simply enable this feature to get listed on the %drupal-sites page. Just set your site's name, e-mail address, slogan and mission statement on the %site-admin page. Then make sure that the field called <em>%xml-rpc-server</em> on the %drupal-settings page is set to %drupal-xml-rpc, and enable this feature using the dropdown directly below.</p>
<p>The listing of your site will occur shortly after your site's next %cron-run. Note that cron.php should be called using the domain name which you want to have listed at %Drupal. For example, don't kick off cron by requesting http://127.0.0.1/cron.php. Instead, use a publicly accessible domain name such as http://www.example.com/cron.php.</p>
<p>Also note that your installation need not use drupal.org as its directory server. For example, this feature is perfectly capable of aggregating pings from all of your departmental drupal installations sites within an enterprise.</p>", array("%drupal-sites" => "<a href=\"http://www.drupal.org/sites\">".t("Drupal sites")."</a>", "%Drupal" => "<a href=\"http://www.drupal.org\">drupal.org</a>", "%xml-rpc" => "<a href=\"http://www.xmlrpc.com/\">XLM-RPC</a>", "%site-admin" => l(t("site administration"), "admin/system"), "%xml-rpc-server" => t("Drupal XML-RPC server"), "%drupal-settings" => l(t("administer") ." &raquo; ". t("configuration") ." &raquo; ". t("modules") ." &raquo; ". t("drupal"), "admin/system/modules/drupal"), "%drupal-xml-rpc" => "http://www.drupal.org/xmlrpc.php", "%cron" => l(t("cron run"), "admin/system/help#cron")));
      break;
    case 'admin/system/modules#description':
      return t("Lets users log in using a Drupal ID and can notify a central server about your site.");
      break;
    case 'admin/system/modules/drupal':
      return t("Using this your Drupal site can \"call home\" and add itself to the Drupal directory. If you want it to add itself to a different directory server you can change the %xml-rpc-setting setting -- but the directory server has to be able to handle Drupal XML. To get all your site information listed go to the %site-admin page and set the site name, the e-mail address, the slogan, and the mission statement.", array("%xml-rpc-setting" => l(t("Drupal XML-RPC server"), "admin/system/modules/drupal"), "%site-admin" => l(t("site configuration"), "admin/system")));
      break;
    case 'user/help#drupal':
      return t("<p>%Drupal is the name of the software which powers %this-site. There are Drupal web sites all over the world, and many of them share their registration databases so that users may freely login to any Drupal site using a single <strong>Drupal ID</strong>.</p>
<p>So please feel free to login to your account here at %this-site with a username from another Drupal site. The format of a Drupal ID is similar to an email address: <strong>username</strong>@<em>server</em>. An example of a valid Drupal ID is <strong>mwlily</strong>@<em>www.drupal.org</em>.</p>", array("%Drupal" => "<a href=\"http://www.drupal.org\">Drupal</a>", "%this-site" => "<em>".variable_get("site_name", "this web site")."</em>"));
      break;
  }

  return $output;
}

function drupal_settings() {
  $output = form_textfield(t("Drupal XML-RPC server"), "drupal_server", variable_get("drupal_server", "http://www.drupal.org/xmlrpc.php"), 55, 128, t("The URL of your root Drupal XML-RPC server."));
  $output .= form_radios(t("Drupal directory"), "drupal_directory", variable_get("drupal_directory", 0), array(t("Disabled"), t("Enabled")), t("If enabled, your Drupal site will make itself known to the Drupal directory at the specified Drupal XML-RPC server. For this to work properly, you must set your site's name, e-mail address, slogan and mission statement. When the \"%xml-rpc-server\" field is set to \"%drupal-xml-rpc\", your web site will get listed on the %drupal-sites page. Requires the cron feature to be enabled.", array("%xml-rpc-server" => t("Drupal XML-RPC server"), "%drupal-xml-rpc" => "http://www.drupal.org/xmlrpc.php", "%drupal-sites" => "<a href=\"http://www.drupal.org/sites\">".t("Drupal sites")."</a>")));

  return $output;
}

function drupal_cron() {
  if (time() - variable_get("drupal_cron_last", 0) > 21600) {
    variable_set("drupal_cron_last", time());

    /*
    ** If this site acts as a Drupal XML-RPC server, delete the sites that
    ** stopped sending "ping" messages.
    */

    db_query("DELETE FROM {directory} WHERE timestamp < '". (time() - 259200) ."'");

    /*
    ** If this site acts as a Drupal XML-RPC client, send a message to the
    ** Drupal XML-RPC server.
    */

    if (variable_get("drupal_directory", 0) && variable_get("drupal_server", 0)) {
      drupal_notify(variable_get("drupal_server", ""));
    }
  }
}

function drupal_directory_ping($arguments) {

  /*
  ** Parse our parameters:
  */

  $argument = $arguments->getparam(0);
  $link = strip_tags($argument->scalarval());
  $argument = $arguments->getparam(1);
  $name = strip_tags($argument->scalarval());
  $argument = $arguments->getparam(2);
  $mail = strip_tags($argument->scalarval());
  $argument = $arguments->getparam(3);
  $slogan = strip_tags($argument->scalarval());
  $argument = $arguments->getparam(4);
  $mission = strip_tags($argument->scalarval());

  /*
  ** Update the data in our database and send back a reply:
  */

  if ($link && $name && $mail && $slogan && $mission) {
    db_query("DELETE FROM {directory} WHERE link = '%s' OR mail = '%s'", $link, $mail);
    db_query("INSERT INTO {directory} (link, name, mail, slogan, mission, timestamp) VALUES ('%s', '%s', '%s', '%s', '%s', %d)", $link, $name, $mail, $slogan, $mission, time());

    watchdog("message", "directory: ping from '$name' ($link)");

    return new xmlrpcresp(new xmlrpcval(1, "int"));
  }
  else {
    return new xmlrpcresp(new xmlrpcval(0, "int"));
  }

}

function drupal_directory_page() {
  $result = db_query("SELECT * FROM {directory} ORDER BY name");

  while ($site = db_fetch_object($result)) {
    $output .= "<a href=\"$site->link\">$site->name</a> - $site->slogan<div style=\"padding-left: 20px;\">$site->mission</div><br />";
  }

  return $output;
}

function drupal_xmlrpc() {
  return array("drupal.site.ping" => array("function" => "drupal_directory_ping"), "drupal.login" => array("function" => "drupal_login"));
}

function drupal_notify($server) {
  global $base_url;

  $url = parse_url($server);

  $client = new xmlrpc_client($url["path"], $url["host"], 80);

  $message = new xmlrpcmsg("drupal.site.ping", array(new xmlrpcval($base_url, "string"), new xmlrpcval(variable_get("site_name", ""), "string"), new xmlrpcval(variable_get("site_mail", ""), "string"), new xmlrpcval(variable_get("site_slogan", ""), "string"), new xmlrpcval(variable_get("site_mission", ""), "string")));

  $result = $client->send($message, 5);

  if (!$result || $result->faultCode()) {
    watchdog("error", "failed to notify '". $url["host"] ."' at '". $url["path"] ."': ". $result->faultString());
  }

}

function drupal_info($field = 0) {
  $info["name"] = "Drupal";
  $info["protocol"] = "XML-RPC";

  if ($field) {
    return $info[$field];
  }
  else {
    return $info;
  }
}

function drupal_auth($username, $password, $server) {

  $message = new xmlrpcmsg("drupal.login", array(new xmlrpcval($username, "string"), new xmlrpcval($password, "string")));

  // TODO remove hard coded Port 80
  // TODO manage server/path such that HTTP_HOST/xml.rpc.php is not assumed
  $client = new xmlrpc_client("/xmlrpc.php", $server, 80);
  $result = $client->send($message, 5);
  if ($result && !$result->faultCode()) {
    $value = $result->value();
    $login = $value->scalarval();
  }

  return $login;
}

function drupal_link($type) {
  if ($type == "system") {
    menu("drupal", t("Drupal"), "drupal_page", 0, MENU_HIDE);
  }
}

function drupal_page() {
  print theme("page", drupal_help("user/help#drupal"), t("Drupal"));
}

function drupal_login($arguments) {
   // an XML-RPC method called by external clients (usually other Drupal instances)
  $argument = $arguments->getparam(0);
  $username = $argument->scalarval();
  $argument = $arguments->getparam(1);
  $password = $argument->scalarval();

  if ($user = user_load(array(name => "$username", "pass" => $password, "status" => 1))) {
    return new xmlrpcresp(new xmlrpcval($user->uid, "int"));
  }
  else {
    return new xmlrpcresp(new xmlrpcval(0, "int"));
  }
}

function drupal_user($type, $edit, $user) {

  $module = "drupal";
  $name = module_invoke($module, "info", "name");
  switch ($type) {
    case "view_private":
      $result = user_get_authname($user, $module);
      $title = t("%name ID", array("%name" => $name));
      if ($result) {
        return form_item($title, $result);
      }
      else {
        // TODO: use a variation of $base_url instead of $HTTP_HOST below
        return form_item($title, "$user->name@". $_SERVER["HTTP_HOST"]);
      }
  }
}

?>
