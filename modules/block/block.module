<?php
// $Id$

function block_help() {
 ?>
  <p>Blocks are the boxes visible in the side bars on the left- and right-hand side of the website.  They are either exported by the engine or by any of the active modules.  To really get your teeth into a Drupal website, you are going to have to deal with blocks and administering blocks in a fairly sophisticated fashion.  This means you will need to understand how the block placement strategy works.</p>
  <p>The placement of blocks is delegated to the administrator. In most cases (i.e., the "custom" blocks), the user has complete control -- using preferences -- over whether or not they are enabled.</p>
  <p>An administrator can lay out and arrange the available blocks to fit in two regions: "left" and "right".  Regions simply contain blocks.  In addition, an administrator can assign each block (within a region) a weight to sort them vertically.  The heavier blocks will sink and the lighter blocks will be positioned nearer the top.</p>
  <p>As mentioned, blocks may be arranged to fit in two regions: left and right.  For theme builders, each region is identified by a corresponding constant: "left" and "right".</p>
  <p>The path setting lets you define which pages you want the specific blocks to be shown. If you leave the path blank it will show on all pages. The path uses a regular expression syntax so remember to escape special characters!<br />Examples:
  <ul><li>Only show on node pages: ^/node\.php</li><li>Only show on the user page: ^/module\.php\?mod=user</li><li>Show in main page and blog page: ^/(index\.php|module\.php\?mod=blog)</li></ul>
  <hr /></p>
  <p>The content of the site can be almost entirely altered through <i>boxes</i>.  Simply put, boxes are small bits of text, HTML or PHP code which will get plugged into the site just like any other block.  Boxes are typically used to add custom blocks to the site.</p>
  <p>Each box consists of a title and an associated block of text, HTML or PHP code that can be as long as you wish and that will 'render' the content of the box.</p>
  <h3>PHP boxes</h3>
  <p>If you know how to script in PHP, PHP boxes are easy to create.  Don't worry if you're no PHP-wizard: simply use HTML boxes instead.</p>
  <p>You can use any piece of PHP code to make up the content of a PHP box: this implies that you can declare and use functions, consult the SQL database, access configuration settings and much more.  A PHP box's code is stored in the database and the engine will dynamically embed the PHP code just-in-time for execution.</p>
  <p>There are however some factors to keep in mind when using and creating PHP boxes: PHP boxes can be extremely useful and flexible, yet they can be dangerous and insecure if not properly used.  If you are not familiar with PHP, SQL or with the site engine, avoid experimenting with PHP boxes because you can - and probably will - corrupt your database or render your site unusable!  If you don't plan to do fancy stuff with boxes then you're probably better off with HTML boxes.</p>
  <p>Remember that the code within each PHP box must be valid PHP code -- including things like correctly terminating statements with a semicolon so that the parser won't die.  It is highly recommended that you develop your boxes separately using a simple test script on top of a test database before migrating to your production environment.</p>
  <p>Note that you can use global variables such as configuration parameters within the scope of a PHP box. Also keep in mind that variables which have been given values in a PHP box will retain these values in the engine or module afterwards.</p>
  <p>You can use the <code>return</code> statement to return the actual content for your block as well.</p>
  <p><u>A basic example:</u></p>
  <p>Given the box with title "Welcome", used to create a "<i>Welcome</i>" box.  The content for this box could be created by using:</p>
  <pre>
   return "Welcome visitor, ... welcome message goes here ...";
  </pre>
  <p>If we are however dealing with a registered user, we can customize the message by using:</p>
  <pre>
   if ($user->uid) {
     return "Welcome $user->name, ... welcome message goes here ...";
   }
   else {
     return "Welcome visitor, ... welcome message goes here ...";
   }
  </pre>
  <p>For more in-depth examples, we recommend that you check the existing boxes and use them as a starting point.</p>

 <?php
}

function block_system($field){
  $system["description"] = t("Controls the boxes that are displayed around the main content.");
  return $system[$field];
}

function block_perm() {
  return array("administer blocks");
}

function block_link($type) {
  if ($type == "admin" && user_access("administer blocks")) {
   $help["block"] = "Blocks are the boxes visible in the side bars on the left- and right-hand side of the website.  They are either exported by the Drupal or by any of the active modules.  Adminstrators can enable or disable block, as well control the block placement by assigning them a region and/or by assigning each block (within a region) a weight to sort them vertically.  The path setting lets you define which pages you want the specific blocks to be shown.";

    menu("admin/block", "block management", block_admin, $help["block"], 3);
    menu("admin/block/add", "create new block", block_admin, $help["block"], 2);
    menu("admin/block/preview", "preview placement", block_admin, $help["block"], 3);
    menu("admin/block/help", "help", block_help, NULL, 9);
  }
}

function block_block($op = "list", $delta = 0) {
  if ($op == "list") {
    $result = db_query("SELECT bid, title, info FROM boxes ORDER BY title");
    while ($block = db_fetch_object($result)) {
      $blocks[$block->bid]["info"] = $block->info;
    }
    return $blocks;
  }
  else {
    $block = db_fetch_object(db_query("SELECT * FROM boxes WHERE bid = '%d'", $delta));
    $data["subject"] = $block->title;
    $data["content"] = ($block->type == 1) ? eval($block->body) : $block->body;
    return $data;
  }
}

function block_admin_save($edit) {
  foreach ($edit as $module => $blocks) {
    foreach ($blocks as $delta => $block) {
      db_query("UPDATE blocks SET region = '%s', status = '%d', custom = '%d', path = '%s', weight = '%d' WHERE module = '%s' AND delta = '%s'",
                $block["region"], $block["status"], $block["custom"], $block["path"], $block["weight"], $module, $delta);
    }
  }

  return t("the block settings have been updated.");
}

/**
 * update blocks db table with blocks currently exported by modules
 *
 * @param   array   $order_by   php array_multisort() style sort ordering, eg. "weight", SORT_ASC, SORT_STRING. see {@link http://www.php.net/manual/en/function.array-multisort.php}
 * @return  array   blocks currently exported by modules, sorted by $order_by
 * @access  private
 */
function _block_rehash($order_by = array("weight")) {
  $result = db_query("SELECT * FROM blocks");
  while ($old_block = db_fetch_object($result)) {
    $old_blocks[$old_block->module][$old_block->delta] = $old_block;
  }

  db_query("DELETE FROM blocks");

  foreach (module_list() as $module) {
    $module_blocks = module_invoke($module, "block", "list");
    if ($module_blocks) {
      foreach ($module_blocks as $delta => $block) {
        $block["module"] = $module;
        $block["delta"]  = $delta;
        if ($old_blocks[$module][$delta]) {
          $block["status"] = $old_blocks[$module][$delta]->status;
          $block["weight"] = $old_blocks[$module][$delta]->weight;
          $block["region"] = $old_blocks[$module][$delta]->region;
          $block["path"]   = $old_blocks[$module][$delta]->path;
          $block["custom"] = $old_blocks[$module][$delta]->custom;
        }
        else {
          $block["status"] = $block["weight"] = $block["region"] = $block["custom"] = 0;
          $block["path"]   = "";
        }

        // reinsert blocks into table
        db_query("INSERT INTO blocks (module, delta, status, weight, region, path, custom) VALUES ('%s', '%s', '%d', '%d', '%d', '%s', '%d')",
                  $block["module"], $block["delta"], $block["status"], $block["weight"], $block["region"], $block["path"], $block["custom"]);

        $blocks[] = $block;

        // build array to sort on
        $order[$order_by[0]][] = $block[$order_by[0]];
      }
    }
  }

  // sort
  array_multisort($order[$order_by[0]], $order_by[1] ? $order_by[1] : SORT_ASC, $order_by[2] ? $order_by[2] : SORT_REGULAR, $blocks);

  return $blocks;
}

function block_admin_display() {

  $blocks = _block_rehash();

  $header = array(t("block"), t("enabled"), t("custom"), t("weight"), t("region"), t("path"), array("data" => "operations", "colspan" => 2));

  foreach ($blocks as $block) {
    if ($block["module"] == "block") {
      $edit = l(t("edit"), "admin/block/edit/". $block["delta"]);
      $delete = l(t("delete"), "admin/block/delete/". $block["delta"]);
    }
    else {
      $edit = "";
      $delete = "";
    }

    $rows[] = array($block["info"], array("data" => form_checkbox(NULL, $block["module"]."][".$block["delta"]."][status", 1, $block["status"]), "align" => "center"), array("data" => form_checkbox(NULL, $block["module"]."][".$block["delta"]."][custom", 1, $block["custom"]), "align" => "center"), form_weight(NULL, $block["module"]."][".$block["delta"]."][weight", $block["weight"]), form_select(NULL, $block["module"]."][".$block["delta"]."][region", $block["region"], array("left", "right")), form_textfield(NULL, $block["module"]."][".$block["delta"]."][path", $block["path"], 10, 255), $edit, $delete);
  }

  $output = table($header, $rows);
  $output .= form_submit("Save blocks");

  print form($output);
}

function block_admin_preview() {

  $result = db_query("SELECT * FROM blocks WHERE status > 0 AND region = 0 ORDER BY weight");
  $lblocks .= "<table border=\"0\" cellpadding=\"2\" cellspacing=\"2\">\n";
  while ($block = db_fetch_object($result)) {
    $block_data = module_invoke($block->module, "block", "list");
    $name = $block_data[$block->delta]["info"];
    $lblocks .= " <tr><td nowrap=\"nowrap\">". ($block->status == 2 ? "<b>$name</b>" : $name) ."</td><td>$block->weight</td></tr>\n";
  }
  $lblocks .= "</table>\n";

  $result = db_query("SELECT * FROM blocks WHERE status > 0 AND region = 1 ORDER BY weight");
  $rblocks .= "<table border=\"0\" cellpadding=\"2\" cellspacing=\"2\">\n";
  while ($block = db_fetch_object($result)) {
    $block_data = module_invoke($block->module, "block", "list");
    $name = $block_data[$block->delta]["info"];
    $rblocks .= " <tr><td nowrap=\"nowrap\">". ($block->status == 2 ? "<b>$name</b>" : $name) ."</td><td>$block->weight</td></tr>\n";
  }
  $rblocks .= "</table>\n";

  $output .= "<h3>layout scheme #1:</h3>\n";
  $output .= "<table border=\"1\" cellpadding=\"2\" cellspacing=\"2\">\n";
  $output .= " <tr><td align=\"center\" colspan=\"3\">header</td></tr>\n";
  $output .= " <tr><td>\n". ($lblocks ? $lblocks : "&nbsp;") ."</td><td width=\"300\">&nbsp;</td><td>\n". ($rblocks ? $rblocks : "&nbsp;") ."</td></tr>\n";
  $output .= " <tr><td align=\"center\" colspan=\"3\">footer</td></tr>\n";
  $output .= "</table>\n";

  $result = db_query("SELECT * FROM blocks WHERE status > 0 ORDER BY weight");
  $blocks .= "<table border=\"0\" cellpadding=\"2\" cellspacing=\"2\">\n";
  while ($block = db_fetch_object($result)) {
    $block_data = module_invoke($block->module, "block", "list");
    $name = $block_data[$block->delta]["info"];
    $blocks .= " <tr><td nowrap=\"nowrap\">". ($block->status == 2 ? "<b>$name</b>" : $name) ."</td><td>$block->weight</td></tr>\n";
  }
  $blocks .= "</table>\n";

  $output .= "<h3>layout scheme #2:</h3>\n";
  $output .= "<table border=\"1\" cellpadding=\"2\" cellspacing=\"2\">\n";
  $output .= " <tr><td align=\"center\" colspan=\"2\">header</td></tr>\n";
  $output .= " <tr><td width=\"400\">&nbsp;</td><td>\n". ($blocks ? $blocks : "&nbsp;") ."</td></tr>\n";
  $output .= " <tr><td align=\"center\" colspan=\"2\">footer</td></tr>\n";
  $output .= "</table>\n";

  $output .= "<h3>layout scheme #3:</h3>\n";
  $output .= "<table border=\"1\" cellpadding=\"2\" cellspacing=\"2\">\n";
  $output .= " <tr><td align=\"center\" colspan=\"2\">header</td></tr>\n";
  $output .= " <tr><td>\n". ($blocks ? $blocks : "&nbsp;") ."</td><td width=\"400\">&nbsp;</td></tr>\n";
  $output .= " <tr><td align=\"center\" colspan=\"2\">footer</td></tr>\n";
  $output .= "</table>\n";

  print $output;
}

function block_box_get($bid) {
  return db_fetch_array(db_query("SELECT * FROM boxes WHERE bid = '%d'", $bid));
}

function block_box_form($edit = array()) {
  $type = array(0 => "HTML", 1 => "PHP");

  $form = form_textfield("Title", "title", $edit["title"], 50, 64);
  $form .= form_textfield("Description", "info", $edit["info"], 50, 64);
  $form .= form_textarea("Body", "body", $edit["body"], 70, 10);
  if (user_access("create php content")) {
    $form .= form_select("Type", "type", $edit["type"], $type);
  }

  if ($edit["bid"]) {
    $form .= form_hidden("bid", $edit["bid"]);
  }

  $form .= form_submit("Save block");

  print form($form);
}

function block_box_save($edit) {
  if (!user_access("create PHP content")) {
    $edit["type"] = 0;
  }

  if ($edit["bid"]) {
    db_query("UPDATE boxes SET title = '%s', body = '%s', info = '%s', type = '%s' WHERE bid = '%d'", $edit["title"], $edit["body"], $edit["info"], $edit["type"], $edit["bid"]);
    return t("the block has been updated.");
  }
  else {
    db_query("INSERT INTO boxes (title, body, info, type) VALUES  ('%s', '%s', '%s', '%s')", $edit["title"], $edit["body"], $edit["info"], $edit["type"]);
    return t("the new block has been added.");
  }
}

function block_box_delete($bid) {
  if ($bid) {
    db_query("DELETE FROM boxes WHERE bid = '%d'", $bid);
    return t("the block has been deleted.");
  }
}

function block_admin() {
  global $edit, $op;

  if (user_access("administer blocks")) {

    if (empty($op)) {
      $op = arg(2);
    }

    switch ($op) {
      case "preview":
        block_admin_preview();
        break;
      case "add":
        block_box_form();
        break;
      case "edit":
        block_box_form(block_box_get(arg(3)));
        break;
      case "delete":
        print status(block_box_delete(arg(3)));
        cache_clear_all();
        block_admin_display();
        break;
      case "Save block":
        print status(block_box_save($edit));
        cache_clear_all();
        block_admin_display();
        break;
      case "Save blocks":
        print status(block_admin_save($edit));
        cache_clear_all();
        // fall through
      default:
        block_admin_display();
    }
  }
  else {
    print message_access();
  }
}

function block_user($type, &$edit, &$user) {
  switch ($type) {
    case "register_form":
      $result = db_query("SELECT * FROM blocks WHERE custom = '%d' ORDER BY module, delta", 1);

      while ($block = db_fetch_object($result)) {
        $form .= form_hidden("block][$block->module][$block->delta", $block->status);
      }

      return $form;
    case "edit_form":
      $result = db_query("SELECT * FROM blocks WHERE custom = '%d' ORDER BY module, delta", 1);

      while ($block = db_fetch_object($result)) {
        $data = module_invoke($block->module, "block", "list");
        if ($data[$block->delta]["info"]) {
          $form .= "<tr><td>".$data[$block->delta]["info"]."</td><td>". form_checkbox(NULL, "block][$block->module][$block->delta", 1, $user->block[$block->module][$block->delta]) ."</td></tr>\n";
        }
      }

      if (isset($form)) {
        return form_item(t("Block configuration"), "<table border=\"0\" cellpadding=\"2\" cellspacing=\"2\">". $form ."</table>", t("Enable the blocks you would like to see displayed in the side bars."));
      }

      break;
    case "edit_validate":
      if (!$edit["block"]) {
        $edit["block"] = array();
      }
      return $edit;
  }
}

?>
