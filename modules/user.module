<?php
// $Id$

session_set_save_handler("sess_open", "sess_close", "sess_read", "sess_write", "sess_destroy", "sess_gc");
session_start();

function user_system($field){
  $system["description"] = t("Enables the user registration and login system.");
  $system["admin_help"] = t("In order to use the full power of Drupal a visitor must sign up for an account. This page lets you setup how a user signs up, logs out, the guidelines from the system about user subscriptions, and the e-mails the system will send to the user.");
  return $system[$field];
}

/*** Session functions *****************************************************/

function sess_open($save_path, $session_name) {
  return 1;
}

function sess_close() {
  return 1;
}

function sess_read($key) {
  global $user;
  $user = user_load(array("sid" => $key, "status" => 1));

  return !empty($user->session) ? $user->session : '';
}

function sess_write($key, $value) {

  db_query("UPDATE users SET hostname = '%s', session = '%s', timestamp = %d WHERE sid = '$key'", $_SERVER["REMOTE_ADDR"], $value, time());

  return '';
}

function sess_destroy($key) {

  db_query("UPDATE users SET hostname = '%s', timestamp = %d, sid = '' WHERE sid = '$key'", $_SERVER["REMOTE_ADDR"], time());
}

function sess_gc($lifetime) {
  return 1;
}

/*** Common functions ******************************************************/

function user_external_load($authname) {
  $arr_uid = db_query("SELECT uid FROM authmap WHERE authname = '%s'", $authname);

  if (db_fetch_object($arr_uid)) {
    $uid = db_result($arr_uid);
    return user_load(array("uid" => $uid));
  }
  else {
    return 0;
  }
}

function user_load($array = array()) {

  /*
  ** Dynamically compose a SQL query:
  */

  $query = "";

  foreach ($array as $key => $value) {
    if ($key == "pass") {
      $query .= "u.$key = '". md5($value) ."' AND ";
    }
    else {
      $query .= "u.$key = '". check_query($value) ."' AND ";
    }
  }
  $result = db_query_range("SELECT u.*, r.name AS role FROM role r INNER JOIN users u ON r.rid = u.rid WHERE $query u.status < 3", 0, 1);

  $user = db_fetch_object($result);
  if ($user->data && $data = unserialize($user->data)) {
    foreach ($data as $key => $value) {
      if (!isset($user->$key)) {
        $user->$key = $value;
      }
    }
  }

  return $user;
}

function user_save($account, $array = array()) {
  /*
  ** Dynamically compose a SQL query:
  */

  $user_fields = user_fields();
  if ($account->uid) {
    $data = unserialize(db_result(db_query("SELECT data FROM users WHERE uid = %d", $account->uid)));
    foreach ($array as $key => $value) {
      if ($key == "pass") {
        $query .= "$key = '". md5($value) ."', ";
      }
      else if (substr($key, 0, 4) !== "auth") {
        if (in_array($key, $user_fields)) {
          // escape '%'s:
          $value = str_replace("%", "%%", $value);
          $query .= "$key = '". check_query($value) ."', ";
        }
        else {
          $data[$key] = $value;
        }
      }
    }
    $query .= "data = '". check_query(serialize($data)) ."', ";

    db_query("UPDATE users SET $query timestamp = %d WHERE uid = %d", time(), $account->uid);

    $user = user_load(array("uid" => $account->uid));
  }
  else {
    $array["timestamp"] = time();

    foreach ($array as $key => $value) {
      if ($key == "pass") {
        $fields[] = check_query($key);
        $values[] = "'". md5($value) ."'";
      }
      else if (substr($key, 0, 4) !== "auth") {
        if (in_array($key, $user_fields)) {
          $fields[] = check_query($key);
          $values[] = "'". check_query($value) ."'";
        }
        else {
          $data[$key] = $value;
        }
      }
    }

    $fields[] = "data";
    $values[] = "'". check_query(serialize($data)) ."'";

    db_query("INSERT INTO users (". implode(", ", $fields) .") VALUES (". implode(", ", $values) .")");

    $user = user_load(array("name" => $array["name"]));
  }

  foreach ($array as $key => $value) {
    if (substr($key, 0, 4) == "auth") {
      $authmaps[$key] = $value;
    }
  }

  if ($authmaps) {
    $result = user_set_authmaps($user, $authmaps);
  }

  return $user;
}

function user_set($account, $key, $value) {
  $account->data[$key] = $value;
  return $account;
}

function user_get($account, $key) {
  return $account->data[$key];
}

function user_validate_name($name) {

  /*
  ** Verify the syntax of the given name:
  */

  if (!$name) return t("You must enter a username.");
  if (ereg("^ ", $name)) return t("The username cannot begin with a space.");
  if (ereg(" \$", $name)) return t("The username cannot end with a space.");
  if (ereg("  ", $name)) return t("The username cannot contain multiple spaces in a row.");
  if (ereg("[^ a-zA-Z0-9@-@]", $name)) return t("The username contains an illegal character.");
  if (ereg('@', $name) && !eregi('@([0-9a-z](-?[0-9a-z])*\.)+[a-z]{2}([zmuvtg]|fo|me)?$', $name)) return t("The username is not a valid authentication ID.");
  if (strlen($name) > 56) return t("The username '%name' is too long: it must be less than 56 characters.", array("%name" => $name));
}

function user_validate_mail($mail) {

  if ($mail && !valid_email_address($mail)) {
    return t("The e-mail address '%mail' is not valid.", array("%mail" => $mail));
  }
}

function user_validate_authmap($account, $authname, $module) {
  $result = db_query("SELECT COUNT(*) from authmap WHERE uid != %d AND authname = '%s'", $account->uid, $authname);
  if (db_result($result) > 0) {
    $name = module_invoke($module, "info", "name");
    return t("The %u ID %s is already taken.", array("%u" => ucfirst($name), "%s" => "<i>$authname</i>"));
  }
}

function user_password($length = 10) {

  /*
  ** Generate a random alphanumeric password.
  */

  // This variable contains the list of allowable characters for the
  // password.  Note that the number 0 and the letter 'O' have been
  // removed to avoid confusion between the two.  The same is true
  // of 'I' and 1.
  $allowable_characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ23456789";
  // We see how many characters are in the allowable list:
  $len = strlen($allowable_characters);

  // Seed the random number generator with the microtime stamp:
  mt_srand((double)microtime() * 1000000);

  // Declare the password as a blank string:
  $pass = "";

  // Loop the number of times specified by $length:
  for ($i = 0; $i < $length; $i++) {

    // Each iteration, pick a random character from the
    // allowable string and append it to the password:
    $pass .= $allowable_characters[mt_rand(0, $len - 1)];
  }

  return $pass;
}

function user_access($string) {

  global $user;
  static $perm;

  if ($user->uid == 1) {
    return 1;
  }

  /*
  ** To reduce the number of SQL queries, we cache the user's permissions
  ** in a static variable.
  */

  if (!$perm) {
    if ($user->uid) {
      $perm = db_result(db_query("SELECT p.perm FROM role r, permission p WHERE r.rid = p.rid AND name = '%s'", $user->role), 0);
    }
    else {
      $perm = db_result(db_query("SELECT p.perm FROM role r, permission p WHERE r.rid = p.rid AND name = 'anonymous user'"), 0);
    }
  }

  return strstr($perm, $string);
}

function user_mail($mail, $subject, $message, $header) {
  if (variable_get("smtp_library", "") && file_exists(variable_get("smtp_library", ""))) {
    include_once variable_get("smtp_library", "");
    return user_mail_wrapper($mail, $subject, $message, $header);
  }
  else {
    /*
    ** Note: if you are having problems with sending mail, or mails look wrong
    ** when they are recieved you may have to modify the str_replace to suit
    ** your systems.
    **  - \r\n will work under dos and windows.
    **  - \n will work for linux, unix and BSDs.
    **  - \r will work for macs.
    **
    ** According to RFC 2646, it's quite rude to not wrap your e-mails:
    **
    ** "The Text/Plain media type is the lowest common denominator of
    ** Internet email, with lines of no more than 997 characters (by
    ** convention usually no more than 80), and where the CRLF sequence
    ** represents a line break [MIME-IMT]."
    **
    ** CRLF === \r\n
    **
    ** http://www.rfc-editor.org/rfc/rfc2646.txt
    **
    */
    return mail($mail, $subject, str_replace("\r", "", $message), $header);
  }
}

function user_deny($type, $mask) {

  $allow = db_fetch_object(db_query("SELECT * FROM access WHERE status = '1' AND type = '%s' AND LOWER('%s') LIKE LOWER(mask)", $type, $mask));

  $deny = db_fetch_object(db_query("SELECT * FROM access WHERE status = '0' AND type = '%s' AND LOWER('%s') LIKE LOWER(mask)", $type, $mask));

  if ($deny && !$allow) {
    return 1;
  }
  else {
    return 0;
  }
}

function user_fields() {
  static $fields;

  if (!$fields) {
    $result = db_query("SELECT * FROM users WHERE uid = 1");
    if (db_num_rows($result)) {
      $fields = array_keys(db_fetch_array($result));
    }
  }

  // Make sure we return the default fields at least
  return is_array($fields) ? $fields: array("uid", "name", "pass", "mail", "homepage", "mode", "sort", "threshold", "theme", "signature", "timestamp", "hostname", "status", "timezone", "rating", "language", "sid", "init", "session", "data", "rid");
}

/*** Module hooks **********************************************************/

function user_perm() {
  return array("administer users");
}

function user_search($keys) {

  $result = db_query_range("SELECT * FROM users WHERE name LIKE '%$keys%'", 0, 20);
  while ($account = db_fetch_object($result)) {
    $find[$i++] = array("title" => $account->name, "link" => (strstr(request_uri(), "admin") ? url("admin/user/edit/$account->uid") : url("user/view/$account->uid")), "user" => $account->name);
  }
  return $find;
}

function user_block($op = "list", $delta = 0) {
  global $user;

  $edit = $_POST["edit"];

  if ($op == "list") {
     $blocks[0]["info"] = t("User login");
     $blocks[1]["info"] = t("User information");
     $blocks[2]["info"] = t("Who's new");

     return $blocks;
  }
  else {
    switch ($delta) {
      case 0:
        if (!$user->uid) {
          /*
          ** For usability's sake, avoid showing two login forms on one
          ** page.
          */

          if (arg(0) == "user" && arg(1) != "view") {
            return;
          }

          $output = "<div class=\"user-login-block\">\n";

          /*
          ** Save the referer.  We record where the user came from such
          ** that we/ can redirect him after having completed the login
          ** form.
          */

          if (empty($edit)) {
            $edit["destination"] = url($_GET["q"]);
          }
          // NOTE: special care needs to be taken because on pages with forms, such as node and comment submission pages, the $edit variable might already be set.

          $form = form_hidden("destination", $edit["destination"]);
          $form .= form_textfield(t("Username"), "name", $edit["name"], 15, 64);
          $form .= form_password(t("Password"), "pass", $pass, 15, 64);

          if (variable_get("user_remember", 0) == 0) {
            $form .= form_checkbox(t("Remember me"), "remember_me", 1, 0, 0);
          }
          elseif (variable_get("user_remember", 1) == 1) {
            $form .= form_hidden("remember_me", 1);
          }

          $form .= form_submit(t("Log in"));

          $output .= form($form, "post", url("user/login"));

          $output .= "</div>\n";

          if (variable_get("user_register", 1)) {
            $items[] = l(t("Create new account"), "user/register", array("title" => t("Create a new user account.")));
          }
          $items[] = l(t("Request new password"), "user/password", array("title" => t("Request new password via e-mail.")));

          $output .= theme("theme_item_list", $items);

          $block["subject"] = t("User login");
          $block["content"] = $output;
          return $block;
        }
        break;
      case 1:
        if ($user->uid) {
          $output = "<div class=\"user-information-block\">\n";
          $output .= theme("theme_menu_list", module_invoke_all("link", "menu.create"));
          $output .= theme("theme_menu_list", module_invoke_all("link", "menu.view"));
          $output .= theme("theme_menu_list", module_invoke_all("link", "menu.settings"));
          $output .= theme("theme_menu_list", module_invoke_all("link", "menu.misc"));
          $output .= "</div>\n";

          $block["subject"] = $user->name;
          $block["content"] = $output;
          return $block;
        }
        break;
      case 2:
        $result = db_query_range("SELECT uid, name FROM users WHERE status != '0' ORDER BY uid DESC", 0, 5);
        while ($account = db_fetch_object($result)) {
          $items[] = l((strlen($account->name) > 15 ? substr($account->name, 0, 15) . '...' : $account->name), "user/view/$account->uid");
        }

        $output = theme("theme_user_list", $items);

        $block["subject"] = t("Who's new");
        $block["content"] = $output;
        return $block;
    }
  }
}

function theme_user_list($items, $title = NULL) {
  return theme("theme_item_list",$items, $title);
}

function theme_menu_list($items, $title = NULL) {
  return theme("theme_item_list",$items, $title);
}

function user_link($type) {

  $links = array();

  if ($type == "page") {
    $links[] = l(t("user account"), "user", array("title" => t("Create a user account, request a new password or edit your account settings.")));
  }

  if ($type == "menu.settings") {
    $links[] = l(t("edit account"), "user/edit", array("title" => t("View and edit your account information.")));
  }

  if ($type == "menu.misc") {
    if (user_access("access administration pages")) {
      $links[] = l(t("administer %a", array("%a" => variable_get("site_name", "drupal"))), "admin", array("title" => t("Access administration pages.")));
    }

    $links[] = l(t("logout"), "user/logout", array("title" => t("Logout.")));
  }

  if ($type == "admin" && user_access("administer users")) {
    $help["user"] = t("Drupal allows users to register, login, logout, maintain user profiles, etc.  No participant can use his own name to post content until he signs up for a user account.<br />Click on either the \"username\" or \"edit account\" to edit a user's information.");
    $help["create"] = t("This web page allows the administrators to register a new users by hand.<br />Note:<ul><li>You cannot have a user where either the E-Mail address or the username match another user in the system</li></ul>");
    $help["view"] = t("This page allows you to review and edit any user's profile. To edit a profile click on either the \"username\" or \"edit account\".");
    $help["view-active"] = t("This page allows you to review and edit an active user's profile. To edit a profile click on either the \"username\" or \"edit account\".");
    $help["view-new"] = t("This page allows you to review and edit a new user's profile. To edit a profile click on either the \"username\" or \"edit account\".");
    $help["view-block"] = t("This page allows you to review and edit a blocked user's profile. To edit a profile click on either the \"username\" or \"edit account\".");
    $help["view-role"] = "This page allows you to review and edit a user with role '%role's profile. To edit a profile click on either the \"username\" or \"edit account\".";
    $help["access-overview"] = t("Access rules allow Drupal administrators to choose usernames and E-Mail address that are prevented from using drupal. To enter the mask for E-Mail addresses click on <a href=\"%e-mail\">e-mail rules</a>, for the username mask click on <a href=\"%username\">username rules</a>", array("%e-mail" => url("admin/user/access/mail"), "%username" => url("admin/user/access/user")));
    $help["access-email"] = t("Setup and test the E-Mail access rules. The access function checks if you match a deny and <b>not</b> an allow. If you match <b>only</b> a deny then it is denied. Any other case, such as both a deny and an allow pattern matching, allows the pattern.<br />Notes: <ul><li>To delete a rule click on \"delete rule\".</li><li>The order of the rules does <b>not</b> matter.</li></ul>");
    $help["access-name"] = t("Setup and test the Username access rules. The access function checks if you match a deny and <b>not</b> an allow. If you do then it is denied. Any other case, such as a deny pattern and an allow pattern, allows the pattern.<br />Notes: <ul><li>To delete a rule click on \"delete rule\".</li><li>The order of the rules does <b>not</b> matter.</li></ul>");
    $help["permission"] = t("In this area you will define the <b>permissions</b> for each user role (Role names are defined in <a href=\"%role\">user roles</a>). Each permission describes a fine-grained logical operation, such as being able to access the administration pages, or adding/modifying a user account. You could say a permission represents access granted to a user to perform a set of operations.", array("%role" => url("admin/user/role")));
    $help["role"] = t("Roles allow you to fine tune the security and administration of drupal.  A role defines a group of users that have certain privileges as defined in <a href=\"%permission\">user permissions</a>.  Examples of roles include: anonymous user, authenticated user, moderator, administrator and so on. In this area you will define the <b>names</b> of the various roles. To delete a role choose \"edit role\"<br />By default, Drupal comes with two user roles: <ul><li>Anonymous user: this role is used for users that don't have a user account or that are not authenticated.</li><li>Authenticated user: this role is assigned automatically to authenticated users.  Most registered users will belong to this user role unless specified otherwise.</li></ul>", array("%permission" => url("admin/user/permission")));
    $help["search"] = t("Enter a simple pattern ( '*' may be user as a wildcard match) to search for a username.  For example, one may search for 'br' and Drupal might return 'brian', 'brad', and 'brenda'.");

    menu("admin/user", "user management", "user_admin", $help["user"], 2);
    menu("admin/user/create", "create new account", "user_admin", $help["create"], 1);
    menu("admin/user/account", "view user accounts", "user_admin", $help["view"], 2);
    menu("admin/user/access", "access rules", NULL, $help["access-overview"], 3);
    menu("admin/user/access/mail", "e-mail rules", "user_admin", $help["access-email"]);
    menu("admin/user/access/user", "username rules", "user_admin", $help["access-name"]);
    menu("admin/user/role", "user roles", "user_admin", $help["role"], 4);
    menu("admin/user/permission", "user permissions", "user_admin", $help["permission"], 5);
    menu("admin/user/search", "search accounts", "user_admin", $help["search"], 8);
    menu("admin/user/help", "help", "user_help", NULL, 9);
    menu("admin/user/edit", "edit user account", "user_admin", NULL, 0, 1); // hidden menu
    menu("admin/user/account/0", "active users", "user_admin", $help["view-active"], 1);
    menu("admin/user/account/1", "new users", "user_admin", $help["view-new"], 2);
    menu("admin/user/account/2", "blocked users", "user_admin", $help["view-block"], 3);

    $i = 3;
    foreach (user_roles(1) as $key => $value) {
      $help_msg = t($help["view-role"], array("%role" => $value));
      menu("admin/user/account/". $i++, "users with role '$value'", "user_admin", $help_msg, 4);
    }
  }

  return $links;
}

/*** Authentication methods ************************************************/

function user_get_authname($account, $module) {

  /*
  **  Called by authentication modules in order to edit/view their authmap information.
  */

  $result = db_query("SELECT authname FROM authmap WHERE uid = %d AND module = '%s'", $account->uid, $module);
  return db_result($result);
}


function user_get_authmaps($authname = NULL) {

  /*
  ** Accepts an user object, $account, or an DA name and returns an
  ** associtive array of modules and DA names. Called at external login.
  */

  $result = db_query("SELECT authname, module FROM authmap WHERE authname = '%s'", $authname);
  if (db_num_rows($result) > 0) {
    while ($authmap = db_fetch_object($result)) {
      $authmaps[$authmap->module] = $authmap->authname;
    }
    return $authmaps;
  }
  else {
    return 0;
  }
}

function user_set_authmaps($account, $authmaps) {
  foreach ($authmaps as $key => $value) {
    $module = explode("_", $key, 2);
    if ($value) {
      $result = db_query("SELECT COUNT(*) from authmap WHERE uid = %d AND module = '%s'", $account->uid, $module["1"]);
      if (db_result($result) == 0) {
        $result = db_query("INSERT INTO authmap (authname, uid, module) VALUES ('%s', %d, '%s')", $value, $account->uid, $module[1]);
      }
      else {
        $result = db_query("UPDATE authmap SET authname = '%s' WHERE uid = %d AND module = '%s'", $value, $account->uid, $module["1"]);
      }
    }
    else {
      $result = db_query("DELETE FROM authmap WHERE uid = %d AND module = '%s'", $account->uid, $module["1"]);
    }
  }
  return $result;
}

function user_auth_help_links() {
  $links = array();
  foreach (module_list() as $module) {
    if (module_hook($module, "auth_help")) {
      $links[] = l(module_invoke($module, "info", "name"), "user/help#$module");
    }
  }
  return $links;
}

/*** User features *********************************************************/

function user_login($edit = array(), $msg = "") {
  global $user, $base_url;

  /*
  ** If we are already logged on, go to the user page instead.
  */

  if ($user->uid) {
    drupal_goto(url("user"));
  }

  if (user_deny("user", $edit["name"])) {
    $error = t("The name '%s' has been denied access.", array("%s" => $edit["name"]));
  }
  else if ($edit["name"] && $edit["pass"]) {

    /*
    ** Try to log in the user locally:
    */

    if (!$user) {
      $name = $edit["name"];
      $pass = $edit["pass"];
      $user = user_load(array("name" => $name, "pass" => $pass, "status" => 1));
    }

    /*
    ** Strip name and server from ID:
    */

    if ($server = strrchr($edit["name"], "@")) {
      $name = substr($edit["name"], 0, strlen($edit["name"]) - strlen($server));
      $server = substr($server, 1);
      $pass = $edit["pass"];
    }

    /*
    ** When possible, determine corrosponding external auth source. Invoke source, and login user if successful:
    */

    if (!$user && $server && $result = user_get_authmaps("$name@$server")) {
      if (module_invoke(key($result), "auth", $name, $pass, $server)) {
        $user = user_external_load("$name@$server");
        watchdog("user", "external load: $name@$server, module: ". key($result));
      }
      else {
        $error = t("Invalid password for %s.", array("%s" => "<i>$name@$server</i>"));
      }
    }

     /*
    ** Try each external authentication source in series. Register user if successful.
    */

    else if (!$user && $server) {
      foreach (module_list() as $module) {
        if (module_hook($module, "auth")) {
          if (module_invoke($module, "auth", $name, $pass, $server)) {
            if (variable_get("user_register", 1) == 1 && !user_load(array("name" => "$name@$server"))) { //register this new user
              $user = user_save("", array("name" => "$name@$server", "pass" => user_password(), "init" => "$name@$server", "status" => 1, "authname_$module" => "$name@$server", "rid" => _user_authenticated_id()));
              watchdog("user", "new user: $name@$server ($module ID)", l("edit user", "admin/user/edit/$user->uid"));
              break;
            }
          }
        }
      }
    }

    if ($user->uid) {
      watchdog("user", "session opened for '$user->name'");

      /*
      ** Write session ID to database:
      */

      user_save($user, array("sid" => session_id()));

      /*
      ** If the user wants to be remembered, set the proper cookie such
      ** that the session won't expire.
      */

      $path = preg_replace("/.+\/\/[^\/]+(.*)/", "\$1/", $base_url);
      if ($edit["remember_me"]) {
        setcookie(session_name(), session_id(), time() + 3600 * 24 * 365, $path);
      }
      else {
        setcookie(session_name(), session_id(), FALSE, $path);
      }

      /*
      ** Redirect the user to the page he logged on from.
      */

      drupal_goto($edit["destination"]);
    }
    else {
      if (!$error) {
        $error = t("Sorry.  Unrecognized username or password.") ." ". l(t("Have you forgotten your password?"), "user/password");
      }
      if ($server) {
        watchdog("user", "failed login for '$name@$server': $error");
      }
      else {
        watchdog("user", "failed login for '$name': $error");
      }
    }
  }

  /*
  ** Display error message (if any):
  */

  if ($error) {
    $output .= theme("theme_error", $error);
  }

  /*
  ** Save the referer.  We record where the user came from such that we
  ** can redirect him after having completed the login form.
  */

  if (empty($edit)) {
    $edit["destination"] = url($_GET["q"]);
  }
  $output .= form_hidden("destination", $edit["destination"]);

  /*
  ** Display login form:
  */

  if ($msg) {
    $output .= "<p>$msg</p>";
  }
  if (count(user_auth_help_links()) > 0) {
    $output .= form_textfield(t("Username"), "name", $edit["name"], 30, 64, t("Enter your %s username, or an ID from one of our affiliates: %a.", array("%s" => variable_get("site_name", "local"), "%a" => implode(", ", user_auth_help_links()))));
  }
  else {
    $output .= form_textfield(t("Username"), "name", $edit["name"], 30, 64, t("Enter your %s username.", array("%s" => variable_get("site_name", "local"))));
  }
  $output .= form_password(t("Password"), "pass", $pass, 30, 64, t("Enter the password that accompanies your username."));
  $output .= form_checkbox(t("Remember me"), "remember_me", 1, 0, 0);
  $output .= form_submit(t("Log in"));
  $items[] = l(t("Request new password"), "user/password");
  if (variable_get("user_register", 1)) {
    $items[] = l(t("Create new account"), "user/register");
  }
  $output .= theme("theme_item_list", $items);

  return form($output, "post", url("user"));
}

function _user_authenticated_id() {
  return db_result(db_query("SELECT rid FROM role WHERE name = 'authenticated user'"));
}

function user_logout() {
  global $user;

  if ($user->uid) {
    watchdog("user", "session closed for user '$user->name'");

    /*
    ** Destroy the current session:
    */

    session_destroy();
    unset($user);
  }

  /*
  ** Redirect the user to his personal information page:
  */

  drupal_goto(url());

}

function user_pass($edit = array()) {

  global $base_url;

  if ($edit["name"]) {
    $account = db_fetch_object(db_query("SELECT uid, name, mail FROM users WHERE name = '%s'", $edit["name"]));
    if (!$account) $error = t("Sorry. The username <i>%s</i> is not recognized.", array("%s" => $edit["name"]));
  }
  else if ($edit["mail"]) {
    $account = db_fetch_object(db_query("SELECT uid, name, mail FROM users WHERE mail = '%s'", $edit["mail"]));
    if (!$account) $error = t("Sorry. The e-mail address <i>%s</i> is not recognized.", array("%s" => $edit["mail"]));
  }
  if ($account) {

      $from = variable_get("site_mail", ini_get("sendmail_from"));
      $pass = user_password();

      /*
      ** Save new password:
      */

      user_save($account, array("pass" => $pass));

      /*
      ** Mail new password:
      */

      $variables = array("%username" => $account->name, "%site" => variable_get("site_name", "drupal"), "%password" => $pass, "%uri" => $base_url, "%uri_brief" => substr($base_url, strlen("http://")), "%mailto" => $account->mail, "%date" => format_date(time()));
      $subject = strtr(variable_get("user_mail_pass_subject", _user_mail_text("pass_subject")), $variables);
      $body = strtr(variable_get("user_mail_pass_body", _user_mail_text("pass_body")), $variables);
      $headers = "From: $from\nReply-to: $from\nX-Mailer: Drupal\nReturn-path: $from\nErrors-to: $from";
      $mail_success = user_mail($account->mail, $subject, $body, $headers);

      if ($mail_success) {
        watchdog("user", "mail password: '". $account->name ."' &lt;". $account->mail ."&gt;");
        return t("Your password and further instructions have been sent to your e-mail address.");
      }
      else {
        watchdog("error", "error mailing new password: '". $account->name ."' &lt;". $account->mail ."&gt;");
        return t("Unable to send mail. Please contact the site admin.");
      }
    }
    else {

    // Display error message if necessary.
    if ($error) {
      $output .= theme("theme_error", $error);
    }

    /*
    ** Display form:
    */

    $output .= "<p>". sprintf(t("Enter your username %sor%s your e-mail address."), "<b><i>", "</i></b>") ."</p>";
    $output .= form_textfield(t("Username"), "name", $edit["name"], 30, 64);
    $output .= form_textfield(t("E-mail address"), "mail", $edit["mail"], 30, 64);
    $output .= form_submit(t("E-mail new password"));
    $items[] = l(t("Log in"), "user/login");
    if (variable_get("user_register", 1)) {
      $items[] = l(t("Create new account"), "user/register");
    }
    $output .= theme("theme_item_list", $items);

    return form($output, "post", url("user"));
  }
}

function user_register($edit = array()) {
  global $user, $base_url;

  $edit = $_POST["edit"];
  /*
  ** If we are already logged on, go to the user page instead.
  */

  if ($user->uid) {
    drupal_goto(url("user/edit"));
  }

  if ($edit["name"] && $edit["mail"]) {
    if ($error = user_validate_name($edit["name"])) {
      // do nothing
    }
    else if ($error = user_validate_mail($edit["mail"])) {
      // do nothing
    }
    else if (user_deny("user", $edit["name"])) {
      $error = t("The name '%s' has been denied access.", array("%s" => $edit["name"]));
    }
    else if (user_deny("mail", $edit["mail"])) {
      $error = t("The e-mail address '%s' has been denied access.", array("%s" => $edit["mail"]));
    }
    else if (db_num_rows(db_query("SELECT name FROM users WHERE LOWER(name) = LOWER('%s')", $edit["name"])) > 0) {
      $error = t("The name '%s' is already taken.", array("%s" => $edit["name"]));
    }
    else if (db_num_rows(db_query("SELECT mail FROM users WHERE LOWER(mail) = LOWER('%s') OR LOWER(init) = LOWER('%s')", $edit["mail"], $edit["mail"])) > 0) {
      $error = t("The e-mail address '%s' is already taken.", array("%s" => $edit["mail"]));
    }
    else if (variable_get("user_register", 1) == 0) {
      $error = t("Public registrations have been disabled by the site administrator.");
    }
    else {
      foreach (module_list() as $module) {
        if (module_hook($module, "user")) {
          $result = module_invoke($module, "user", "register_validate", $edit, $user);
          if (is_array($result)) {
            $data = array_merge($data, $result);
          }
          elseif (is_string($result)) {
            $error = $result;
            break;
          }
        }
      }
      if (!$error) {
        $success = 1;
      }
    }
  }

  if ($success) {

    $from = variable_get("site_mail", ini_get("sendmail_from"));
    $pass = user_password();

    // create new user account, noting whether administrator approval is required
    user_role_init();
    // TODO: is this necessary? Won't session_write replicate this?
    unset($edit["session"]);
    $account = user_save("", array_merge(array("name" => $edit["name"], "pass" => $pass, "init" => $edit["mail"], "mail" => $edit["mail"], "rid" => _user_authenticated_id(), "rating" => 0, "status" => (variable_get("user_register", 1) == 1 ? 1 : 0)), $data));
    watchdog("user", "new user: '". $edit["name"] ."' &lt;". $edit["mail"] ."&gt;", l("edit user", "admin/user/edit/$account->uid"));

    $variables = array("%username" => $edit["name"], "%site" => variable_get("site_name", "drupal"), "%password" => $pass, "%uri" => $base_url, "%uri_brief" => substr($base_url, strlen("http://")), "%mailto" => $edit["mail"], "%date" => format_date(time()));

    //the first user may login immediately, and receives a customized welcome e-mail.
    if ($account->uid == 1) {
      user_mail($edit["mail"], t("drupal user account details for %s", array("%s" => $edit["name"])), strtr(t("%username,\n\nYou may now login to %uri using the following username and password:\n\n  username: %username\n  password: %password\n\n". url("user/edit") ."\n\n--drupal"), $variables), "From: $from\nReply-to: $from\nX-Mailer: Drupal\nReturn-path: $from\nErrors-to: $from");
      // This should not be t()'ed. No point as its only shown once in the sites lifetime, and it would be bad to store the password
      $output .= "<p>Welcome to Drupal. You are user #1, which gives you full and immediate access.  All future registrants will receive their passwords via e-mail, so please configure your e-mail settings using the Administration pages.</p><p> Your password is <b>$pass</b>. You may change your password on the next page.</p><p>Please login below.</p>";
      $output .= form_hidden("destination", url("user/edit"));
      $output .= form_hidden("name", $account->name);
      $output .= form_hidden("pass", $pass);
      $output .= form_submit(t("Log in"));
      return form($output);
    }
    else {
      if ($account->status) {
        /*
        ** Create new user account, no administrator approval required:
        */

        $subject = strtr(variable_get("user_mail_welcome_subject", _user_mail_text("welcome_subject")), $variables);
        $body = strtr(variable_get("user_mail_welcome_body", _user_mail_text("welcome_body")), $variables);
        user_mail($edit["mail"], $subject, $body, "From: $from\nReply-to: $from\nX-Mailer: Drupal\nReturn-path: $from\nErrors-to: $from");
        return t("Your password and further instructions have been sent to your e-mail address.");
      }
      else {
        /*
        ** Create new user account, administrator approval required:
        */
        $subject = strtr(variable_get("user_mail_approval_subject", _user_mail_text("welcome_approval_subject")), $variables);
        $body = strtr(variable_get("user_mail_approval_body", _user_mail_text("welcome_approval_body")), $variables);
        user_mail($edit["mail"], $subject, $body, "From: $from\nReply-to: $from\nX-Mailer: Drupal\nReturn-path: $from\nErrors-to: $from");
        user_mail(variable_get("site_mail", ini_get("sendmail_from")), $subject, t("%u has applied for an account.\n\n%uri", array("%u" => $account->name, "%uri" => url("admin/user/edit/$account->uid"))), "From: $from\nReply-to: $from\nX-Mailer: Drupal\nReturn-path: $from\nErrors-to: $from");
        return t("Thank you for applying for an account. Your account is currently pending approval by the site administrator.<br />In the meantime, your password and further instructions have been sent to your e-mail address.");
      }
    }
  }
  else {
    if ($error) {
      $output .= theme("theme_error", $error);
    }
  }

  // display the registration form
  $output .= variable_get("user_registration_help", "");
  $affiliates = user_auth_help_links();
  if (count($affiliates) > 0) {
    $affiliates = implode(", ", $affiliates);
    $output .= "<p>" . t("Note: If you have an account with one of our affiliates (%s), you may ". l("login now", "user/login") ." instead of registering.", array("%s" => $affiliates)) ."</p>";
  }
  $output .= form_textfield(t("Username"), "name", $edit["name"], 30, 64, t("Your full name or your preferred username: only letters, numbers and spaces are allowed."));
  $output .= form_textfield(t("E-mail address"), "mail", $edit["mail"], 30, 64, t("A password and instructions will be sent to this e-mail address, so make sure it is accurate."));
  foreach (module_list() as $module) {
    if (module_hook($module, "user")) {
      $output .= module_invoke($module, "user", "register_form", $edit, $user);
    }
  }
  $output .= form_submit(t("Create new account"));
  $items[] = l(t("Request new password"), "user/password");
  $items[] = l(t("Log in"), "user/login");
  $output .= theme("theme_item_list", $items);

  return form($output);
}


function user_delete() {
  global $user;

  $edit = $_POST["edit"];

  if ($edit["confirm"]) {
    watchdog("user","$user->name deactivated her own account.");
    db_query("UPDATE users SET mail = 'deleted', status = '0' WHERE uid = %d", $user->uid);
    $output .= t("Your account has been deactivated.");
  }
  else {
    $output .= form_item(t("Confirm Deletion"), t("You are about to deactivate your own user account. In addition, your e-mail address will be removed from the database."));
    $output .= form_hidden("confirm", 1);
    $output .= form_submit(t("Delete account"));
    $output = form($output);
  }
  return $output;
}

function user_edit($edit = array()) {
  global $user, $languages;

  if ($user->uid) {
    if ($edit["name"]) {
      if ($error = user_validate_name($edit["name"])) {
        // do nothing
      }
      else if ($error = user_validate_mail($edit["mail"])) {
        // do nothing
      }
      else if (db_num_rows(db_query("SELECT uid FROM users WHERE uid != '$user->uid' AND LOWER(name) = LOWER('%s')", $edit["name"])) > 0) {
        $error = t("The name '%s' is already taken.", array("%s" => $edit["name"]));
      }
      else if ($edit["mail"] && db_num_rows(db_query("SELECT uid FROM users WHERE uid != '$user->uid' AND LOWER(mail) = LOWER('%s')", $edit["mail"])) > 0) {
        $error = t("The e-mail address '%s' is already taken.", array("%s" => $edit["mail"]));
      }
      else if ($user->uid) {
        /*
        ** If required, check that proposed passwords match.  If so,
        ** add new password to $edit.
        */

        if ($edit["pass1"]) {
          if ($edit["pass1"] == $edit["pass2"]) {
            $edit["pass"] = $edit["pass1"];
          }
          else {
            $error = t("The specified passwords do not match.");
          }
        }
        unset($edit["pass1"], $edit["pass2"]);

        /*
        ** Validate input fields to make sure users don't submit
        ** invalid form data.
        */

        if (!user_access("administer users")) {
           if (array_intersect(array_keys($edit), array("rid", "init", "rating", "session"))) {
             watchdog("warning", "detected malicious attempt to alter a protected database field");
           }

           $edit["rid"] = $user->rid;
           $edit["init"] = $user->init;
           $edit["rating"] = $user->rating;
           $edit["session"] = $user->session;
        }

        /*
        ** Have the modules that extend the user information validate
        ** their data.
        */

        foreach (module_list() as $module) {
          if (module_hook($module, "user")) {
            $result = module_invoke($module, "user", "edit_validate", $edit, $user);
          }
          if (is_array($result)) {
            $data = array_merge($data, $result);
          }
          elseif (is_string($result)) {
            $error = $result;
            break;
          }
        }

        if (!$error) {
          /*
          ** Save user information:
          */

          $user = user_save($user, array_merge($edit, $data));

          $output .= t("Your user information changes have been saved.");
        }
      }
    }

    if ($error) {
      $output .= theme("theme_error", $error);
    }

    if (!$edit) {
      $edit = object2array($user);
    }

    $output .= form_textfield(t("Username"), "name", $edit["name"], 30, 55, t("Your full name or your preferred username: only letters, numbers and spaces are allowed."));
    $output .= form_textfield(t("E-mail address"), "mail", $edit["mail"], 30, 55, t("Insert a valid e-mail address.  All e-mails from the system will be sent to this address. The e-mail address is not made public and will only be used if you wish to receive a new password or wish to receive certain news or notifications by e-mail."));

    foreach (module_list() as $module) {
      if (module_hook($module, "user")) {
        $output .= module_invoke($module, "user", "edit_form", $edit, $user);
      }
    }

    $options = "<option value=\"\"". (("" == $key) ? " selected=\"selected\"" : "") .">". t("Default theme") ."</option>\n";
    foreach (theme_list() as $key => $value) {
      $options .= "<option value=\"$key\"". (($edit["theme"] == $key) ? " selected=\"selected\"" : "") .">$key - $value->description</option>\n";
    }

    $output .= form_item(t("Theme"), "<select name=\"edit[theme]\">$options</select>", t("Selecting a different theme will change the look and feel of the site."));
    for ($zone = -43200; $zone <= 46800; $zone += 3600) $zones[$zone] = date(variable_get("date_format_long", "l, F dS, Y - g:ia"), time() - date("Z") + $zone) ." (GMT ". $zone / 3600 .")";
    $output .= form_select(t("Time zone"), "timezone", $edit["timezone"], $zones, t("Select what time you currently have and your time zone settings will be set appropriate."));
    $output .= form_select(t("Language"), "language", $edit["language"], $languages, t("Selecting a different language will change the language of the site."));
    $output .= form_item(t("Password"), "<input type=\"password\" name=\"edit[pass1]\" size=\"12\" maxlength=\"24\" /> <input type=\"password\" name=\"edit[pass2]\" size=\"12\" maxlength=\"24\" />", t("Enter your new password twice if you want to change your current password or leave it blank if you are happy with your current password."));
    $output .= form_submit(t("Save user information"));

    $output = form($output, "post", 0, "enctype=\"multipart/form-data\"");
      // the "enctype" attribute is required to upload files such as avatars
  }
  else {
    $output = user_login();
  }

  return $output;
}

function user_menu() {
  $links[] = l(t("view user information"), "user/view");
  $links[] = l(t("edit user information"), "user/edit");
  $links[] = l(t("delete account"), "user/delete");

  return "<div style=\"text-align: center;\">". implode(" &middot; ", $links) ."</div>";
}

function user_view($uid = 0) {
  global $user;

  if (!$uid) {
    $uid = $user->uid;
  }

  if ($user->uid && $user->uid == $uid) {
    $output = form_item(t("Name"), "$user->name ($user->init)");
    $output .= form_item(t("E-mail address"), $user->mail, t("Please note that only you can see your own e-mail address - it is not publicly visible."));

    foreach (module_list() as $module) {
      if (module_hook($module, "user")) {
        $output .= module_invoke($module, "user", "view_private", "", $user);
      }
    }

    theme("header");
    theme("box", t("User account"), user_menu());
    theme("box", t("View user information"), $output);
    theme("footer");
  }
  else if ($uid && $account = user_load(array("uid" => $uid, "status" => 1))) {
    $output = form_item(t("Name"), $account->name);

    foreach (module_list() as $module) {
      if (module_hook($module, "user")) {
        $output .= module_invoke($module, "user", "view_public", "", $account);
      }
    }

    theme("header");
    theme("box", t("View user information"), $output);
    theme("footer");
  }
  else {
    $output = user_login();
    theme("header");
    theme("box", t("User login"), $output);
    if (variable_get("user_register", 1)) {
      theme("box", t("Create new user account"), user_register());
    }
    theme("box", t("Request new password"), user_pass());
    theme("footer");
  }
}

function user_page() {

  $edit = $_POST["edit"];
  $op = $_POST["op"];

  if (empty($op)) {
    $op = arg(1);
  }

  switch ($op) {
    case t("E-mail new password"):
    case "password":
      theme("header");
      theme("box", t("E-mail new password"), user_pass($edit));
      theme("footer");
      break;
    case t("Create new account"):
    case "register":
      $output = user_register($edit);
      theme("header");
      if (variable_get("user_register", 1)) {
        theme("box", t("Create new account"), $output);
      }
      else {
        print message_access();
      }
      theme("footer");
      break;
    case t("Log in"):
    case "login":
      $output = user_login($edit);
      theme("header");
      theme("box", t("Log in"), $output);
      theme("footer");
      break;
    case t("Delete account"):
    case "delete":
      $output = user_delete();
      theme("header");
      theme("box", t("User account"), user_menu());
      theme("box", t("Delete account"), $output);
      theme("footer");
      break;
    case t("Save user information"):
    case "edit":
      $output = user_edit($edit);
      $GLOBALS["theme"] = theme_init();
      theme("header");
      theme("box", t("User account"), user_menu());
      theme("box", t("Edit user information"), $output);
      theme("footer");
      break;
    case "view":
      user_view(arg(2));
      break;
    case t("Logout"):
    case "logout":
      print user_logout();
      break;
    case "help":
      theme("header");
      theme("box", t("Distributed authentication"), user_help_users_da());
      theme("footer");
      break;
    default:
      print user_view();
  }

}

/*** Administrative features ***********************************************/

function _user_mail_text($message) {
  switch ($message) {
    case "welcome_subject":
      return "Account details for %username at %site";

    case "welcome_body":
      return t("%username,\n\nThank you for registering at %site. You may now log in to ". url("user/login") ." using the following username and password:\n\nusername: %username\npassword: %password\n\nAfter logging in, you may wish to change your password at ". url("user/edit") ."\n\nYour new %site membership also enables to you to login to other Drupal powered websites (e.g. http://www.drop.org/) without registering. Just use the following Drupal ID and password:\n\nDrupal ID: %username@%uri_brief\npassword: %password\n\n\n--  %site team");

    case "welcome_approval_subject":
      return "Account details for %username at %site (pending admin approval)";

    case "welcome_approval_body":
      return t("%username,\n\nThank you for registering at %site. Your application for an account is currently pending approval. Once it has been granted, you may log in to ". url("user/login") ." using the following username and password:\n\nusername: %username\npassword: %password\n\nAfter logging in, you may wish to change your password at ". url("user/edit") ."\n\nYour new %site membership also enables to you to login to other Drupal powered websites (e.g. http://www.drop.org/) without registering. Just use the following Drupal ID and password:\n\nDrupal ID: %username@%uri_brief\npassword: %password\n\n\n--  %site team");

    case "pass_subject":
      return "Replacement login information for %username at %site";

    case "pass_body":
      return t("%username,\n\nHere is your new password for %site. You may now login to ". url("user/login") ." using the following username and password:\n\nusername: %username\npassword: %password\n\nAfter logging in, you may wish to change your password at "). url("user/edit");
  }
}

function user_settings() {
  $output .= form_select(t("Public registrations"), "user_register", variable_get("user_register", 1), array(t("Only site administrators can create new user accounts."), t("Visitors can create accounts and no administrator approval is required."), t("Visitors can create accounts but administrator approval is required.")));

  $output .= form_select(t("Remember authenticated users"), "user_remember", variable_get("user_remember", 0), array(t("Let the user decide whether he should be logged out when leaving the site."), t("Authenticated users are not logged out upon leaving the site."), t("Authenticated users are logged out upon leaving the site.")));

  $output .= form_textarea(t("User registration guidelines"), "user_registration_help", variable_get("user_registration_help", ""), 70, 4, t("This text is displayed at the top of the user registration form.  It's useful for helping or instructing your users."));

  $output .= form_textfield(t("Subject of welcome e-mail"), "user_mail_welcome_subject", variable_get("user_mail_welcome_subject", _user_mail_text("welcome_subject")), 70, 180, t("Customize the subject of your welcome e-mail, which is sent to new members upon registering.") . " " . t("Available variables are:") . " " . "%username, %site, %password, %uri, %uri_brief, %mailto, %date");

  $output .= form_textarea(t("Body of welcome e-mail"), "user_mail_welcome_body", variable_get("user_mail_welcome_body", _user_mail_text("welcome_body")), 70, 10, t("Customize the body of the welcome e-mail, which is sent to new members upon registering.") . " " . t("Available variables are:") . " " . "%username, %site, %password, %uri, %uri_brief, %mailto");

  $output .= form_textfield(t("Subject of welcome e-mail (awaiting admin approval)"), "user_mail_approval_subject", variable_get("user_mail_approval_subject", _user_mail_text("welcome_approval_subject")), 70, 180, t("Customize the subject of your awaiting approval welcome e-mail, which is sent to new members upon registering.") . " " . t("Available variables are:") . " " . "%username, %site, %password, %uri, %uri_brief, %mailto, %date");

  $output .= form_textarea(t("Body of welcome e-mail (awaiting admin approval)"), "user_mail_approval_body", variable_get("user_mail_approval_body", _user_mail_text("welcome_approval_body")), 70, 10, t("Customize the body of the awaiting approval welcome e-mail, which is sent to new members upon registering.") . " " . t("Available variables are:") . " " . "%username, %site, %password, %uri, %uri_brief, %mailto");

  $output .= form_textfield(t("Subject of password recovery e-mail"), "user_mail_pass_subject", variable_get("user_mail_pass_subject", _user_mail_text("pass_subject")), 70, 180, t("Customize the Subject of your forgotten password e-mail.") . " " . t("Available variables are:") . " " . "%username, %site, %password, %uri, %uri_brief, %mailto, %date");

  $output .= form_textarea(t("Body of password recovery e-mail"), "user_mail_pass_body", variable_get("user_mail_pass_body", _user_mail_text("pass_body")), 70, 10, t("Customize the body of the forgotten password e-mail.") . " " . t("Available variables are:") . " " . "%username, %site, %password, %uri, %uri_brief, %mailto");

  return $output;
}

function user_admin_create($edit = array()) {

  if ($edit["name"] || $edit["mail"]) {
    if ($error = user_validate_name($edit["name"])) {
      // do nothing
    }
    else if ($error = user_validate_mail($edit["mail"])) {
      // do nothing
    }
    else if (db_num_rows(db_query("SELECT name FROM users WHERE LOWER(name) = LOWER('%s')", $edit["name"])) > 0) {
      $error = t("The name '%s' is already taken.", array("%s" => $edit["name"]));
    }
    else if (db_num_rows(db_query("SELECT mail FROM users WHERE LOWER(mail) = LOWER('%s')", $edit["mail"])) > 0) {
      $error = t("The e-mail address '%s' is already taken.", array("%s" => $edit["mail"]));
    }
    else {
      $success = 1;
    }
  }

  if ($success) {
    watchdog("user", "new user: '". $edit["name"] ."' &lt;". $edit["mail"] ."&gt;");

    user_save("", array("name" => $edit["name"], "pass" => $edit["pass"], "init" => $edit["mail"], "mail" => $edit["mail"], "rid" => _user_authenticated_id(), "status" => 1));

    return "Created a new user '". $edit["name"] ."'.  No e-mail has been sent.";
  }
  else {

    if ($error) {
      $output .= theme("theme_error", $error);
    }

    $output .= form_textfield(t("Username"), "name", $edit["name"], 30, 55, t("Provide the username of the new account."));
    $output .= form_textfield(t("E-mail address"), "mail", $edit["mail"], 30, 55, t("Provide the e-mail address associated with the new account."));
    $output .= form_textfield(t("Password"), "pass", $edit["pass"], 30, 55, t("Provide a password for the new account."));
    $output .= form_submit(t("Create account"));

    return form($output);
  }
}

function user_admin_access($edit = array()) {

  $op = $_POST["op"];
  $type = arg(3);
  $id = arg(4);

  if (empty($type)) {
    return;
  }

  if ($type == "mail") {
    $output .= "<h3>" . t("E-mail rules") . "</h3>";
  }

  if ($type == "user") {
    $output .= "<h3>" . t("Username rules") . "</h3>";
  }

  if ($op == t("Add rule")) {
    db_query("INSERT INTO access (mask, type, status) VALUES ('%s', '%s', %d)", $edit["mask"], $type, $edit["status"]);
  }
  else if ($op == t("Check")) {
    if (user_deny($type, $edit["test"])) {
      $message = "<b>'". $edit["test"] ."' is not allowed.</b><p />";
    }
    else {
      $message = "<b>'". $edit["test"] ."' is allowed.</b><p />";
    }
  }
  else if ($id) {
    db_query("DELETE FROM access WHERE aid = %d", $id);
  }

  $header = array(t("type"), t("mask"), t("operations"));

  $result = db_query("SELECT * FROM access WHERE type = '%s' AND status = '1' ORDER BY mask", $type);

  while ($rule = db_fetch_object($result)) {
    $rows[] = array(t("Allow"), $rule->mask, array("data" => l(t("delete rule"), "admin/user/access/$type/$rule->aid"), "align" => "center"));
  }

  $result = db_query("SELECT * FROM access WHERE type = '%s' AND status = '0' ORDER BY mask", $type);

  while ($rule = db_fetch_object($result)) {
    $rows[] = array(t("Deny"), $rule->mask, l(t("delete rule"), "admin/user/access/$type/$rule->aid"));
  }

  $rows[] = array("<select name=\"edit[status]\"><option value=\"1\">". t("Allow") ."</option><option value=\"0\">". t("Deny") ."</option></select>", "<input size=\"32\" maxlength=\"64\" name=\"edit[mask]\" />", "<input type=\"submit\" name=\"op\" value=\"" . t("Add rule") . "\" />");

  $output .= table($header, $rows);

  $output .= "<p><small>%: " . t("Matches any number of characters, even zero characters") . ".<br />_: " . t("Matches exactly one character.") . "</small></p>";

  if ($type != "user") {
    $output .= "<h3>" . t("Check e-mail address") . "</h3>";
  }
  else {
    $output .= "<h3>" . t("Check username") . "</h3>";
  }

  $output .= "$message<input type=\"text\" size=\"32\" maxlength=\"64\" name=\"edit[test]\" value=\"". $edit["test"] ."\" /><input type=\"submit\" name=\"op\" value=\"" . t("Check") . "\" />";

  return form($output);
}

function user_roles($membersonly = 0) {
  $result = db_query("SELECT * FROM role ORDER BY name");
  while ($role = db_fetch_object($result)) {
    if (!$membersonly || ($membersonly && $role->name != "anonymous user")) {
      $roles[$role->rid] = $role->name;
    }
  }
  return $roles;
}

function user_admin_perm($edit = array()) {

  if ($edit) {

    /*
    ** Save permissions:
    */

    $result = db_query("SELECT * FROM role");
    while ($role = db_fetch_object($result)) {
      // delete, so if we clear every checkbox we reset that role;
      // otherwise permissions are active and denied everywhere
      db_query("DELETE FROM permission WHERE rid = %d", $role->rid);
      $perm = $edit[$role->rid] ? implode(", ", array_keys($edit[$role->rid])) : "";
      if ($perm) {
        db_query("INSERT INTO permission (rid, perm) VALUES (%d, '%s')", $role->rid, $perm);
      }

    }
  }

  /*
  ** Compile permission array:
  */

  foreach (module_list() as $name) {
    if (module_hook($name, "perm")) {
      $perms = array_merge($perms, module_invoke($name, "perm"));
    }
  }
  asort($perms);

  /*
  ** Compile role array:
  */

  $result = db_query("SELECT r.rid, p.perm FROM role r LEFT JOIN permission p ON r.rid = p.rid ORDER BY name");
  $roles = array();
  while ($role = db_fetch_object($result)) {
    $role_perms[$role->rid] = $role->perm;
  }

  $result = db_query("SELECT rid, name FROM role ORDER BY name");
  $role_names = array();
  while ($role = db_fetch_object($result)) {
    $role_names[$role->rid] = $role->name;
  }

  /*
  ** Render roles / permission overview:
  */

  $header = array_merge(array("&nbsp;"), $role_names);

  foreach ($perms as $perm) {
    $row[] = t($perm);
    foreach ($role_names as $rid => $name) {
      $row[] = "<input type=\"checkbox\" name=\"edit[$rid][$perm]\"". (strstr($role_perms[$rid], $perm) ? " checked=\"checked\"" : "") ." />";
    }
    $rows[] = $row;
    unset($row);
  }

  $output = table($header, $rows);
  $output .= form_submit(t("Save permissions"));

  return form($output);
}

function user_admin_role($edit = array()) {

  $op = $_POST["op"];
  $id = arg(3);

  if ($op == t("Save role")) {
    db_query("UPDATE role SET name = '%s' WHERE rid = %d", $edit["name"], $id);
  }
  else if ($op == t("Delete role")) {
    db_query("DELETE FROM role WHERE rid = %d", $id);
    db_query("DELETE FROM permission WHERE rid = %d", $id);
  }
  else if ($op == t("Add role")) {
    db_query("INSERT INTO role (name) VALUES ('%s')", $edit["name"]);
  }
  else if ($id) {
    /*
    ** Display role form:
    */

    $role = db_fetch_object(db_query("SELECT * FROM role WHERE rid = %d", $id));

    $output .= form_textfield(t("Role name"), "name", $role->name, 32, 64, t("The name for this role.  Example: 'moderator', 'editorial board', 'site architect'."));
    $output .= form_submit(t("Save role"));
    $output .= form_submit(t("Delete role"));

    $output = form($output);
  }

  if (!$output) {
    /*
    ** Render role overview:
    */

    $result = db_query("SELECT * FROM role ORDER BY name");

    $header = array(t("name"), t("operations"));
    while ($role = db_fetch_object($result)) {
      if ($role->name != "anonymous user" && $role->name != "authenticated user") {
        $rows[] = array($role->name, array("data" => l(t("edit role"), "admin/user/role/$role->rid"), "align" => "center"));
      }
      else {
        $rows[] = array($role->name, array("data" => "<span class=\"disabled\">". t("locked") ."</span>", "align" => "center"));
      }
    }
    $rows[] = array("<input type=\"text\" size=\"32\" maxlength=\"64\" name=\"edit[name]\" />", "<input type=\"submit\" name=\"op\" value=\"". t("Add role") ."\" />");

    $output = table($header, $rows);
    $output = form($output);
  }

  return $output;
}

function user_admin_edit($edit = array()) {

  $op = $_POST["op"];
  $id = arg(3);

  if ($account = user_load(array("uid" => $id))) {

    if ($op == t("Save account")) {
      foreach (module_list() as $module) {
        if (module_hook($module, "user")) {
          $result = module_invoke($module, "user", "edit_validate", $edit, $account);
        }
        if (is_array($result)) {
          $data = array_merge($data, $result);
        }
        elseif (is_string($result)) {
          $error = $result;
          break;
        }
      }

      // TODO: this display/edit/validate should be moved to a new profile.module implementing the _user hooks
      if ($error = user_validate_name($edit["name"])) {
        // do nothing
      }
      else if ($error = user_validate_mail($edit["mail"])) {
        // do nothing
      }
      else if (db_num_rows(db_query("SELECT uid FROM users WHERE uid != %d AND LOWER(name) = LOWER('%s')", $account->uid, $edit["name"])) > 0) {
        $error = t("The name '%s' is already taken.", array("%s" => $edit["name"]));
      }
      else if ($edit["mail"] && db_num_rows(db_query("SELECT uid FROM users WHERE uid != %d AND LOWER(mail) = LOWER('%s')", $account->uid, $edit["mail"])) > 0) {
        $error = t("The e-mail address '%s' is already taken.", array("%s" => $edit["mail"]));
      }

      /*
      ** If required, check that proposed passwords match.  If so,
      ** add new password to $edit.
      */

      if ($edit["pass1"]) {
        if ($edit["pass1"] == $edit["pass2"]) {
          $edit["pass"] = $edit["pass1"];
        }
        else {
          $error = t("The specified passwords do not match.");
        }
      }

      unset($edit["pass1"], $edit["pass2"]);
      if (!$error) {
        $account = user_save($account, array_merge($edit, $data));
        $output .= status(t("your user information changes have been saved."));
      }
      else {
        $output .= theme("theme_error", $error);
      }
    }
    else if ($op == t("Delete account")) {
      if ($edit["status"] == 0) {
        db_query("DELETE FROM users WHERE uid = %d", $account->uid);
        db_query("DELETE FROM authmap WHERE uid = %d", $account->uid);
        $output .= t("The account has been deleted.");
      }
      else {
        $output .= t("Failed to delete account: the account has to be blocked first.");
      }
    }

    /*
    ** Display user form:
    */

    $output .= form_item(t("User ID"), $account->uid);
    $output .= form_textfield(t("Username"), "name", $account->name, 30, 55, t("Your full name or your preferred username: only letters, numbers and spaces are allowed."));
    $output .= form_textfield(t("E-mail address"), "mail", $account->mail, 30, 55, t("Insert a valid e-mail address.  All e-mails from the system will be sent to this address. The e-mail address is not made public and will only be used if you wish to receive a new password or wish to receive certain news or notifications by e-mail."));

    foreach (module_list() as $module) {
      if (module_hook($module, "user")) {
        $output .= module_invoke($module, "user", "edit_form", $edit, $account);
      }
    }

    $options = "<option value=\"\"". (("" == $key) ? " selected=\"selected\"" : "") .">". t("Default theme") ."</option>\n";
    foreach (theme_list() as $key => $value) {
      $options .= "<option value=\"$key\"". (($edit["theme"] == $key) ? " selected=\"selected\"" : "") .">$key - $value->description</option>\n";
    }
    $output .= form_item(t("Theme"), "<select name=\"edit[theme]\">$options</select>", t("Selecting a different theme will change the look and feel of the site."));
    for ($zone = -43200; $zone <= 46800; $zone += 3600) $zones[$zone] = date("l, F dS, Y - h:i A", time() - date("Z") + $zone) ." (GMT ". $zone / 3600 .")";
    $output .= form_select(t("Time zone"), "timezone", $account->timezone, $zones, t("Select what time you currently have and your time zone settings will be set appropriate."));
    $output .= form_select(t("Language"), "language", $account->language, $languages, t("Selecting a different language will change the language of the site."));
    $output .= form_item(t("Password"), "<input type=\"password\" name=\"edit[pass1]\" size=\"12\" maxlength=\"24\" /> <input type=\"password\" name=\"edit[pass2]\" size=\"12\" maxlength=\"24\" />", t("Enter a new password twice if you want to change the current password for this user or leave it blank if you are happy with the current password."));
    $output .= form_select(t("Status"), "status", $account->status, array(t("Blocked"), t("Active")));
    $output .= form_select(t("Role"), "rid", $account->rid, user_roles(1));

    $output .= form_submit(t("Save account"));
    $output .= form_submit(t("Delete account"));

    $output = form($output, "post", 0, "enctype=\"multipart/form-data\"");

  }
  else {
    $output = t("No such user");
  }

  return $output;
}

function user_admin_account() {
  $query = arg(3);

  $queries = array("ORDER BY u.timestamp DESC", "ORDER BY u.uid DESC", "WHERE u.status = 0 ORDER BY u.uid DESC");
  foreach (user_roles(1) as $key => $value) {
    $queries[] = "WHERE r.name = '$value' ORDER BY u.uid DESC";
  }

  $result = pager_query("SELECT u.uid, u.name, u.timestamp FROM role r INNER JOIN users u ON r.rid = u.rid ". $queries[$query ? $query : 0], 50);

  $header = array(t("username"), t("last access"), t("operations"));
  while ($account = db_fetch_object($result)) {
    $rows[] = array(format_name($account), format_date($account->timestamp, "small"), l(t("edit account"), "admin/user/edit/$account->uid"));
  }

  $pager = pager_display(NULL, 50, 0, "admin");
  if (!empty($pager)) {
    $rows[] = array(array("data" => $pager, "colspan" => 3));
  }
  return table($header, $rows);
}

function user_role_init() {
  $role = db_fetch_object(db_query("SELECT * FROM role WHERE name = 'anonymous user'"));
  if (!$role) {
    db_query("INSERT INTO role (name) VALUES ('anonymous user')");
  }

  $role = db_fetch_object(db_query("SELECT * FROM role WHERE name = 'authenticated user'"));
  if (!$role) {
    db_query("INSERT INTO role (name) VALUES ('authenticated user')");
  }
}

function user_admin() {

  $op = $_POST["op"];
  $edit = $_POST["edit"];

  if (user_access("administer users")) {
    /*
    ** Initialize all the roles and permissions:
    */

    user_role_init();

    if (empty($op)) {
      $op = arg(2);
    }

    switch ($op) {
      case "search":
        print search_type("user", url("admin/user/search"), $_POST["keys"]);
        break;
      case t("Add rule"):
      case t("Check"):
      case "access":
        print user_admin_access($edit);
        break;
      case t("Save permissions"):
      case "permission":
        print user_admin_perm($edit);
        break;
      case t("Create account"):
      case "create":
        print user_admin_create($edit);
        break;
      case t("Add role"):
      case t("Delete role"):
      case t("Save role"):
      case "role":
        print user_admin_role($edit);
        break;
      case t("Delete account"):
      case t("Save account"):
      case "edit":
        print user_admin_edit($edit);
        break;
      default:
        print user_admin_account();
    }
  }
}
// this help is for end users
function user_help_users_da() {
  $site = "<i>". variable_get("site_name", "this website"). "</i>";

  $output = "
   <h3>Distributed authentication<a id=\"da\"></a></h3>
   <p>One of the more tedious moments in visiting a new website is filling out the
    registration form. Here at %s, you do not have to fill out a registration form
    if you are already a member of ";

  $output .= implode(", ", user_auth_help_links());
  $output .= ".  This capability is called <i>Distributed
    Authentication</i>, and is unique to <a href=\"http://www.drupal.org\">Drupal</a>,
    the software which powers %s.</p>
   <p>Distributed authentication enables a new user to input a username and password into the login box,
    and immediately be recognized, even if that user never registered at %s. This
    works because Drupal knows how to communicate with external registration databases.
    For example, lets say that new user 'Joe' is already a registered member of
    <a href=\"http://www.delphiforums.com\">Delphi Forums</a>. Drupal informs Joe
    on registration and login screens that he may login with his Delphi ID instead
    of registering with %s. Joe likes that idea, and logs in with a username
    of joe@remote.delphiforums.com and his usual Delphi password. Drupal then contacts
    the <i>remote.delphiforums.com</i> server behind the scenes (usually using <a href=\"http://www.xmlrpc.com\">XML-RPC</a>,
    <a href=\"http://www.w3.org/Protocols/\">HTTP POST</a>, or <a href=\"http://www.soapware.org\">SOAP</a>)
    and asks: \"Is the password for user Joe correct?\".  If Delphi replies yes, then
    we create a new $site account for Joe and log him into it.  Joe may keep
    on logging into %s in the same manner, and he will always be logged into the
    same account.</p>";

  $output = strtr($output, array("%s" => $site));

  foreach (module_list() as $module) {
    if (module_hook($module, "auth")) {
      $output .= "<h4><a id=\"$module\"></a>" . module_invoke($module, "info", "name") . "</h4>";
      $output .= module_invoke($module, "auth_help");
    }
  }

  return $output;
}

// the following functions comprise help for admins and developers
function user_help() {
  $output .= user_help_admin();
  $output .= user_help_admin_da();
  $output .= user_help_devel_da();
  $output .= user_help_devel_userhook();
  return t($output);
}

function user_help_admin() {
  $output .= "<h3>Introduction</h3><p>Drupal offers a powerful access system that allows users to register, login, logout, maintain user profiles, etc. By using \"". l ("roles", "admin/user/role") ."\" you can setup fine grained ". l("permissions", "admin/user/permission") ." allowing each role to do only what you want them to. Each user is assigned to a role. By default there are two roles \"anonymous\" - a user who has not logged in, and \"authorized\" a user who has signed up and who has been authorized. As anonymous users, participants suffer numerous disadvantages, for example they cannot sign their names to nodes, and their moderated posts beginning at a lower score.</p>";
  $output .= "<p>In contrast, those with a user account can use their own name or handle and are granted various privileges: the most important is probably the ability to moderate new submissions, to rate comments, and to fine-tune the site to their personal liking, with saved personal settings.  Drupal themes make fine tuning quite a pleasure.</p>";
  $output .= "<p>Registered users need to authenticate by supplying either a local username and password, or a remote username and password such as a ". l("jabber", "www.jabber.org") .", ". l("Delphi", "www.delphiforums.com") .", or one from another ". l("Drupal", "www.drupal.org") ." website. See ". l("distributed authentication", "#da") ." for more information on this innovative feature.";
  $output .= "The local username and password, hashed with Message Digest 5 (MD5), are stored in your database. When you enter a password it is also hashed with MD5 and compaired with what is in the database. If the hashes match, the username and password are correct. Once a user authenticated session is started, and until that session is over, the user won't have to re-authenticate. To keep track of the individual sessions, Drupal relies on ". l("PHP's session support", "www.php.net/manual/en/ref.session.php") .". A visitor accessing your website is assigned an unique ID, the so-called session ID, which is stored in a cookie. For security's sake, the cookie does not contain personal information but acts as a key to retrieve the information stored on your server's side. When a visitor accesses your site, Drupal will check whether a specific session ID has been sent with the request. If this is the case, the prior saved environment is recreated.</p>";
  $output .= "<h3>User preferences and profiles</h3><p>Each Drupal user has a profile, and a set of preferences which may be edited by clicking on the ". l("user account", "user") ." link. Of course, a user must be logged into reach those pages. There, users will find a page for changing their preferred time zone, language, username, e-mail address, password, theme, signature, homepage, and ". l("distributed authentication", "#da") ." names. Changes made here take effect immediately. Also, administrators may make profile and preferences changes in the ". l("Admin Center", "admin/user") ." on behalf of their users.</p>";
  $output .= "<p>Module developers are provided several hooks for adding custom fields to the user view/edit pages. These hooks are described in the Developer section of the ". l("Drupal Handbook", "drupal.org/node/view/316") .". For an example, see the <code>jabber_user()</code> function in <i>/modules/jabber.module</i>.</p>";
  return $output;
}

function user_help_admin_da() {

  $output .= "<h3>Distributed authentication<a id=\"da\"> </a></h3><p>One of the more tedious moments in visiting a new website is filling out the registration form. The reg form provides helpful information to the website owner, but not much value for the user. The value for the end user is usually the ability to post a messages or receive personalized news, etc. Distributed authentication (DA) gives the user what they want without having to fill out the reg form. Removing this obstacle yields more registered and active users for the website.</p>";
  $output .= "<p>DA enables a new user to input a username and password into the login box and immediately be recognized, even if that user never registered on your site. This works because Drupal knows how to communicate with external registration databases. For example, lets say that your new user 'Joe' is already a registered member of Delphi Forums. If your Drupal has delphi.module installed, then Drupal will inform Joe on the registration and login screens that he may login with his Delphi ID instead of registering with your Drupal instance. Joe likes that idea, and logs in with a username of joe@remote.delphiforums.com and his usual Delphi password. Drupal then communicates with remote.delphiforums.com (usually using ". l("XML-RPC","www.xmlrpc.com") ." ". l("HTTP POST", "www.w3.org/Protocols/") .", or ". l("SOAP", "www.soapware.org") .") behind the scenes and asks &quot;is this password for username=joe?&quot; If Delphi replies yes, then Drupal will create a new local account for joe and log joe into it. Joe may keep on logging into your Drupal instance in the same manner, and he will be logged into the same joe@remote.delphiforums.com account.</p>";
  $output .= "<p>One key element of DA is the 'authmap' table, which maps a user's authname (e.g. joe@remote.delphiforums.com) to his local UID (i.e. universal identification number). This map is checked whenever a user successfully logs into an external authentication source. Once Drupal knows that the current user is definately joe@remote.delphiforums.com (because Delphi says so), he looks up Joe's UID and logs Joe into that account.</p>";
  $output .= "<p>To disable distributed authentication, simply ". l("disable", "admin/system/modules") ." or remove all DA modules. For a virgin install, that means removing/disabling <i>jabber.module</i> and <i>drupal.module</i></p>";
  $output .= "<p>Drupal is setup so that it is very easy to add support for any external authentication source. You currently have the following authentication modules installed ...</p>";

    foreach (module_list() as $module) {
      if (module_hook($module, "auth")) {
        $output .= "<h4>" . module_invoke($module, "info", "name") . "</h4>";
        $output .= module_invoke($module, "auth_help");
      }
    }
  return $output;
}

function user_help_devel_da() {
  $output .= "<h3>Writing distributed authentication modules</h3><p>Drupal is specifically architected to enable easy authoring of new authentication modules. I'll deconstruct the ". l("Blogger", "www.blogger.com") ." authentication module, and hopefully provide all the details you'll need to write your own auth module. If you want to download the full text of this module, visit the ". l("Blogger source", "cvs.drupal.org/viewcvs.cgi/contributions/modules/authentication/Blogger/?cvsroot=contrib") ." in the ". l("Drupal contributions CVS repository", "cvs.drupal.org/viewcvs/contributions/?cvsroot=contrib") .".</p>";
  $output .= "<h4>Code review</h4><pre>&lt;?php</pre><p>The first line of every Drupal module, including the authentication modules, is the same. It is the standard processing instruction for any PHP file. Authentication modules are always written in PHP, although they typically interact with systems written in many different programming languages and operating systems languages.</p>";
  $output .= "<pre>function blogger_info(\$field = NULL) {
  \$info[\"name\"] = \"Blogger\";
  \$info[\"protocol\"] = \"XML-RPC\";
  \$info[\"link\"] = \"<a href=\\\"module.php?mod=user&op=sa_help#blogger\\\">Blogger</a>\";
  \$info[\"maintainer\"] = \"Moshe Weitzman\";
  \$info[\"maintaineremail\"] = \"weitzman at tejasa.com\";
  if (\$field) return \$info[\$field];
  else return \$info;
}</pre>";
  $output .= "<p>The <i>_info</i> function is always the first function defined in your module. This function populates an array called <i>\$info</i> with various pieces of data. Some of this data is used by Drupal (&quot;name&quot;, &quot;link&quot;), and some of it just informs the users of your module. Simply copy the <i>blogger_info</i> function in your module - but wherever it says <i>blogger</i> here, substitute your own module name.</p>";
  $output .= "<pre>function blogger_auth(\$name, \$pass, \$server) {
  // user did not present a Blogger ID so don't bother trying.
  if (\$server !== &quot;blogger.com&quot;) {
    return 0;
  }
  //provided to Drupal by Ev@Blogger
  \$appkey = &quot;6D4A2D6811A6E1F75148DC1155D33C0C958107BC&quot;

  \$message = new xmlrpcmsg(&quot;blogger.getUsersBlogs&quot;,
                           array(new xmlrpcval(\$appkey, &quot;string&quot;),
                           new xmlrpcval(\$name, &quot;string&quot;),
                           new xmlrpcval(\$pass, &quot;string&quot;)));
  \$client = new xmlrpc_client(&quot;/api/RPC2&quot;, &quot;plant.blogger.com&quot;);
  // \$client->setDebug(1);
  \$result = \$client-&gt;send(\$message, 5);
  // Since Blogger doesn't return a properly formed FaultCode, we just search for the string 'fault'.
  if (\$result &amp;&amp; !stristr(\$result-&gt;serialize(), &quot;fault&quot;)) {
    // watchdog(\"user\", \"Success Blogger Auth. Response: \" . \$result->serialize());
    return 1;
  }
  else if (\$result) {
    // watchdog(\"user\", \"Blogger Auth failure. Response was \" . \$result->serialize());
    return 0;
  }
  else {
    // watchdog(\"user\", \"Blogger Auth failure. Could not connect.\");
    return 0;
  }
}</pre>";
  $output .= "<p>The <i>_auth</i> function is the heart of any authentication module. This function is called whenever a user is attempting to login using your authentication module. For successful authentications, this function returns TRUE. Otherwise, it returns FALSE. This function always accepts 3 parameters, as shown above. These parameters are passed by the user system (user.module). The user system parses the username as typed by the user into 2 substrings - \$name and \$server. The parsing rules are:</p>";
  $output .= "<table border=\"0\" cellspacing=\"4\" cellpadding=\"4\" style=\"margin: auto; width: 80%;\"><tr><th colspan=\"2\" style=\"text-align: left;\">_auth function parameters</th></tr><tr><th>\$name</th><td>The substring before the final <i>'@'</i> character in the username field</td></tr><tr><th>\$pass</th><td>The whole string submitted by the user in the password field</td></tr><tr><th>\$server</th><td>The substring after the final <i>'@'</i> symbol in the username field</td></tr></table>";
  $output .= "<p>So now lets use that \$name, \$pass, and \$server which was passed to our <i>_auth</i> function. Blogger authenticates users via ". l("XML-RPC", "www.xmlrpc.org") .". Your module may authenticate using a different technique. Drupal doesn't reallly care how your module communicates with its registration source. It just <b>trusts</b> the module.</p>";
  $output .= "<p>The lines above illustrate a typical ". l("XML-RPC", "www.xmlrpc.org") ." method call. Here we build up a message and send it to Blogger, storing the response in a variable called <i>\$response</i>. The message we pass conforms to the published ". l("Blogger XML-RPC Application Programmers Interface (API)", "plant.blogger.com/API") .". Your module will no doubt implement a different API. One peculiarity of this module is that we don't actually use the $server parameter. Blogger only accepts authentication at <i>plant.blogger.com</i>, so we hard-code that value into the <i>xmlrpc_client()</i> function. A more typical example might be the jabber module, which uses the <i>\$server</i> parameter to determine where to send the authentication request. Also of note is the '5' parameter in the <i>\$client-&gt;send\(\)</i> call. This is a timeout value in seconds. All authentication modules should implement a timeout on their external calls. This makes sure to return control to the user.module if your registration database has become inoperable or unreachable.</p>";
  $output .= "<pre>
  if (\$result &amp;&amp; !stristr(\$result-&gt;serialize(), &quot;fault&quot;)) {
    // watchdog(\"user\", \"Success Blogger Auth. Response: \" . \$result->serialize());
    return 1;
  }
  else if (\$result) {
    // watchdog(\"user\", \"Blogger Auth failure. Response was \" . \$result->serialize());
    return 0;
  }
  else {
    // watchdog(\"user\", \"Blogger Auth failure. Could not connect.\");
    return 0;
  }
</pre>";
  $output .= "<p>This second half of the <i>_auth</i> function examines the <i>\$response</i> from plant.blogger.com and returns a TRUE (1) or FALSE (0) as appropriate. This is a critical decision, so be sure that you have good logic here, and perform sufficient testing for all cases. In the case of Blogger, we search for the string 'fault' in the response. If that string is present, or there is no repsonse, our function returns FALSE. Otherwise, Blogger has returned valid data to our method request and we return TRUE. Note: Everything starting with \"//\" is a comment and is not executed.</p>";
  $output .= "<pre>function blogger_page() {

  theme(&quot;header&quot;);
  theme(&quot;box&quot;, &quot;Blogger&quot;, blogger_auth_help());
  theme(&quot;footer&quot;);
}</pre>";
  $output .= "<p>The _page function is not currently used, but it might be in the future. For now, just copy what you see here, substituting your module name for <i>blogger</i>.</p>";
  $output .= "<code>function blogger_auth_help() {<br />
  \$site = variable_get(&quot;site_name&quot;, &quot;this web site&quot;);<br />
  \$html_output = &quot;<blockquote>
  &lt;p&gt;You may login to &lt;i&gt;%s&lt;/i&gt; using a &lt;b&gt;Blogger ID&lt;/b&gt; and password. A Blogger ID consists of your Blogger username followed by &lt;i&gt;@blogger.com&lt;/i&gt;. So a valid blogger ID is mwlily@blogger.com. If you are a Blogger member, go ahead and login now.&lt;/p&gt;
  &lt;p&gt;Blogger offers you instant communication power by letting you post your thoughts to the web whenever the urge strikes.
  Blogger will publish to your current web site or help you create one. &lt;a href=\&quot;http://www.blogger.com/about.pyra\&quot;&gt;Learn more about it&lt;/a&gt;.&quot;;</blockquote>
  return sprintf(t(\$html_output), \$site);<br />
}</code>";
  $output .= "<p>The <i>_auth_help</i> function is prominently linked within Drupal, so you'll want to write the best possible user help here. You'll want to tell users what a proper username looks like and you may also want to advertise a bit about your service at the end. Note that your help text is passed through a t() function in the last line. This is Drupal's localization function. Translators may localize your help text just like any other text in Drupal.</p>";
  $output .= "<h4>Publishing your module</h4><p>Once you've written and tested your authentication module, you'll usually want to share it with the world. The best way to do this is to add the module to the ". l("Drupal contributions CVS repository", "cvs.drupal.org/viewcvs.cgi/contributions/modules/authentication?cvsroot=contrib") .". You'll need to request priveleges to this repository - see ". l("the README file", "cvs.drupal.org/viewcvs.cgi/contributions/README?rev=HEAD&amp;cvsroot=contrib&amp;content-type=text/vnd.viewcvs-markup") ." for the details. Then you should announce your contribution on the ". l("drupal-devel and drupal-support mailing lists", "drupal.org/node/view/322") .". You might also want to post a story on ". l("Drupal.org", "www.drupal.org") .".</p>";
  return $output;
}

function user_help_devel_userhook() {

  $output .= "<h3><a id=\"userhook\">module_user()</a></h3><p>The <b>_user()</b> hook provides a mechanism for inserting text and form fields into the ". l("registration","user/register") .", ". l("user account view/edit", "user") .", and ". l("administer users", "admin/user") ." pages. This is useful if you want to add a custom field for your particular community. This is best illustrated by the ". l("profile.module", "cvs.drupal.org/viewcvs/drupal/modules/profile.module") .". The profile.module is meant to be customized for your needs. Please download it and hack away until it does what you need.</p>";

  $output .= "<p>Consider this simpler example from a fictional recipe community web site called Julia's Kitchen. Julia customizes her Drupal powered site by creating a new file called <i>julia.module</i>. That file does the following:<ul><li>new members must agree to Julia's Privacy Policy on the reg page.</li><li>members may list their favorite ingredients on their public user profile page</li></ul></p>";

  $output .= "<p>Julia achieves this with the following code. The comments below should help you understand what is going on.</p>";

  $output .= "<pre>
function julia_user(\$type, \$edit, &\$user) {
    // What type of registration action are we taking?
    switch (\$type) {
      case t(\"register_form\"):
        // Add two items to the resigtration form.
        \$output .= form_item(\"Privacy Policy\",
                             \"Julia would never sell your user information. She is just a nice \".
                             \"old French chef who lives near me in Cambridge, Massachussetts USA.\");
        \$output .= form_checkbox(\"Accept <i>Julia's Kitchen</i> privacy policy.\",
                                 julia_accept, 1, \$edit[\"julia_accept\"]);
        return \$output;
      case t(\"register_validate\"):
        // The user has filled out the form and checked the \"accept\" box.
        if (\$edit[\"julia_accept\"] == \"1\") {
          // on success return the values you want to store
          return array(\"julia_accept\" => 1);
        }
        else {
          // on error return an error message
          return \"You must accept the Julia's Kitchen privacy policy to register.\";
        }
      case t(\"view_public\"):
        // when others look at user data
        return form_item(\"Favorite Ingredient\", \$user->julia_favingredient);
      case t(\"view_private\"):
        // when user tries to view his own user page.
        return form_item(\"Favorite Ingredient\", \$user->julia_favingredient);
      case t(\"edit_form\"):
        // when user tries to edit his own user page.
        return form_textfield(\"Favorite Ingredient\", \"julia_favingredient\",
                             \$user->julia_favingredient, 50, 65,
                             \"Tell everyone your secret spice\");
      case t(\"edit_validate\"): // Make sure the data they edited is \"valid\".
        return user_save(\$user, array(\"julia_favingredient\" => \$edit[\"julia_favingredient\"]));
    }
  }
</pre>";
  return $output;
}

?>
