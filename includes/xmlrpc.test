<?php
// $Id$

class XMLRPCValidator1Test extends DrupalWebTestCase {
  /**
   * Implementation of getInfo().
   */
  function getInfo() {
    return array(
      'name'  => t('XML-RPC validator'),
      'description'  => t('See !validator-link. note: simpletest_xmlrpc.module must be enabled', array('!validator-link' => l('the xmlrpc validator1 specification', 'http://www.xmlrpc.com/validator1Docs'))),
      'group' => t('XML-RPC')
    );
  }

  function test_run_all_tests() {
    if (!$this->drupalModuleEnable('simpletest_xmlrpc')) {
      return FALSE;
    }
    $xml_url = url(NULL, array('absolute' => TRUE)) . 'xmlrpc.php';
    srand();
    mt_srand();


    $array_1 = array(array('curly' => mt_rand(-100,100)),
                   array('curly' => mt_rand(-100,100)),
                   array('larry' => mt_rand(-100,100)),
                   array('larry' => mt_rand(-100,100)),
                   array('moe' => mt_rand(-100,100)),
                   array('moe' => mt_rand(-100,100)),
                   array('larry' => mt_rand(-100,100)));
    shuffle($array_1);
    $l_res_1 = simpletest_xmlrpc_arrayOfStructsTest($array_1);
    $r_res_1 = xmlrpc($xml_url, 'validator1.arrayOfStructsTest', $array_1);
    $this->assertIdentical($l_res_1, $r_res_1, 'array of structs test: %s');


    $string_2 = 't\'&>>zf"md>yr>xlcev<h<"k&j<og"w&&>">>uai"np&s>>q\'&b<>"&&&';
    $l_res_2 = simpletest_xmlrpc_countTheEntities($string_2);
    $r_res_2 = xmlrpc($xml_url, 'validator1.countTheEntities', $string_2);
    $this->assertIdentical($l_res_2, $r_res_2, 'count the entities test: %s');


    $struct_3 = array('moe' => mt_rand(-100,100), 'larry' => mt_rand(-100,100), 'curly' => mt_rand(-100,100), 'homer' => mt_rand(-100,100));
    $l_res_3 = simpletest_xmlrpc_easyStructTest($struct_3);
    $r_res_3 = xmlrpc($xml_url, 'validator1.easyStructTest', $struct_3);
    $this->assertIdentical($l_res_3, $r_res_3, 'easy struct test: %s');


    $struct_4 = array('sub1' => array('bar' => 13),
                    'sub2' => 14,
                    'sub3' => array('foo' => 1, 'baz' => 2),
                    'sub4' => array('ss' => array('sss' => array('ssss' => 'sssss'))));
    $l_res_4 = simpletest_xmlrpc_echoStructTest($struct_4);
    $r_res_4 = xmlrpc($xml_url, 'validator1.echoStructTest', $struct_4);
    $this->assertIdentical($l_res_4, $r_res_4, 'echo struct test: %s');

    $int_5     = mt_rand(-100,100);
    $bool_5    = (($int_5 % 2) == 0);
    $string_5  = $this->randomName();
    $double_5  = (double)(mt_rand(-1000,1000) / 100);
    $time_5    = time();
    $base64_5  = $this->randomName(100);
    $l_res_5 = simpletest_xmlrpc_manyTypesTest($int_5, $bool_5, $string_5, $double_5, xmlrpc_date($time_5), $base64_5);
    $l_res_5[5] = $l_res_5[5]->data; /* override warpping */
    $r_res_5 = xmlrpc($xml_url, 'validator1.manyTypesTest', $int_5, $bool_5, $string_5, $double_5, xmlrpc_date($time_5), xmlrpc_base64($base64_5));
    /* Contains objects, objects are not equal */
    // See http://drupal.org/node/37766 why this currnetly fails
    $this->assertEqual($l_res_5, $r_res_5, 'many types test: %s');


    $size = mt_rand(100,200);
    $array_6 = array();
    for ($i = 0; $i < $size; $i++) {
      $array_6[] = $this->randomName(mt_rand(8,12));
    }

    $l_res_6 = simpletest_xmlrpc_moderateSizeArrayCheck($array_6);
    $r_res_6 = xmlrpc($xml_url, 'validator1.moderateSizeArrayCheck', $array_6);
    $this->assertIdentical($l_res_6, $r_res_6, 'moderate size array check: %s');


    $struct_7 = array();
    for ($y = 2000; $y < 2002; $y++) {
      for ($m = 3; $m < 5; $m++) {
        for ($d = 1; $d < 6; $d++) {
          $ys = (string)$y;
          $ms = sprintf('%02d', $m);
          $ds = sprintf('%02d', $d);
          $struct_7[$ys][$ms][$ds]['moe']   = mt_rand(-100,100);
          $struct_7[$ys][$ms][$ds]['larry'] = mt_rand(-100,100);
          $struct_7[$ys][$ms][$ds]['curly'] = mt_rand(-100,100);
        }
      }
    }
    $l_res_7 = simpletest_xmlrpc_nestedStructTest($struct_7);
    $r_res_7 = xmlrpc($xml_url, 'validator1.nestedStructTest', $struct_7);
    $this->assertIdentical($l_res_7, $r_res_7, 'nested struct test: %s');


    $int_8 = mt_rand(-100,100);
    $l_res_8 = simpletest_xmlrpc_simpleStructReturnTest($int_8);
    $r_res_8 = xmlrpc($xml_url, 'validator1.simpleStructReturnTest', $int_8);
    $this->assertIdentical($l_res_8, $r_res_8, 'nested struct test: %s');

    /* Now test multicall */
    $x = array();
    $x[] = array('validator1.arrayOfStructsTest',     $array_1);
    $x[] = array('validator1.countTheEntities',       $string_2);
    $x[] = array('validator1.easyStructTest',         $struct_3);
    $x[] = array('validator1.echoStructTest',         $struct_4);
    $x[] = array('validator1.manyTypesTest',          $int_5, $bool_5, $string_5, $double_5, xmlrpc_date($time_5), xmlrpc_base64($base64_5));
    $x[] = array('validator1.moderateSizeArrayCheck', $array_6);
    $x[] = array('validator1.nestedStructTest',       $struct_7);
    $x[] = array('validator1.simpleStructReturnTest', $int_8);

    $a_l_res = array($l_res_1, $l_res_2, $l_res_3, $l_res_4, $l_res_5, $l_res_6, $l_res_7, $l_res_8);
    $a_r_res = xmlrpc($xml_url, $x);
    $this->assertEqual($a_l_res, $a_r_res, 'multicall equals result');
  }
}
?>
